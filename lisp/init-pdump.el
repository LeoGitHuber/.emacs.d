;;; init-pdump --- -*- lexical-binding: t; -*-
;;; Commentary:
;;; Initialization for Pdumper
;;; Code:

;; (dolist (site '("early-init.el" "init.el"))
;;   (with-temp-buffer
;;     (insert-file-contents (concat user-emacs-directory site))
;;     (goto-char (point-min))
;;     (condition-case error
;;         (while-let ((form (read (current-buffer))))
;;           (pcase form
;;             (`(let ((file-name-handler-alist nil)) . ,rest)
;;              (with-temp-buffer
;;                (insert (mapconcat 'prin1-to-string rest " "))
;;                (goto-char (point-min))
;;                (while-let ((to (read (current-buffer))))
;;                  (pcase to
;;                    (`(require ',pkg)
;;                     (message "(require %s)" pkg)
;;                     (require pkg nil t))
;;                    (`(load ,pkg)
;;                     (message "(load %s)" pkg)
;;                     (load pkg))
;;                    (`(add-hook . ,_))
;;                    ;; (_ (eval to))
;;                    (_ )
;;                    )
;;                  )
;;                )
;;              )
;;             (_ (eval form))))
;;       (end-of-file nil))))

(dolist (site '("early-init.el" "init.el"))
  (with-temp-buffer
    (insert-file-contents (concat user-emacs-directory site))
    (goto-char (point-min))
    (condition-case error
        (while-let ((form (read (current-buffer))))
          (pcase form
            (`(require ',pkg)
             ;; (require pkg nil t)
             (message "(require %s)" pkg)
             (eval form)
             )
            (`(load ,pkg)
             (message "(load %s)" pkg)
             (eval form)
             )
            (`(with-eval-after-load . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(eval-after-load . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(global-set-key . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(keymap-global-set . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(keymap-set . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(define-key . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(when . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(if . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(unless . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(and . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defface . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defvar . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defhydra . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defun . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defconst . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(defalias . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(dolist . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(add-to-list . ,_)
             (message "%s" form)
             (eval form)
             )
            (`(add-hook . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(setq . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(setq-default . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(setenv . ,_)
             ;; (message "%s" form)
             ;; (eval form)
             )
            ((pred (lambda (sym)
                     (string-match-p "-mode" (symbol-name (car sym)))))
             ;; (message "%s" form)
             ;; (eval form)
             )
            (`(let . ,_)
             (message "%s" form)
             (eval form)
             )
            (_
             (message "%s" form)
             ;; (eval form)
             )
            ))
      (end-of-file nil))))

(dump-emacs-portable "Emacs.dump")

(provide 'init-pdump)
;;; init-pdump.el ends here
