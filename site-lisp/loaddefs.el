;;; loaddefs.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from verilog-mode/0test.el

(register-definition-prefixes "verilog-mode/0test" '("diff-flags" "global-replace-regexp" "verilog-test" "vl-"))


;;; Generated autoloads from lsp-bridge/acm/acm.el

(register-definition-prefixes "lsp-bridge/acm/acm" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-citre.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-citre" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-codeium.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-codeium" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-copilot.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-copilot" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-elisp.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-elisp" '("acm-backend-elisp-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-lsp.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-lsp" '("acm-backend-lsp-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-path.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-path" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-search-file-words.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-search-file-words" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-search-sdcv-words.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-search-sdcv-words" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-tabnine.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-tabnine" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-tailwind.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-tailwind" '("acm-backend-tailwind-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-telega.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-telega" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-tempel.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-tempel" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-backend-yas.el

(register-definition-prefixes "lsp-bridge/acm/acm-backend-yas" '("acm-"))


;;; Generated autoloads from lsp-bridge/acm/acm-frame.el

(register-definition-prefixes "lsp-bridge/acm/acm-frame" '("acm-frame-"))


;;; Generated autoloads from lsp-bridge/acm/acm-icon.el

(register-definition-prefixes "lsp-bridge/acm/acm-icon" '("acm-icon"))


;;; Generated autoloads from lsp-bridge/acm/acm-quick-access.el

(register-definition-prefixes "lsp-bridge/acm/acm-quick-access" '("acm-"))


;;; Generated autoloads from aggressive-indent-mode/aggressive-indent.el

(autoload 'aggressive-indent-indent-defun "aggressive-indent-mode/aggressive-indent" "\
Indent current defun.
Throw an error if parentheses are unbalanced.
If L and R are provided, use them for finding the start and end of defun.

(fn &optional L R)" t)
(autoload 'aggressive-indent-indent-region-and-on "aggressive-indent-mode/aggressive-indent" "\
Indent region between L and R, and then some.
Call `aggressive-indent-region-function' between L and R, and
then keep indenting until nothing more happens.

(fn L R)" t)
(autoload 'aggressive-indent-mode "aggressive-indent-mode/aggressive-indent" "\
Minor mode to keep your code always indented.

This is a minor mode.  If called interactively, toggle the
`Aggressive-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `aggressive-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{aggressive-indent-mode-map}

(fn &optional ARG)" t)
(put 'global-aggressive-indent-mode 'globalized-minor-mode t)
(defvar global-aggressive-indent-mode nil "\
Non-nil if Global Aggressive-Indent mode is enabled.
See the `global-aggressive-indent-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-aggressive-indent-mode'.")
(custom-autoload 'global-aggressive-indent-mode "aggressive-indent-mode/aggressive-indent" nil)
(autoload 'global-aggressive-indent-mode "aggressive-indent-mode/aggressive-indent" "\
Toggle Aggressive-Indent mode in all buffers.
With prefix ARG, enable Global Aggressive-Indent mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Aggressive-Indent mode is enabled in all buffers where
`aggressive-indent-mode' would do it.

See `aggressive-indent-mode' for more information on Aggressive-Indent
mode.

(fn &optional ARG)" t)
(defalias 'aggressive-indent-global-mode #'global-aggressive-indent-mode)
(register-definition-prefixes "aggressive-indent-mode/aggressive-indent" '("aggressive-indent-"))


;;; Generated autoloads from company-mode/test/all.el

(register-definition-prefixes "company-mode/test/all" '("company-test-path"))


;;; Generated autoloads from company-mode/test/async-tests.el

(register-definition-prefixes "company-mode/test/async-tests" '("company-async-backend"))


;;; Generated autoloads from avy/avy.el

(autoload 'avy-process "avy/avy" "\
Select one of CANDIDATES using `avy-read'.
Use OVERLAY-FN to visualize the decision overlay.
CLEANUP-FN should take no arguments and remove the effects of
multiple OVERLAY-FN invocations.

(fn CANDIDATES &optional OVERLAY-FN CLEANUP-FN)")
(autoload 'avy-goto-char "avy/avy" "\
Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-char-in-line "avy/avy" "\
Jump to the currently visible CHAR in the current line.

(fn CHAR)" t)
(autoload 'avy-goto-char-2 "avy/avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn CHAR1 CHAR2 &optional ARG BEG END)" t)
(autoload 'avy-goto-char-2-above "avy/avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t)
(autoload 'avy-goto-char-2-below "avy/avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t)
(autoload 'avy-isearch "avy/avy" "\
Jump to one of the current isearch candidates." t)
(autoload 'avy-goto-word-0 "avy/avy" "\
Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t)
(autoload 'avy-goto-whitespace-end "avy/avy" "\
Jump to the end of a whitespace sequence.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t)
(autoload 'avy-goto-word-1 "avy/avy" "\
Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

(fn CHAR &optional ARG BEG END SYMBOL)" t)
(autoload 'avy-goto-word-1-above "avy/avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-word-1-below "avy/avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1 "avy/avy" "\
Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1-above "avy/avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1-below "avy/avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-subword-0 "avy/avy" "\
Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

(fn &optional ARG PREDICATE BEG END)" t)
(autoload 'avy-goto-subword-1 "avy/avy" "\
Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-word-or-subword-1 "avy/avy" "\
Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t)
(autoload 'avy-goto-line "avy/avy" "\
Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

(fn &optional ARG)" t)
(autoload 'avy-goto-line-above "avy/avy" "\
Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t)
(autoload 'avy-goto-line-below "avy/avy" "\
Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t)
(autoload 'avy-goto-end-of-line "avy/avy" "\
Call `avy-goto-line' and move to the end of the line.

(fn &optional ARG)" t)
(autoload 'avy-copy-line "avy/avy" "\
Copy a selected line above the current line.
ARG lines can be used.

(fn ARG)" t)
(autoload 'avy-move-line "avy/avy" "\
Move a selected line above the current line.
ARG lines can be used.

(fn ARG)" t)
(autoload 'avy-copy-region "avy/avy" "\
Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t)
(autoload 'avy-move-region "avy/avy" "\
Select two lines and move the text between them above the current line." t)
(autoload 'avy-kill-region "avy/avy" "\
Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t)
(autoload 'avy-kill-ring-save-region "avy/avy" "\
Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn ARG)" t)
(autoload 'avy-kill-whole-line "avy/avy" "\
Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

(fn ARG)" t)
(autoload 'avy-kill-ring-save-whole-line "avy/avy" "\
Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

(fn ARG)" t)
(autoload 'avy-setup-default "avy/avy" "\
Setup the default shortcuts.")
(autoload 'avy-goto-char-timer "avy/avy" "\
Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn &optional ARG)" t)
(autoload 'avy-transpose-lines-in-region "avy/avy" "\
Transpose lines in the active region." t)
(register-definition-prefixes "avy/avy" '("avy-"))


;;; Generated autoloads from verilog-mode/batch_prof.el

(register-definition-prefixes "verilog-mode/batch_prof" '("t-"))


;;; Generated autoloads from benchmark-init-el/benchmark-init.el

(autoload 'benchmark-init/activate "benchmark-init-el/benchmark-init" "\
Activate benchmark-init and start collecting data." t)
(register-definition-prefixes "benchmark-init-el/benchmark-init" '("benchmark-init/"))


;;; Generated autoloads from benchmark-init-el/benchmark-init-modes.el

(autoload 'benchmark-init/show-durations-tabulated "benchmark-init-el/benchmark-init-modes" "\
Show the benchmark results in a sorted table." t)
(autoload 'benchmark-init/show-durations-tree "benchmark-init-el/benchmark-init-modes" "\
Show durations in call-tree." t)
(register-definition-prefixes "benchmark-init-el/benchmark-init-modes" '("benchmark-init/"))


;;; Generated autoloads from auctex/bib-cite.el

(autoload 'bib-cite-minor-mode "auctex/bib-cite" "\
Toggle bib-cite mode.
When bib-cite mode is enabled, citations, labels and refs are highlighted
when the mouse is over them.  Clicking on these highlights with [mouse-2]
runs `bib-find', and [mouse-3] runs `bib-display'.

(fn ARG)" t)
(autoload 'turn-on-bib-cite "auctex/bib-cite" "\
Unconditionally turn on Bib Cite mode.")
(register-definition-prefixes "auctex/bib-cite" '("LaTeX-find-label-hist-alist" "bib-" "create-alist-from-list" "member-cis" "psg-" "search-directory-tree"))


;;; Generated autoloads from blink-search/blink-search.el

(autoload 'blink-search-restart-process "blink-search/blink-search" "\
Stop and restart Blink-Search process." t)
(autoload 'blink-search-kill-process "blink-search/blink-search" "\
Stop Blink-Search process and kill all Blink-Search buffers." t)
(autoload 'blink-search-quit "blink-search/blink-search" nil t)
(autoload 'blink-search-quick-do "blink-search/blink-search" nil t)
(autoload 'blink-search "blink-search/blink-search" "\
Start blink-search.

blink-search will search current symbol if you call this function with `C-u' prefix.

(fn &optional ARG)" t)
(register-definition-prefixes "blink-search/blink-search" '("blink-search-"))


;;; Generated autoloads from blink-search/backend/blink-search-buffer-list.el

(register-definition-prefixes "blink-search/backend/blink-search-buffer-list" '("blink-search-buffer-list-update"))


;;; Generated autoloads from blink-search/backend/blink-search-current-buffer.el

(register-definition-prefixes "blink-search/backend/blink-search-current-buffer" '("blink-search-"))


;;; Generated autoloads from blink-search/backend/blink-search-elisp-symbol.el

(register-definition-prefixes "blink-search/backend/blink-search-elisp-symbol" '("blink-search-"))


;;; Generated autoloads from blink-search/blink-search-epc.el

(register-definition-prefixes "blink-search/blink-search-epc" '("blink-search-"))


;;; Generated autoloads from blink-search/backend/blink-search-grep-file.el

(register-definition-prefixes "blink-search/backend/blink-search-grep-file" '("blink-search-grep-file-"))


;;; Generated autoloads from blink-search/backend/blink-search-grep-pdf.el

(register-definition-prefixes "blink-search/backend/blink-search-grep-pdf" '("blink-search-grep-pdf-"))


;;; Generated autoloads from blink-search/blink-search-icon.el

(autoload 'blink-search-icon-fetch-all "blink-search/blink-search-icon" nil t)
(register-definition-prefixes "blink-search/blink-search-icon" '("blink-search-icon"))


;;; Generated autoloads from blink-search/backend/blink-search-imenu.el

(register-definition-prefixes "blink-search/backend/blink-search-imenu" '("blink-search-i"))


;;; Generated autoloads from blink-search/backend/blink-search-pdf.el

(register-definition-prefixes "blink-search/backend/blink-search-pdf" '("blink-search-pdf-"))


;;; Generated autoloads from blink-search/backend/blink-search-recent-file.el

(register-definition-prefixes "blink-search/backend/blink-search-recent-file" '("blink-search-"))


;;; Generated autoloads from breadcrumb/breadcrumb.el

(autoload 'breadcrumb-imenu-crumbs "breadcrumb/breadcrumb" "\
Describe point inside the Imenu tree of current file.")
(autoload 'breadcrumb-project-crumbs "breadcrumb/breadcrumb" "\
Describing the current file inside project.")
(autoload 'breadcrumb-local-mode "breadcrumb/breadcrumb" "\
Header lines with breadcrumbs.

This is a minor mode.  If called interactively, toggle the
`Breadcrumb-Local mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `breadcrumb-local-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'breadcrumb-mode 'globalized-minor-mode t)
(defvar breadcrumb-mode nil "\
Non-nil if Breadcrumb mode is enabled.
See the `breadcrumb-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `breadcrumb-mode'.")
(custom-autoload 'breadcrumb-mode "breadcrumb/breadcrumb" nil)
(autoload 'breadcrumb-mode "breadcrumb/breadcrumb" "\
Toggle Bc-Local mode in all buffers.
With prefix ARG, enable Breadcrumb mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Bc-Local mode is enabled in all buffers where
`bc--turn-on-local-mode-on-behalf-of-global-mode' would do it.

See `bc-local-mode' for more information on Bc-Local mode.

(fn &optional ARG)" t)
(autoload 'breadcrumb-jump "breadcrumb/breadcrumb" "\
Like \\[execute-extended-command] `imenu', but breadcrumb-powered." t)
(register-definition-prefixes "breadcrumb/breadcrumb" '("bc-"))


;;; Generated autoloads from browse-kill-ring/browse-kill-ring.el

(autoload 'browse-kill-ring-default-keybindings "browse-kill-ring/browse-kill-ring" "\
Set up M-y (`yank-pop') so that it can invoke `browse-kill-ring'.
Normally, if M-y was not preceeded by C-y, then it has no useful
behavior.  This function sets things up so that M-y will invoke
`browse-kill-ring'." t)
(autoload 'browse-kill-ring "browse-kill-ring/browse-kill-ring" "\
Display items in the `kill-ring' in another buffer." t)
(register-definition-prefixes "browse-kill-ring/browse-kill-ring" '("browse-kill-ring-"))


;;; Generated autoloads from cape/cape.el

(autoload 'cape-history "cape/cape" "\
Complete from Eshell, Comint or minibuffer history.
See also `consult-history' for a more flexible variant based on
`completing-read'.  If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-file "cape/cape" "\
Complete file name at point.
See the user option `cape-file-directory-must-exist'.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-symbol "cape/cape" "\
Complete Elisp symbol at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-elisp-block "cape/cape" "\
Complete Elisp in Org or Markdown code block.
This Capf is particularly useful for literate Emacs configurations.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dabbrev "cape/cape" "\
Complete with Dabbrev at point.

If INTERACTIVE is nil the function acts like a Capf.  In case you
observe a performance issue with autocompletion and `cape-dabbrev'
it is strongly recommended to disable scanning in other buffers.
See the user options `cape-dabbrev-min-length' and
`cape-dabbrev-check-other-buffers'.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dict "cape/cape" "\
Complete word from dictionary at point.
This completion function works best if the dictionary is sorted
by frequency.  See the custom option `cape-dict-file'.  If
INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-abbrev "cape/cape" "\
Complete abbreviation at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-line "cape/cape" "\
Complete current line from other lines.
The buffers returned by `cape-line-buffer-function' are scanned for lines.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-super-capf "cape/cape" "\
Merge CAPFS and return new Capf which includes all candidates.
The function `cape-super-capf' is experimental.

(fn &rest CAPFS)")
(autoload 'cape-company-to-capf "cape/cape" "\
Convert Company BACKEND function to Capf.
VALID is a function taking the old and new input string.  It
should return nil if the cached candidates became invalid.  The
default value for VALID is `string-prefix-p' such that the
candidates are only fetched again if the input prefix
changed.  The function `cape-company-to-capf' is experimental.

(fn BACKEND &optional VALID)")
(autoload 'cape-interactive "cape/cape" "\
Complete interactively with the given CAPFS.

(fn &rest CAPFS)")
(autoload 'cape-interactive-capf "cape/cape" "\
Create interactive completion function from CAPF.

(fn CAPF)")
(autoload 'cape-wrap-buster "cape/cape" "\
Call CAPF and return a completion table with cache busting.
This function can be used as an advice around an existing Capf.
The cache is busted when the input changes.  The argument VALID
can be a function taking the old and new input string.  It should
return nil if the new input requires that the completion table is
refreshed.  The default value for VALID is `equal', such that the
completion table is refreshed on every input change.

(fn CAPF &optional VALID)")
(autoload 'cape-wrap-properties "cape/cape" "\
Call CAPF and add additional completion PROPERTIES.
Completion properties include for example :exclusive, :annotation-function and
the various :company-* extensions.  Furthermore a boolean :sort flag and a
completion :category symbol can be specified.

(fn CAPF &rest PROPERTIES)")
(autoload 'cape-wrap-nonexclusive "cape/cape" "\
Call CAPF and ensure that it is marked as non-exclusive.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-predicate "cape/cape" "\
Call CAPF and add an additional candidate PREDICATE.
The PREDICATE is passed the candidate symbol or string.

(fn CAPF PREDICATE)")
(autoload 'cape-wrap-silent "cape/cape" "\
Call CAPF and silence it (no messages, no errors).
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-case-fold "cape/cape" "\
Call CAPF and return a case-insensitive completion table.
If DONT-FOLD is non-nil return a case sensitive table instead.
This function can be used as an advice around an existing Capf.

(fn CAPF &optional DONT-FOLD)")
(autoload 'cape-wrap-noninterruptible "cape/cape" "\
Call CAPF and return a non-interruptible completion table.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-prefix-length "cape/cape" "\
Call CAPF and ensure that prefix length is greater or equal than LENGTH.
If the prefix is long enough, enforce auto completion.

(fn CAPF LENGTH)")
(autoload 'cape-wrap-inside-comment "cape/cape" "\
Call CAPF only if inside comment.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-inside-string "cape/cape" "\
Call CAPF only if inside string.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-purify "cape/cape" "\
Call CAPF and ensure that it does not illegally modify the buffer.
This function can be used as an advice around an existing
Capf.  It has been introduced mainly to fix the broken
`pcomplete-completions-at-point' function in Emacs versions < 29.

(fn CAPF)")
(autoload 'cape-wrap-accept-all "cape/cape" "\
Call CAPF and return a completion table which accepts every input.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
 (autoload 'cape-capf-accept-all "cape")
 (autoload 'cape-capf-buster "cape")
 (autoload 'cape-capf-case-fold "cape")
 (autoload 'cape-capf-inside-comment "cape")
 (autoload 'cape-capf-inside-string "cape")
 (autoload 'cape-capf-noninterruptible "cape")
 (autoload 'cape-capf-nonexclusive "cape")
 (autoload 'cape-capf-predicate "cape")
 (autoload 'cape-capf-prefix-length "cape")
 (autoload 'cape-capf-properties "cape")
 (autoload 'cape-capf-purify "cape")
 (autoload 'cape-capf-silent "cape")
(register-definition-prefixes "cape/cape" '("cape-"))


;;; Generated autoloads from cape/cape-char.el

 (autoload 'cape-tex "cape-char" nil t)
 (autoload 'cape-sgml "cape-char" nil t)
 (autoload 'cape-rfc1345 "cape-char" nil t)
(register-definition-prefixes "cape/cape-char" '("cape-char--define"))


;;; Generated autoloads from cape/cape-keyword.el

(autoload 'cape-keyword "cape/cape-keyword" "\
Complete programming language keyword at point.
See the variable `cape-keyword-list'.
If INTERACTIVE is nil the function acts like a capf.

(fn &optional INTERACTIVE)" t)
(register-definition-prefixes "cape/cape-keyword" '("cape-"))


;;; Generated autoloads from company-mode/test/capf-tests.el

(register-definition-prefixes "company-mode/test/capf-tests" '("company-"))


;;; Generated autoloads from markdown-mode/tests/checkdoc-batch.el

(register-definition-prefixes "markdown-mode/tests/checkdoc-batch" '("markdown-test--checkdoc-file"))


;;; Generated autoloads from puni/scripts/checkdoc-hack.el

(register-definition-prefixes "puni/scripts/checkdoc-hack" '("puni-checkdoc-create-error"))


;;; Generated autoloads from treemacs/test/checkdock.el

(register-definition-prefixes "treemacs/test/checkdock" '("all-el-files" "checkdoc-buffer" "get-errors" "valid-doc-words"))


;;; Generated autoloads from citre/citre.el

(put 'citre-enable-xref-integration 'safe-local-variable #'booleanp)
(put 'citre-enable-capf-integration 'safe-local-variable #'booleanp)
(put 'citre-enable-imenu-integration 'safe-local-variable #'booleanp)
(autoload 'citre-jump "citre/citre" "\
Jump to the definition of the symbol at point.
When there's multiple definitions, it lets you pick one using the
`completing-read' UI, or you could use your own UI by customizing
`citre-select-definition-function'." t)
(autoload 'citre-jump-to-reference "citre/citre" "\
Jump to the definition of the symbol at point.
When there's multiple definitions, it lets you pick one using the
`completing-read' UI, or you could use your own UI by customizing
`citre-select-definition-function'." t)
(autoload 'citre-peek "citre/citre" "\
Peek the definition of symbol at pointthe symbol in BUF at POINT.
Or, When BUF or POINT is non-nil, peek the symbol at POINT (or
current point) in BUF (or the current buffer).

When REFERENCE is non-nil, peek the references.

(fn &optional BUF POINT REFERENCE)" t)
(autoload 'citre-ace-peek "citre/citre" "\
Peek the definition of a symbol on screen using ace jump.
Press a key in `citre-peek-ace-pick-symbol-at-point-keys' to pick
the symbol under point.

This command is useful when you want to see the definition of a
function while filling its arglist.  When REFERENCE is non-nil,
peek the references.

(fn &optional REFERENCE)" t)
(autoload 'citre-peek-through "citre/citre" "\
Peek through a symbol in current peek window.
If REFERENCE is non-nil, peek its references, otherwise peek its
definitions.

(fn &optional REFERENCE)" t)
(autoload 'citre-peek-reference "citre/citre" "\
Peek the definitions of the symbol at point." t)
(autoload 'citre-ace-peek-reference "citre/citre" "\
Peek the references of a symbol on screen using ace jump." t)
(autoload 'citre-peek-through-reference "citre/citre" "\
Peek through a symbol in current peek window for references." t)
(autoload 'citre-mode "citre/citre" "\
Enable `completion-at-point', xref and imenu integration.

This is a minor mode.  If called interactively, toggle the `Citre
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `citre-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'citre-auto-enable-citre-mode "citre/citre" "\
Enable `citre-mode' if appropriate.
This means the current major mode satisfies
`citre-auto-enable-citre-mode-modes', and one of
`citre-auto-enable-citre-mode-backends' is usable.

Put this in `find-file-hook' to automatically enable `citre-mode'
when opening a file.")
(register-definition-prefixes "citre/citre" '("citre-"))


;;; Generated autoloads from citre/citre-backend-interface.el

(register-definition-prefixes "citre/citre-backend-interface" '("citre-"))


;;; Generated autoloads from citre/citre-common-tag.el

(register-definition-prefixes "citre/citre-common-tag" '("citre-"))


;;; Generated autoloads from citre/citre-common-util.el

(register-definition-prefixes "citre/citre-common-util" '("citre-"))


;;; Generated autoloads from citre/citre-ctags.el

(put 'citre-tags-file-alist 'safe-local-variable #'listp)
(autoload 'citre-update-tags-file "citre/citre-ctags" "\
Update TAGSFILE.
When called interactively, ask the user to pick a tags file.

If Citre can't find an updating recipe in the tagsfile, ask the
user to edit one and save it to TAGSFILE.

When SYNC is non-nil, update TAGSFILE synchronously if it
contains a recipe.

(fn &optional TAGSFILE SYNC)" t)
(autoload 'citre-update-this-tags-file "citre/citre-ctags" "\
Update the currently used tags file.
When no such tags file is found, ask the user to create one.

When a tags file is found, but Citre can't find an updating
recipe in the tagsfile, ask the user to edit one and save it to
the tags file.

When SYNC is non-nil, update the tags file synchronously.

(fn &optional SYNC)" t)
(autoload 'citre-edit-tags-file-recipe "citre/citre-ctags" "\
Edit the recipe of TAGSFILE.
When called interactively, ask the user to select a tags file.

When CMD-PTAG is non-nil, don't use a command-editing buffer, but
write it to CITRE_CMD ptag directly.

When CWD is non-nil, don't ask the user to pick a root dir to run Ctags.

When NOCONFIRM is non-nil, don't ask the user whether to update
the tags file now (update it directly instead).

(fn &optional TAGSFILE CMD-PTAG CWD NOCONFIRM)" t)
(autoload 'citre-create-tags-file "citre/citre-ctags" "\
Create a new tags file.
An updating recipe is written to it so later it can be updated by
`citre-update-tags-file'." t)
(register-definition-prefixes "citre/citre-ctags" '("citre-"))


;;; Generated autoloads from citre/citre-global.el

(autoload 'citre-global-create-database "citre/citre-global" "\
Create gtags database." t)
(autoload 'citre-global-update-database "citre/citre-global" "\
Update the gtags database in use.
If no database is found, prompt the user to create one." t)
(register-definition-prefixes "citre/citre-global" '("citre-"))


;;; Generated autoloads from citre/citre-lang-c.el

(register-definition-prefixes "citre/citre-lang-c" '("citre-lang-c-"))


;;; Generated autoloads from citre/citre-lang-fileref.el

(register-definition-prefixes "citre/citre-lang-fileref" '("citre-lang-fileref-"))


;;; Generated autoloads from citre/citre-lang-verilog.el

(register-definition-prefixes "citre/citre-lang-verilog" '("citre-lang-verilog-"))


;;; Generated autoloads from citre/citre-readtags.el

(register-definition-prefixes "citre/citre-readtags" '("citre-readtags-"))


;;; Generated autoloads from citre/citre-readtags-tables.el

(register-definition-prefixes "citre/citre-readtags-tables" '("citre-readtags--"))


;;; Generated autoloads from citre/citre-tags.el

(register-definition-prefixes "citre/citre-tags" '("citre-tags-"))


;;; Generated autoloads from citre/citre-ui-jump.el

(register-definition-prefixes "citre/citre-ui-jump" '("citre-jump-"))


;;; Generated autoloads from citre/citre-ui-peek.el

(register-definition-prefixes "citre/citre-ui-peek" '("citre-"))


;;; Generated autoloads from emacs-chinese-word-segmentation/cns.el

(autoload 'cns-mode "emacs-chinese-word-segmentation/cns" "\
Toggle Chinese word segmentation mode in current buffer (Cns mode).
With prefix ARG, enable Chinese word segmentation mode if ARG is
positive; otherwise, disable it.  If called from Lisp, enable the
mode if ARG is omitted or nil.

This library simply processes Chinese word segmentation result
generated by a modified version of
Jieba (<https://github.com/yanyiwu/cppjieba/>), if necessary.  See
the comments at the top of this library for further information.

This is an minor mode in current buffer.  To toggle the mode in
all buffers, use `global-cns-mode'.

(fn &optional ARG)" t)
(put 'global-cns-mode 'globalized-minor-mode t)
(defvar global-cns-mode nil "\
Non-nil if Global Cns mode is enabled.
See the `global-cns-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-cns-mode'.")
(custom-autoload 'global-cns-mode "emacs-chinese-word-segmentation/cns" nil)
(autoload 'global-cns-mode "emacs-chinese-word-segmentation/cns" "\
Toggle Cns mode in all buffers.
With prefix ARG, enable Global Cns mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Cns mode is enabled in all buffers where `(lambda nil (cns-mode 1))'
would do it.

See `cns-mode' for more information on Cns mode.

(fn &optional ARG)" t)
(register-definition-prefixes "emacs-chinese-word-segmentation/cns" '("cns-"))


;;; Generated autoloads from combobulate/combobulate.el

(register-definition-prefixes "combobulate/combobulate" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-contrib.el

(register-definition-prefixes "combobulate/combobulate-contrib" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-css.el

(register-definition-prefixes "combobulate/combobulate-css" '("combobulate-css-"))


;;; Generated autoloads from combobulate/combobulate-debug.el

(register-definition-prefixes "combobulate/combobulate-debug" '("combobulate--"))


;;; Generated autoloads from combobulate/combobulate-display.el

(register-definition-prefixes "combobulate/combobulate-display" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-envelope.el

(register-definition-prefixes "combobulate/combobulate-envelope" '("combobulate-envelope-"))


;;; Generated autoloads from combobulate/combobulate-html.el

(register-definition-prefixes "combobulate/combobulate-html" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-interface.el

(register-definition-prefixes "combobulate/combobulate-interface" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-js-ts.el

(register-definition-prefixes "combobulate/combobulate-js-ts" '("combobulate-j"))


;;; Generated autoloads from combobulate/combobulate-json.el

(register-definition-prefixes "combobulate/combobulate-json" '("combobulate-json-"))


;;; Generated autoloads from combobulate/combobulate-manipulation.el

(register-definition-prefixes "combobulate/combobulate-manipulation" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-misc.el

(register-definition-prefixes "combobulate/combobulate-misc" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-navigation.el

(register-definition-prefixes "combobulate/combobulate-navigation" '("combobulate-" "with-argument-repetition"))


;;; Generated autoloads from combobulate/combobulate-python.el

(register-definition-prefixes "combobulate/combobulate-python" '("combobulate-python-"))


;;; Generated autoloads from combobulate/combobulate-query.el

(autoload 'combobulate-query-builder "combobulate/combobulate-query" "\
Open an interactive query builder buffer.

Design and test tree-sitter queries interactively with syntax
highlighting and node completion." t)
(register-definition-prefixes "combobulate/combobulate-query" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-rules.el

(register-definition-prefixes "combobulate/combobulate-rules" '("combobulate-rules-"))


;;; Generated autoloads from combobulate/combobulate-settings.el

(register-definition-prefixes "combobulate/combobulate-settings" '("combobulate-"))


;;; Generated autoloads from combobulate/combobulate-yaml.el

(register-definition-prefixes "combobulate/combobulate-yaml" '("combobulate-yaml-setup"))


;;; Generated autoloads from combobulate/combobulate-ztree.el

(register-definition-prefixes "combobulate/combobulate-ztree" '("combobulate-ztree-"))


;;; Generated autoloads from citre/tests/common.el

(register-definition-prefixes "citre/tests/common" '("default-tags" "expand-test-file" "get-file-content" "map-get-field" "set-equal" "tags-get-definitions"))


;;; Generated autoloads from company-mode/company.el

(autoload 'company-mode "company-mode/company" "\
\"complete anything\"; is an in-buffer completion framework.

Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

This is a minor mode.  If called interactively, toggle the
`Company mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `company-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-company-mode 'globalized-minor-mode t)
(defvar global-company-mode nil "\
Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")
(custom-autoload 'global-company-mode "company-mode/company" nil)
(autoload 'global-company-mode "company-mode/company" "\
Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Company mode is enabled in all buffers where `company-mode-on' would
do it.

See `company-mode' for more information on Company mode.

(fn &optional ARG)" t)
(autoload 'company-manual-begin "company-mode/company" nil t)
(autoload 'company-complete "company-mode/company" "\
Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t)
(register-definition-prefixes "company-mode/company" '("company-"))


;;; Generated autoloads from company-mode/company-abbrev.el

(autoload 'company-abbrev "company-mode/company-abbrev" "\
`company-mode' completion backend for abbrev.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-abbrev" '("company-abbrev-insert"))


;;; Generated autoloads from company-mode/company-bbdb.el

(autoload 'company-bbdb "company-mode/company-bbdb" "\
`company-mode' completion backend for BBDB.

(fn COMMAND &optional ARG &rest IGNORE)" t)
(register-definition-prefixes "company-mode/company-bbdb" '("company-bbdb-"))


;;; Generated autoloads from company-box/company-box.el

(autoload 'company-box-mode "company-box/company-box" "\
Company-box minor mode.

This is a minor mode.  If called interactively, toggle the
`company-box mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `company-box-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "company-box/company-box" '("company-box-"))


;;; Generated autoloads from company-box/company-box-doc.el

(register-definition-prefixes "company-box/company-box-doc" '("company-box-"))


;;; Generated autoloads from company-box/company-box-icons.el

(register-definition-prefixes "company-box/company-box-icons" '("company-box-icons-"))


;;; Generated autoloads from company-mode/company-capf.el

(register-definition-prefixes "company-mode/company-capf" '("company-"))


;;; Generated autoloads from company-mode/company-clang.el

(register-definition-prefixes "company-mode/company-clang" '("company-clang"))


;;; Generated autoloads from company-mode/company-cmake.el

(register-definition-prefixes "company-mode/company-cmake" '("company-cmake"))


;;; Generated autoloads from company-mode/company-css.el

(autoload 'company-css "company-mode/company-css" "\
`company-mode' completion backend for `css-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-css" '("company-css-"))


;;; Generated autoloads from company-mode/company-dabbrev.el

(autoload 'company-dabbrev "company-mode/company-dabbrev" "\
dabbrev-like `company-mode' completion backend.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-dabbrev" '("company-dabbrev-"))


;;; Generated autoloads from company-mode/company-dabbrev-code.el

(autoload 'company-dabbrev-code "company-mode/company-dabbrev-code" "\
dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-dabbrev-code" '("company-dabbrev-code-"))


;;; Generated autoloads from company-mode/company-elisp.el

(autoload 'company-elisp "company-mode/company-elisp" "\
`company-mode' completion backend for Emacs Lisp.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-elisp" '("company-elisp-"))


;;; Generated autoloads from company-mode/company-etags.el

(autoload 'company-etags "company-mode/company-etags" "\
`company-mode' completion backend for etags.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-etags" '("company-etags-"))


;;; Generated autoloads from company-mode/company-files.el

(autoload 'company-files "company-mode/company-files" "\
`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-files" '("company-file"))


;;; Generated autoloads from company-mode/company-gtags.el

(autoload 'company-gtags "company-mode/company-gtags" "\
`company-mode' completion backend for GNU Global.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-gtags" '("company-gtags-"))


;;; Generated autoloads from company-mode/company-ispell.el

(autoload 'company-ispell "company-mode/company-ispell" "\
`company-mode' completion backend using Ispell.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-ispell" '("company-ispell-"))


;;; Generated autoloads from company-mode/company-keywords.el

(autoload 'company-keywords "company-mode/company-keywords" "\
`company-mode' backend for programming language keywords.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-keywords" '("company-keywords-"))


;;; Generated autoloads from company-mode/company-nxml.el

(autoload 'company-nxml "company-mode/company-nxml" "\
`company-mode' completion backend for `nxml-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-nxml" '("company-nxml-"))


;;; Generated autoloads from company-mode/company-oddmuse.el

(autoload 'company-oddmuse "company-mode/company-oddmuse" "\
`company-mode' completion backend for `oddmuse-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-oddmuse" '("company-oddmuse-"))


;;; Generated autoloads from company-mode/company-semantic.el

(autoload 'company-semantic "company-mode/company-semantic" "\
`company-mode' completion backend using CEDET Semantic.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-semantic" '("company-semantic-"))


;;; Generated autoloads from company-mode/company-template.el

(register-definition-prefixes "company-mode/company-template" '("company-template-"))


;;; Generated autoloads from company-mode/company-tempo.el

(autoload 'company-tempo "company-mode/company-tempo" "\
`company-mode' completion backend for tempo.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-mode/company-tempo" '("company-tempo-"))


;;; Generated autoloads from company-mode/company-tests.el

(register-definition-prefixes "company-mode/company-tests" '("company-"))


;;; Generated autoloads from company-mode/company-tng.el

(autoload 'company-tng-frontend "company-mode/company-tng" "\
When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

(fn COMMAND)")
(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.9.14" "Applies the default configuration to enable company-tng.")
(defvar company-tng-mode nil "\
Non-nil if Company-Tng mode is enabled.
See the `company-tng-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-tng-mode'.")
(custom-autoload 'company-tng-mode "company-mode/company-tng" nil)
(autoload 'company-tng-mode "company-mode/company-tng" "\
This minor mode enables `company-tng-frontend'.

This is a global minor mode.  If called interactively, toggle the
`Company-Tng mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='company-tng-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "company-mode/company-tng" '("company-tng-"))


;;; Generated autoloads from company-mode/company-yasnippet.el

(autoload 'company-yasnippet "company-mode/company-yasnippet" "\
`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook \\='js-mode-hook
            (lambda ()
              (set (make-local-variable \\='company-backends)
                   \\='((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push \\='(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)

(fn COMMAND &optional ARG &rest IGNORE)" t)
(register-definition-prefixes "company-mode/company-yasnippet" '("company-yasnippet-"))


;;; Generated autoloads from compat/compat.el

(register-definition-prefixes "compat/compat" '("compat-"))


;;; Generated autoloads from compat/compat-macs.el

(register-definition-prefixes "compat/compat-macs" '("compat-"))


;;; Generated autoloads from compat/compat-tests.el

(register-definition-prefixes "compat/compat-tests" '("compat-tests--" "should-equal"))


;;; Generated autoloads from consult/consult.el

(autoload 'consult-completion-in-region "consult/consult" "\
Use minibuffer completion as the UI for `completion-at-point'.

The function is called with 4 arguments: START END COLLECTION PREDICATE.
The arguments and expected return value are as specified for
`completion-in-region'.  Use as a value for `completion-in-region-function'.

The function can be configured via `consult-customize'.

    (consult-customize consult-completion-in-region
                       :completion-styles (basic)
                       :cycle-threshold 3)

These configuration options are supported:

    * :cycle-threshold - Cycling threshold (def: `completion-cycle-threshold')
    * :completion-styles - Use completion styles (def: `completion-styles')
    * :require-match - Require matches when completing (def: nil)
    * :prompt - The prompt string shown in the minibuffer

(fn START END COLLECTION &optional PREDICATE)")
(autoload 'consult-outline "consult/consult" "\
Jump to an outline heading, obtained by matching against `outline-regexp'.

This command supports narrowing to a heading level and candidate
preview.  The initial narrowing LEVEL can be given as prefix
argument.  The symbol at point is added to the future history.

(fn &optional LEVEL)" t)
(autoload 'consult-mark "consult/consult" "\
Jump to a marker in MARKERS list (defaults to buffer-local `mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-global-mark "consult/consult" "\
Jump to a marker in MARKERS list (defaults to `global-mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-line "consult/consult" "\
Search for a matching line.

Depending on the setting `consult-point-placement' the command
jumps to the beginning or the end of the first match on the line
or the line beginning.  The default candidate is the non-empty
line next to point.  This command obeys narrowing.  Optional
INITIAL input can be provided.  The search starting point is
changed if the START prefix argument is set.  The symbol at point
and the last `isearch-string' is added to the future history.

(fn &optional INITIAL START)" t)
(autoload 'consult-line-multi "consult/consult" "\
Search for a matching line in multiple buffers.

By default search across all project buffers.  If the prefix
argument QUERY is non-nil, all buffers are searched.  Optional
INITIAL input can be provided.  The symbol at point and the last
`isearch-string' is added to the future history.  In order to
search a subset of buffers, QUERY can be set to a plist according
to `consult--buffer-query'.

(fn QUERY &optional INITIAL)" t)
(autoload 'consult-keep-lines "consult/consult" "\
Select a subset of the lines in the current buffer with live preview.

The selected lines are kept and the other lines are deleted.  When called
interactively, the lines selected are those that match the minibuffer input.  In
order to match the inverse of the input, prefix the input with `! '.  When
called from Elisp, the filtering is performed by a FILTER function.  This
command obeys narrowing.

FILTER is the filter function.
INITIAL is the initial input.

(fn FILTER &optional INITIAL)" t)
(autoload 'consult-focus-lines "consult/consult" "\
Hide or show lines using overlays.

The selected lines are shown and the other lines hidden.  When called
interactively, the lines selected are those that match the minibuffer input.  In
order to match the inverse of the input, prefix the input with `! '.  With
optional prefix argument SHOW reveal the hidden lines.  Alternatively the
command can be restarted to reveal the lines.  When called from Elisp, the
filtering is performed by a FILTER function.  This command obeys narrowing.

FILTER is the filter function.
INITIAL is the initial input.

(fn FILTER &optional SHOW INITIAL)" t)
(autoload 'consult-goto-line "consult/consult" "\
Read line number and jump to the line with preview.

Enter either a line number to jump to the first column of the
given line or line:column in order to jump to a specific column.
Jump directly if a line number is given as prefix ARG.  The
command respects narrowing and the settings
`consult-goto-line-numbers' and `consult-line-numbers-widen'.

(fn &optional ARG)" t)
(autoload 'consult-recent-file "consult/consult" "\
Find recent file using `completing-read'." t)
(autoload 'consult-mode-command "consult/consult" "\
Run a command from any of the given MODES.

If no MODES are specified, use currently active major and minor modes.

(fn &rest MODES)" t)
(autoload 'consult-yank-from-kill-ring "consult/consult" "\
Select STRING from the kill ring and insert it.
With prefix ARG, put point at beginning, and mark at end, like `yank' does.

This command behaves like `yank-from-kill-ring' in Emacs 28, which also offers
a `completing-read' interface to the `kill-ring'.  Additionally the Consult
version supports preview of the selected string.

(fn STRING &optional ARG)" t)
(autoload 'consult-yank-pop "consult/consult" "\
If there is a recent yank act like `yank-pop'.

Otherwise select string from the kill ring and insert it.
See `yank-pop' for the meaning of ARG.

This command behaves like `yank-pop' in Emacs 28, which also offers a
`completing-read' interface to the `kill-ring'.  Additionally the Consult
version supports preview of the selected string.

(fn &optional ARG)" t)
(autoload 'consult-yank-replace "consult/consult" "\
Select STRING from the kill ring.

If there was no recent yank, insert the string.
Otherwise replace the just-yanked string with the selected string.

There exists no equivalent of this command in Emacs 28.

(fn STRING)" t)
(autoload 'consult-bookmark "consult/consult" "\
If bookmark NAME exists, open it, otherwise create a new bookmark with NAME.

The command supports preview of file bookmarks and narrowing.  See the
variable `consult-bookmark-narrow' for the narrowing configuration.

(fn NAME)" t)
(autoload 'consult-complex-command "consult/consult" "\
Select and evaluate command from the command history.

This command can act as a drop-in replacement for `repeat-complex-command'." t)
(autoload 'consult-history "consult/consult" "\
Insert string from HISTORY of current buffer.
In order to select from a specific HISTORY, pass the history
variable as argument.  INDEX is the name of the index variable to
update, if any.  BOL is the function which jumps to the beginning
of the prompt.  See also `cape-history' from the Cape package.

(fn &optional HISTORY INDEX BOL)" t)
(autoload 'consult-isearch-history "consult/consult" "\
Read a search string with completion from the Isearch history.

This replaces the current search string if Isearch is active, and
starts a new Isearch session otherwise." t)
(autoload 'consult-minor-mode-menu "consult/consult" "\
Enable or disable minor mode.

This is an alternative to `minor-mode-menu-from-indicator'." t)
(autoload 'consult-theme "consult/consult" "\
Disable current themes and enable THEME from `consult-themes'.

The command supports previewing the currently selected theme.

(fn THEME)" t)
(autoload 'consult-buffer "consult/consult" "\
Enhanced `switch-to-buffer' command with support for virtual buffers.

The command supports recent files, bookmarks, views and project files as
virtual buffers.  Buffers are previewed.  Narrowing to buffers (b), files (f),
bookmarks (m) and project files (p) is supported via the corresponding
keys.  In order to determine the project-specific files and buffers, the
`consult-project-function' is used.  The virtual buffer SOURCES
default to `consult-buffer-sources'.  See `consult--multi' for the
configuration of the virtual buffer sources.

(fn &optional SOURCES)" t)
(autoload 'consult-project-buffer "consult/consult" "\
Enhanced `project-switch-to-buffer' command with support for virtual buffers.
The command may prompt you for a project directory if it is invoked from
outside a project.  See `consult-buffer' for more details." t)
(autoload 'consult-buffer-other-window "consult/consult" "\
Variant of `consult-buffer' which opens in other window." t)
(autoload 'consult-buffer-other-frame "consult/consult" "\
Variant of `consult-buffer' which opens in other frame." t)
(autoload 'consult-grep "consult/consult" "\
Search with `grep' for files in DIR where the content matches a regexp.

The initial input is given by the INITIAL argument.  DIR can be
nil, a directory string or a list of file/directory paths.  If
`consult-grep' is called interactively with a prefix argument,
the user can specify the directories or files to search in.
Multiple directories must be separated by comma in the
minibuffer, since they are read via `completing-read-multiple'.
By default the project directory is used if
`consult-project-function' is defined and returns non-nil.
Otherwise the `default-directory' is searched.

The input string is split, the first part of the string (grep
input) is passed to the asynchronous grep process and the second
part of the string is passed to the completion-style filtering.

The input string is split at a punctuation character, which is
given as the first character of the input string.  The format is
similar to Perl-style regular expressions, e.g., /regexp/.
Furthermore command line options can be passed to grep, specified
behind --.  The overall prompt input has the form
`#async-input -- grep-opts#filter-string'.

Note that the grep input string is transformed from Emacs regular
expressions to Posix regular expressions.  Always enter Emacs
regular expressions at the prompt.  `consult-grep' behaves like
builtin Emacs search commands, e.g., Isearch, which take Emacs
regular expressions.  Furthermore the asynchronous input split
into words, each word must match separately and in any order.
See `consult--regexp-compiler' for the inner workings.  In order
to disable transformations of the grep input, adjust
`consult--regexp-compiler' accordingly.

Here we give a few example inputs:

#alpha beta         : Search for alpha and beta in any order.
#alpha.*beta        : Search for alpha before beta.
#\\(alpha\\|beta\\) : Search for alpha or beta (Note Emacs syntax!)
#word -- -C3        : Search for word, include 3 lines as context
#first#second       : Search for first, quick filter for second.

The symbol at point is added to the future history.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-git-grep "consult/consult" "\
Search with `git grep' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-ripgrep "consult/consult" "\
Search with `rg' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-find "consult/consult" "\
Search for files with `find' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-fd "consult/consult" "\
Search for files with `fd' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-locate "consult/consult" "\
Search with `locate' for files which match input given INITIAL input.

The input is treated literally such that locate can take advantage of
the locate database index.  Regular expressions would often force a slow
linear search through the entire database.  The locate process is started
asynchronously, similar to `consult-grep'.  See `consult-grep' for more
details regarding the asynchronous search.

(fn &optional INITIAL)" t)
(autoload 'consult-man "consult/consult" "\
Search for man page given INITIAL input.

The input string is not preprocessed and passed literally to the
underlying man commands.  The man process is started asynchronously,
similar to `consult-grep'.  See `consult-grep' for more details regarding
the asynchronous search.

(fn &optional INITIAL)" t)
(register-definition-prefixes "consult/consult" '("consult-"))


;;; Generated autoloads from consult/consult-compile.el

(autoload 'consult-compile-error "consult/consult-compile" "\
Jump to a compilation error in the current buffer.

This command collects entries from compilation buffers and grep
buffers related to the current buffer.  The command supports
preview of the currently selected error." t)
(register-definition-prefixes "consult/consult-compile" '("consult-compile--"))


;;; Generated autoloads from consult/consult-flymake.el

(autoload 'consult-flymake "consult/consult-flymake" "\
Jump to Flymake diagnostic.
When PROJECT is non-nil then prompt with diagnostics from all
buffers in the current project instead of just the current buffer.

(fn &optional PROJECT)" t)
(register-definition-prefixes "consult/consult-flymake" '("consult-flymake--"))


;;; Generated autoloads from consult/consult-imenu.el

(autoload 'consult-imenu "consult/consult-imenu" "\
Select item from flattened `imenu' using `completing-read' with preview.

The command supports preview and narrowing.  See the variable
`consult-imenu-config', which configures the narrowing.
The symbol at point is added to the future history.

See also `consult-imenu-multi'." t)
(autoload 'consult-imenu-multi "consult/consult-imenu" "\
Select item from the imenus of all buffers from the same project.

In order to determine the buffers belonging to the same project, the
`consult-project-function' is used.  Only the buffers with the
same major mode as the current buffer are used.  See also
`consult-imenu' for more details.  In order to search a subset of buffers,
QUERY can be set to a plist according to `consult--buffer-query'.

(fn &optional QUERY)" t)
(register-definition-prefixes "consult/consult-imenu" '("consult-imenu-"))


;;; Generated autoloads from consult/consult-info.el

(autoload 'consult-info "consult/consult-info" "\
Full text search through info MANUALS.

(fn &rest MANUALS)" t)
(register-definition-prefixes "consult/consult-info" '("consult-info--"))


;;; Generated autoloads from consult/consult-kmacro.el

(autoload 'consult-kmacro "consult/consult-kmacro" "\
Run a chosen keyboard macro.

With prefix ARG, run the macro that many times.
Macros containing mouse clicks are omitted.

(fn ARG)" t)
(register-definition-prefixes "consult/consult-kmacro" '("consult-kmacro--"))


;;; Generated autoloads from consult-lsp/consult-lsp.el

(autoload 'consult-lsp-diagnostics "consult-lsp/consult-lsp" "\
Query LSP-mode diagnostics.

When ARG is set through prefix, query all workspaces.

(fn ARG)" t)
(autoload 'consult-lsp-symbols "consult-lsp/consult-lsp" "\
Query workspace symbols. When ARG is set through prefix, query all workspaces.

(fn ARG)" t)
(autoload 'consult-lsp-file-symbols "consult-lsp/consult-lsp" "\
Search symbols defined in current file in a manner similar to `consult-line'.

If the prefix argument GROUP-RESULTS is specified, symbols are grouped by their
kind; otherwise they are returned in the order that they appear in the file.

(fn GROUP-RESULTS)" t)
(register-definition-prefixes "consult-lsp/consult-lsp" '("consult-lsp-"))


;;; Generated autoloads from consult/consult-org.el

(autoload 'consult-org-heading "consult/consult-org" "\
Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered.

(fn &optional MATCH SCOPE)" t)
(autoload 'consult-org-agenda "consult/consult-org" "\
Jump to an Org agenda heading.

By default, all agenda entries are offered.  MATCH is as in
`org-map-entries' and can used to refine this.

(fn &optional MATCH)" t)
(register-definition-prefixes "consult/consult-org" '("consult-org--"))


;;; Generated autoloads from consult/consult-register.el

(autoload 'consult-register-window "consult/consult-register" "\
Enhanced drop-in replacement for `register-preview'.

BUFFER is the window buffer.
SHOW-EMPTY must be t if the window should be shown for an empty register list.

(fn BUFFER &optional SHOW-EMPTY)")
(autoload 'consult-register-format "consult/consult-register" "\
Enhanced preview of register REG.
This function can be used as `register-preview-function'.
If COMPLETION is non-nil format the register for completion.

(fn REG &optional COMPLETION)")
(autoload 'consult-register "consult/consult-register" "\
Load register and either jump to location or insert the stored text.

This command is useful to search the register contents.  For quick access
to registers it is still recommended to use the register functions
`consult-register-load' and `consult-register-store' or the built-in
built-in register access functions.  The command supports narrowing, see
`consult-register--narrow'.  Marker positions are previewed.  See
`jump-to-register' and `insert-register' for the meaning of prefix ARG.

(fn &optional ARG)" t)
(autoload 'consult-register-load "consult/consult-register" "\
Do what I mean with a REG.

For a window configuration, restore it.  For a number or text, insert it.
For a location, jump to it.  See `jump-to-register' and `insert-register'
for the meaning of prefix ARG.

(fn REG &optional ARG)" t)
(autoload 'consult-register-store "consult/consult-register" "\
Store register dependent on current context, showing an action menu.

With an active region, store/append/prepend the contents, optionally
deleting the region when a prefix ARG is given.  With a numeric prefix
ARG, store or add the number.  Otherwise store point, frameset, window or
kmacro.

(fn ARG)" t)
(register-definition-prefixes "consult/consult-register" '("consult-register-"))


;;; Generated autoloads from consult/consult-xref.el

(autoload 'consult-xref "consult/consult-xref" "\
Show xrefs with preview in the minibuffer.

This function can be used for `xref-show-xrefs-function'.
See `xref-show-xrefs-function' for the description of the
FETCHER and ALIST arguments.

(fn FETCHER &optional ALIST)")
(register-definition-prefixes "consult/consult-xref" '("consult-xref--"))


;;; Generated autoloads from auctex/context.el

(defalias 'ConTeXt-mode #'context-mode)
(autoload 'context-mode "auctex/context" "\
Major mode in AUCTeX for editing ConTeXt files.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `ConTeXt-mode-hook'." t)
(register-definition-prefixes "auctex/context" '("ConTeXt-" "TeX-ConTeXt-sentinel" "context-guess-current-interface"))


;;; Generated autoloads from auctex/context-en.el

(autoload 'context-en-mode "auctex/context-en" "\
Major mode for editing files for ConTeXt using its english interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `ConTeXt-mode-hook'." t)
(register-definition-prefixes "auctex/context-en" '("ConTeXt-"))


;;; Generated autoloads from auctex/context-nl.el

(autoload 'context-nl-mode "auctex/context-nl" "\
Major mode for editing files for ConTeXt using its dutch interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `ConTeXt-mode-hook'." t)
(register-definition-prefixes "auctex/context-nl" '("ConTeXt-"))


;;; Generated autoloads from auctex/tests/context/context-test.el

(register-definition-prefixes "auctex/tests/context/context-test" '("ConTeXt-mode-common-initialization"))


;;; Generated autoloads from company-mode/test/core-tests.el

(register-definition-prefixes "company-mode/test/core-tests" '("ct-"))


;;; Generated autoloads from corfu/corfu.el

(autoload 'corfu-mode "corfu/corfu" "\
COmpletion in Region FUnction.

This is a minor mode.  If called interactively, toggle the `Corfu
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `corfu-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-corfu-mode 'globalized-minor-mode t)
(defvar global-corfu-mode nil "\
Non-nil if Global Corfu mode is enabled.
See the `global-corfu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-corfu-mode'.")
(custom-autoload 'global-corfu-mode "corfu/corfu" nil)
(autoload 'global-corfu-mode "corfu/corfu" "\
Toggle Corfu mode in all buffers.
With prefix ARG, enable Global Corfu mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Corfu mode is enabled in all buffers where `corfu--on' would do it.

See `corfu-mode' for more information on Corfu mode.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/corfu" '("corfu-" "global-corfu-modes"))


;;; Generated autoloads from corfu/extensions/corfu-echo.el

(defvar corfu-echo-mode nil "\
Non-nil if Corfu-Echo mode is enabled.
See the `corfu-echo-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-echo-mode "corfu/extensions/corfu-echo" nil)
(autoload 'corfu-echo-mode "corfu/extensions/corfu-echo" "\
Show candidate documentation in echo area.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Echo mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-echo-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/extensions/corfu-echo" '("corfu-echo-"))


;;; Generated autoloads from corfu/extensions/corfu-history.el

(defvar corfu-history-mode nil "\
Non-nil if Corfu-History mode is enabled.
See the `corfu-history-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-history-mode'.")
(custom-autoload 'corfu-history-mode "corfu/extensions/corfu-history" nil)
(autoload 'corfu-history-mode "corfu/extensions/corfu-history" "\
Update Corfu history and sort completions by history.

This is a global minor mode.  If called interactively, toggle the
`Corfu-History mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-history-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/extensions/corfu-history" '("corfu-history"))


;;; Generated autoloads from corfu/extensions/corfu-indexed.el

(defvar corfu-indexed-mode nil "\
Non-nil if Corfu-Indexed mode is enabled.
See the `corfu-indexed-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-indexed-mode "corfu/extensions/corfu-indexed" nil)
(autoload 'corfu-indexed-mode "corfu/extensions/corfu-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Indexed mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/extensions/corfu-indexed" '("corfu-indexed-"))


;;; Generated autoloads from corfu/extensions/corfu-info.el

(autoload 'corfu-info-documentation "corfu/extensions/corfu-info" "\
Show documentation of current candidate.
If called with a prefix ARG, the buffer is persistent.

(fn &optional ARG)" t)
(autoload 'corfu-info-location "corfu/extensions/corfu-info" "\
Show location of current candidate.
If called with a prefix ARG, the buffer is persistent.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/extensions/corfu-info" '("corfu-info--"))


;;; Generated autoloads from corfu/extensions/corfu-popupinfo.el

(defvar corfu-popupinfo-mode nil "\
Non-nil if Corfu-Popupinfo mode is enabled.
See the `corfu-popupinfo-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-popupinfo-mode "corfu/extensions/corfu-popupinfo" nil)
(autoload 'corfu-popupinfo-mode "corfu/extensions/corfu-popupinfo" "\
Corfu info popup minor mode.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Popupinfo mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-popupinfo-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu/extensions/corfu-popupinfo" '("corfu-popupinfo-"))


;;; Generated autoloads from corfu/extensions/corfu-quick.el

(autoload 'corfu-quick-jump "corfu/extensions/corfu-quick" "\
Jump to candidate using quick keys." t)
(autoload 'corfu-quick-insert "corfu/extensions/corfu-quick" "\
Insert candidate using quick keys." t)
(autoload 'corfu-quick-complete "corfu/extensions/corfu-quick" "\
Complete candidate using quick keys." t)
(register-definition-prefixes "corfu/extensions/corfu-quick" '("corfu-quick"))


;;; Generated autoloads from dash.el/dash.el

(autoload 'dash-fontify-mode "dash.el/dash" "\
Toggle fontification of Dash special variables.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

This is a minor mode.  If called interactively, toggle the
`Dash-Fontify mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-dash-fontify-mode 'globalized-minor-mode t)
(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")
(custom-autoload 'global-dash-fontify-mode "dash.el/dash" nil)
(autoload 'global-dash-fontify-mode "dash.el/dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t)
(autoload 'dash-register-info-lookup "dash.el/dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)
(register-definition-prefixes "dash.el/dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))


;;; Generated autoloads from dired-preview/dired-preview.el

(autoload 'dired-preview-mode "dired-preview/dired-preview" "\
Buffer-local mode to preview file at point in Dired.

This is a minor mode.  If called interactively, toggle the
`Dired-Preview mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dired-preview-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'dired-preview-global-mode 'globalized-minor-mode t)
(defvar dired-preview-global-mode nil "\
Non-nil if Dired-Preview-Global mode is enabled.
See the `dired-preview-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-preview-global-mode'.")
(custom-autoload 'dired-preview-global-mode "dired-preview/dired-preview" nil)
(autoload 'dired-preview-global-mode "dired-preview/dired-preview" "\
Toggle Dired-Preview mode in all buffers.
With prefix ARG, enable Dired-Preview-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dired-Preview mode is enabled in all buffers where `dired-preview--on'
would do it.

See `dired-preview-mode' for more information on Dired-Preview mode.

(fn &optional ARG)" t)
(register-definition-prefixes "dired-preview/dired-preview" '("dired-preview-"))


;;; Generated autoloads from diredfl/diredfl.el

(autoload 'diredfl-mode "diredfl/diredfl" "\
Enable additional font locking in `dired-mode'.

This is a minor mode.  If called interactively, toggle the
`Diredfl mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `diredfl-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'diredfl-global-mode 'globalized-minor-mode t)
(defvar diredfl-global-mode nil "\
Non-nil if Diredfl-Global mode is enabled.
See the `diredfl-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diredfl-global-mode'.")
(custom-autoload 'diredfl-global-mode "diredfl/diredfl" nil)
(autoload 'diredfl-global-mode "diredfl/diredfl" "\
Toggle Diredfl mode in all buffers.
With prefix ARG, enable Diredfl-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Diredfl mode is enabled in all buffers where `(lambda nil (when
(derived-mode-p 'dired-mode) (diredfl-mode)))' would do it.

See `diredfl-mode' for more information on Diredfl mode.

(fn &optional ARG)" t)
(register-definition-prefixes "diredfl/diredfl" '("diredfl-"))


;;; Generated autoloads from dirvish/dirvish.el

(defvar dirvish-override-dired-mode nil "\
Non-nil if Dirvish-Override-Dired mode is enabled.
See the `dirvish-override-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dirvish-override-dired-mode'.")
(custom-autoload 'dirvish-override-dired-mode "dirvish/dirvish" nil)
(autoload 'dirvish-override-dired-mode "dirvish/dirvish" "\
Let Dirvish take over Dired globally.

This is a global minor mode.  If called interactively, toggle the
`Dirvish-Override-Dired mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dirvish-override-dired-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'dirvish "dirvish/dirvish" "\
Start a full frame Dirvish session with optional PATH.
If called with \\[universal-arguments], prompt for PATH,
otherwise it defaults to `default-directory'.

(fn &optional PATH)" t)
(autoload 'dirvish-dwim "dirvish/dirvish" "\
Start a fullframe session only when `one-window-p'.
If called with \\[universal-arguments], prompt for PATH,
otherwise it defaults to `default-directory'.
If `one-window-p' returns nil, open PATH using regular Dired.

(fn &optional PATH)" t)
(register-definition-prefixes "dirvish/dirvish" '("dirvish-"))


;;; Generated autoloads from dirvish/extensions/dirvish-collapse.el

(register-definition-prefixes "dirvish/extensions/dirvish-collapse" '("dirvish-collapse--cache"))


;;; Generated autoloads from dirvish/extensions/dirvish-emerge.el

(autoload 'dirvish-emerge-menu "dirvish/extensions/dirvish-emerge" "\
Manage pinned files in Dirvish." t)
(autoload 'dirvish-emerge-mode "dirvish/extensions/dirvish-emerge" "\
Toggle grouping of files in Dirvish.

This is a minor mode.  If called interactively, toggle the
`Dirvish-Emerge mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `dirvish-emerge-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "dirvish/extensions/dirvish-emerge" '("dirvish-emerge-"))


;;; Generated autoloads from dirvish/dirvish-extras.el

 (autoload 'dirvish-setup-menu "dirvish-extras" nil t)
(autoload 'dirvish-copy-file-name "dirvish/dirvish-extras" "\
Copy filename of marked files.
If MULTI-LINE, make every name occupy a new line.

(fn &optional MULTI-LINE)" t)
(autoload 'dirvish-copy-file-path "dirvish/dirvish-extras" "\
Copy filepath of marked files.
If MULTI-LINE, make every path occupy a new line.

(fn &optional MULTI-LINE)" t)
(autoload 'dirvish-total-file-size "dirvish/dirvish-extras" "\
Echo total file size of FILESET.
FILESET defaults to `dired-get-marked-files'.

(fn &optional FILESET)" t)
(autoload 'dirvish-layout-toggle "dirvish/dirvish-extras" "\
Toggle layout of current Dirvish session.
A session with layout means it has a companion preview window and
possibly one or more parent windows." t)
(autoload 'dirvish-layout-switch "dirvish/dirvish-extras" "\
Switch Dirvish layout according to RECIPE.
If RECIPE is not provided, switch to the recipe next to the
current layout defined in `dirvish-layout-recipes'.

(fn &optional RECIPE)" t)
 (autoload 'dirvish-file-info-menu "dirvish-extras" nil t)
 (autoload 'dirvish-chxxx-menu "dirvish-extras" nil t)
 (autoload 'dirvish-mark-menu "dirvish-extras" nil t)
 (autoload 'dirvish-dired-cheatsheet "dirvish-extras" nil t)
(register-definition-prefixes "dirvish/dirvish-extras" '("dirvish-"))


;;; Generated autoloads from dirvish/extensions/dirvish-fd.el

 (autoload 'dirvish-fd-switches-menu "dirvish-fd" nil t)
(autoload 'dirvish-fd-jump "dirvish/extensions/dirvish-fd" "\
Browse directories using `fd' command.
This command takes a while to index all the directories the first
time you run it.  After the indexing, it fires up instantly.

If called with \\`C-u' or if CURRENT-DIR-P holds the value 4,
search for directories in the current directory.  Otherwise,
search for directories in `dirvish-fd-default-dir'.

If prefixed twice with \\`C-u' or if CURRENT-DIR-P holds the
value 16, let the user choose the root directory of their search.

(fn &optional CURRENT-DIR-P)" t)
(autoload 'dirvish-fd "dirvish/extensions/dirvish-fd" "\
Run `fd' on DIR and go into Dired mode on a buffer of the output.
The command run is essentially:

  fd --color=never -0 `dirvish-fd-switches' PATTERN
     --exec-batch `dirvish-fd-ls-program' `dired-listing-switches' --directory.

(fn DIR PATTERN)" t)
(autoload 'dirvish-fd-ask "dirvish/extensions/dirvish-fd" "\
The same as `dirvish-fd' but ask initial `pattern' via prompt. 

(fn DIR PATTERN)" t)
(register-definition-prefixes "dirvish/extensions/dirvish-fd" '("dirvish-fd-"))


;;; Generated autoloads from dirvish/extensions/dirvish-history.el

(autoload 'dirvish-history-jump "dirvish/extensions/dirvish-history" "\
Open a target directory from `dirvish--history'." t)
(autoload 'dirvish-history-last "dirvish/extensions/dirvish-history" "\
Switch to the most recently visited dirvish buffer." t)
(autoload 'dirvish-history-go-forward "dirvish/extensions/dirvish-history" "\
Navigate to next ARG directory in history.
ARG defaults to 1.

(fn ARG)" t)
(autoload 'dirvish-history-go-backward "dirvish/extensions/dirvish-history" "\
Navigate to previous ARG directory in history.
ARG defaults to 1.

(fn ARG)" t)
 (autoload 'dirvish-history-menu "dirvish-history" nil t)


;;; Generated autoloads from dirvish/extensions/dirvish-icons.el

(register-definition-prefixes "dirvish/extensions/dirvish-icons" '("dirvish-"))


;;; Generated autoloads from dirvish/extensions/dirvish-ls.el

 (autoload 'dirvish-quicksort "dirvish-ls" nil t)
 (autoload 'dirvish-ls-switches-menu "dirvish-ls" nil t)
(register-definition-prefixes "dirvish/extensions/dirvish-ls" '("dirvish-ls--"))


;;; Generated autoloads from dirvish/extensions/dirvish-narrow.el

(autoload 'dirvish-narrow "dirvish/extensions/dirvish-narrow" "\
Narrow a Dirvish buffer to the files matching a regex." t)
(register-definition-prefixes "dirvish/extensions/dirvish-narrow" '("dirvish-narrow-"))


;;; Generated autoloads from dirvish/extensions/dirvish-peek.el

(defvar dirvish-peek-mode nil "\
Non-nil if Dirvish-Peek mode is enabled.
See the `dirvish-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dirvish-peek-mode'.")
(custom-autoload 'dirvish-peek-mode "dirvish/extensions/dirvish-peek" nil)
(autoload 'dirvish-peek-mode "dirvish/extensions/dirvish-peek" "\
Show file preview when narrowing candidates using minibuffer.

This is a global minor mode.  If called interactively, toggle the
`Dirvish-Peek mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dirvish-peek-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "dirvish/extensions/dirvish-peek" '("dirvish-peek-"))


;;; Generated autoloads from dirvish/extensions/dirvish-quick-access.el

 (autoload 'dirvish-quick-access "dirvish-quick-access" nil t)
(register-definition-prefixes "dirvish/extensions/dirvish-quick-access" '("dirvish-quick-access-function"))


;;; Generated autoloads from dirvish/extensions/dirvish-side.el

(defvar dirvish-side-follow-mode nil "\
Non-nil if Dirvish-Side-Follow mode is enabled.
See the `dirvish-side-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dirvish-side-follow-mode'.")
(custom-autoload 'dirvish-side-follow-mode "dirvish/extensions/dirvish-side" nil)
(autoload 'dirvish-side-follow-mode "dirvish/extensions/dirvish-side" "\
Toggle `dirvish-side-follow-mode'.

When enabled the visible side session will select the current
buffer's filename.  It will also visits the latest `project-root'
after switching to a new project.

This is a global minor mode.  If called interactively, toggle the
`Dirvish-Side-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dirvish-side-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'dirvish-side "dirvish/extensions/dirvish-side" "\
Toggle a Dirvish session at the side window.

- If the current window is a side session window, hide it.
- If a side session is visible, select it.
- If a side session exists but is not visible, show it.
- If there is no side session exists,create a new one with PATH.

If called with \\[universal-arguments], prompt for PATH,
otherwise it defaults to `project-current'.

(fn &optional PATH)" t)
(register-definition-prefixes "dirvish/extensions/dirvish-side" '("dirvish-side-"))


;;; Generated autoloads from dirvish/extensions/dirvish-subtree.el

(autoload 'dirvish-subtree-up "dirvish/extensions/dirvish-subtree" "\
Jump to beginning of current subtree." t)
(autoload 'dirvish-subtree-remove "dirvish/extensions/dirvish-subtree" "\
Remove subtree at point." t)
(autoload 'dirvish-subtree-clear "dirvish/extensions/dirvish-subtree" "\
Clear all subtrees in the buffer." t)
(autoload 'dirvish-subtree-toggle "dirvish/extensions/dirvish-subtree" "\
Insert subtree at point or remove it if it was not present." t)
 (autoload 'dirvish-subtree-menu "dirvish-subtree" nil t)
(register-definition-prefixes "dirvish/extensions/dirvish-subtree" '("dirvish-"))


;;; Generated autoloads from dirvish/extensions/dirvish-vc.el

 (autoload 'dirvish-vc-menu "dirvish-vc" nil t)
(register-definition-prefixes "dirvish/extensions/dirvish-vc" '("dirvish-vc-"))


;;; Generated autoloads from dirvish/dirvish-widgets.el

(register-definition-prefixes "dirvish/dirvish-widgets" '("dirvish-"))


;;; Generated autoloads from dirvish/extensions/dirvish-yank.el

 (autoload 'dirvish-yank-menu "dirvish-yank" nil t)
(autoload 'dirvish-yank "dirvish/extensions/dirvish-yank" "\
Paste marked files to DEST.
Prompt for DEST when prefixed with \\[universal-argument], it
defaults to `dired-current-directory.'

(fn &optional DEST)" t)
(autoload 'dirvish-move "dirvish/extensions/dirvish-yank" "\
Move marked files to DEST.
Prompt for DEST when prefixed with \\[universal-argument], it
defaults to `dired-current-directory'.

(fn &optional DEST)" t)
(autoload 'dirvish-symlink "dirvish/extensions/dirvish-yank" "\
Symlink marked files to DEST.
Prompt for DEST when prefixed with \\[universal-argument], it
defaults to `dired-current-directory'.

(fn &optional DEST)" t)
(autoload 'dirvish-relative-symlink "dirvish/extensions/dirvish-yank" "\
Similar to `dirvish-symlink', but link files relatively.
Prompt for DEST when prefixed with \\[universal-argument], it
defaults to `dired-current-directory'.

(fn &optional DEST)" t)
(autoload 'dirvish-hardlink "dirvish/extensions/dirvish-yank" "\
Hardlink marked files to DEST.
Prompt for DEST when prefixed with \\[universal-argument], it
defaults to `dired-current-directory'.

(fn &optional DEST)" t)
(autoload 'dirvish-rsync "dirvish/extensions/dirvish-yank" "\
Rsync marked files to DEST, prompt for DEST if not called with.
If either the sources or the DEST is located in a remote host,
the `dirvish-yank-rsync-program' and `dirvish-yank-rsync-args'
are used to transfer the files.

This command requires proper ssh authentication setup to work
correctly for file transfer involving remote hosts, because rsync
command is always run locally, the password prompts may lead to
unexpected errors.

(fn DEST)" t)
 (autoload 'dirvish-rsync-transient "dirvish-yank" nil t)
(autoload 'dirvish-yank--rsync-apply-switches-and-copy "dirvish/extensions/dirvish-yank" "\
Execute rsync command generated by transient ARGS.

(fn ARGS)" t)
(register-definition-prefixes "dirvish/extensions/dirvish-yank" '("dirvish-"))


;;; Generated autoloads from themes/themes/doom-1337-theme.el

(register-definition-prefixes "themes/themes/doom-1337-theme" '("doom-1337"))


;;; Generated autoloads from themes/themes/doom-Iosvkem-theme.el

(register-definition-prefixes "themes/themes/doom-Iosvkem-theme" '("doom-Iosvkem"))


;;; Generated autoloads from themes/themes/doom-acario-dark-theme.el

(register-definition-prefixes "themes/themes/doom-acario-dark-theme" '("doom-acario-dark"))


;;; Generated autoloads from themes/themes/doom-acario-light-theme.el

(register-definition-prefixes "themes/themes/doom-acario-light-theme" '("doom-acario-light"))


;;; Generated autoloads from themes/themes/doom-ayu-dark-theme.el

(register-definition-prefixes "themes/themes/doom-ayu-dark-theme" '("doom-ayu-dark"))


;;; Generated autoloads from themes/themes/doom-ayu-light-theme.el

(register-definition-prefixes "themes/themes/doom-ayu-light-theme" '("doom-ayu-light"))


;;; Generated autoloads from themes/themes/doom-ayu-mirage-theme.el

(register-definition-prefixes "themes/themes/doom-ayu-mirage-theme" '("doom-ayu-mirage"))


;;; Generated autoloads from themes/themes/doom-badger-theme.el

(register-definition-prefixes "themes/themes/doom-badger-theme" '("doom-badger"))


;;; Generated autoloads from themes/themes/doom-challenger-deep-theme.el

(register-definition-prefixes "themes/themes/doom-challenger-deep-theme" '("doom-challenger-deep"))


;;; Generated autoloads from themes/themes/doom-city-lights-theme.el

(register-definition-prefixes "themes/themes/doom-city-lights-theme" '("doom-city-lights"))


;;; Generated autoloads from themes/themes/doom-dark+-theme.el

(register-definition-prefixes "themes/themes/doom-dark+-theme" '("doom-dark+"))


;;; Generated autoloads from themes/themes/doom-dracula-theme.el

(register-definition-prefixes "themes/themes/doom-dracula-theme" '("doom-dracula"))


;;; Generated autoloads from themes/themes/doom-earl-grey-theme.el

(register-definition-prefixes "themes/themes/doom-earl-grey-theme" '("doom-earl-grey"))


;;; Generated autoloads from themes/themes/doom-ephemeral-theme.el

(register-definition-prefixes "themes/themes/doom-ephemeral-theme" '(":group" "doom-ephemeral"))


;;; Generated autoloads from themes/themes/doom-fairy-floss-theme.el

(register-definition-prefixes "themes/themes/doom-fairy-floss-theme" '("doom-fairy-floss"))


;;; Generated autoloads from themes/themes/doom-feather-dark-theme.el

(register-definition-prefixes "themes/themes/doom-feather-dark-theme" '("doom-feather-"))


;;; Generated autoloads from themes/themes/doom-feather-light-theme.el

(register-definition-prefixes "themes/themes/doom-feather-light-theme" '("doom-feather-light"))


;;; Generated autoloads from themes/themes/doom-flatwhite-theme.el

(register-definition-prefixes "themes/themes/doom-flatwhite-theme" '("doom-f"))


;;; Generated autoloads from themes/themes/doom-gruvbox-light-theme.el

(register-definition-prefixes "themes/themes/doom-gruvbox-light-theme" '("doom-gruvbox-light"))


;;; Generated autoloads from themes/themes/doom-gruvbox-theme.el

(register-definition-prefixes "themes/themes/doom-gruvbox-theme" '("doom-gruvbox"))


;;; Generated autoloads from themes/themes/doom-henna-theme.el

(register-definition-prefixes "themes/themes/doom-henna-theme" '("doom-henna"))


;;; Generated autoloads from themes/themes/doom-homage-black-theme.el

(register-definition-prefixes "themes/themes/doom-homage-black-theme" '("doom-homage-black"))


;;; Generated autoloads from themes/themes/doom-homage-white-theme.el

(register-definition-prefixes "themes/themes/doom-homage-white-theme" '("doom-homage-white"))


;;; Generated autoloads from themes/themes/doom-horizon-theme.el

(register-definition-prefixes "themes/themes/doom-horizon-theme" '("doom-horizon"))


;;; Generated autoloads from themes/themes/doom-ir-black-theme.el

(register-definition-prefixes "themes/themes/doom-ir-black-theme" '("doom-ir-black"))


;;; Generated autoloads from themes/themes/doom-lantern-theme.el

(register-definition-prefixes "themes/themes/doom-lantern-theme" '("doom-lantern"))


;;; Generated autoloads from themes/themes/doom-laserwave-theme.el

(register-definition-prefixes "themes/themes/doom-laserwave-theme" '("doom-laserwave"))


;;; Generated autoloads from themes/themes/doom-manegarm-theme.el

(register-definition-prefixes "themes/themes/doom-manegarm-theme" '("doom-manegarm"))


;;; Generated autoloads from themes/themes/doom-material-dark-theme.el

(register-definition-prefixes "themes/themes/doom-material-dark-theme" '("doom-material-"))


;;; Generated autoloads from themes/themes/doom-material-theme.el

(register-definition-prefixes "themes/themes/doom-material-theme" '("doom-material"))


;;; Generated autoloads from themes/themes/doom-meltbus-theme.el

(register-definition-prefixes "themes/themes/doom-meltbus-theme" '("doom-meltbus"))


;;; Generated autoloads from themes/themes/doom-miramare-theme.el

(register-definition-prefixes "themes/themes/doom-miramare-theme" '("doom-miramare"))


;;; Generated autoloads from doom-modeline/doom-modeline.el

(autoload 'doom-modeline-set-main-modeline "doom-modeline/doom-modeline" "\
Set main mode-line.
If DEFAULT is non-nil, set the default mode-line for all buffers.

(fn &optional DEFAULT)")
(defvar doom-modeline-mode nil "\
Non-nil if Doom-Modeline mode is enabled.
See the `doom-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-modeline-mode'.")
(custom-autoload 'doom-modeline-mode "doom-modeline/doom-modeline" nil)
(autoload 'doom-modeline-mode "doom-modeline/doom-modeline" "\
Toggle `doom-modeline' on or off.

This is a global minor mode.  If called interactively, toggle the
`Doom-Modeline mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='doom-modeline-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "doom-modeline/doom-modeline" '("doom-modeline-"))


;;; Generated autoloads from doom-modeline/doom-modeline-core.el

(register-definition-prefixes "doom-modeline/doom-modeline-core" '("doom-modeline"))


;;; Generated autoloads from doom-modeline/doom-modeline-env.el

 (autoload 'doom-modeline-env-setup-python "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-perl "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-go "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-rust "doom-modeline-env")
(register-definition-prefixes "doom-modeline/doom-modeline-env" '("doom-modeline-"))


;;; Generated autoloads from doom-modeline/doom-modeline-segments.el

(register-definition-prefixes "doom-modeline/doom-modeline-segments" '("doom-modeline-"))


;;; Generated autoloads from themes/themes/doom-molokai-theme.el

(register-definition-prefixes "themes/themes/doom-molokai-theme" '("doom-molokai"))


;;; Generated autoloads from themes/themes/doom-monokai-classic-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-classic-theme" '("doom-monokai-classic"))


;;; Generated autoloads from themes/themes/doom-monokai-machine-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-machine-theme" '("doom-monokai-machine"))


;;; Generated autoloads from themes/themes/doom-monokai-octagon-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-octagon-theme" '("doom-monokai-octagon"))


;;; Generated autoloads from themes/themes/doom-monokai-pro-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-pro-theme" '("doom-monokai-pro"))


;;; Generated autoloads from themes/themes/doom-monokai-ristretto-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-ristretto-theme" '("doom-monokai-ristretto"))


;;; Generated autoloads from themes/themes/doom-monokai-spectrum-theme.el

(register-definition-prefixes "themes/themes/doom-monokai-spectrum-theme" '("doom-monokai-spectrum"))


;;; Generated autoloads from themes/themes/doom-moonlight-theme.el

(register-definition-prefixes "themes/themes/doom-moonlight-theme" '("doom-moonlight"))


;;; Generated autoloads from themes/themes/doom-nord-aurora-theme.el

(register-definition-prefixes "themes/themes/doom-nord-aurora-theme" '(":group" "doom-nord-aurora"))


;;; Generated autoloads from themes/themes/doom-nord-light-theme.el

(register-definition-prefixes "themes/themes/doom-nord-light-theme" '(":group" "doom-nord-light"))


;;; Generated autoloads from themes/themes/doom-nord-theme.el

(register-definition-prefixes "themes/themes/doom-nord-theme" '(":group" "doom-nord"))


;;; Generated autoloads from themes/themes/doom-nova-theme.el

(register-definition-prefixes "themes/themes/doom-nova-theme" '("doom-nova"))


;;; Generated autoloads from themes/themes/doom-oceanic-next-theme.el

(register-definition-prefixes "themes/themes/doom-oceanic-next-theme" '("doom-oceanic-next"))


;;; Generated autoloads from themes/themes/doom-old-hope-theme.el

(register-definition-prefixes "themes/themes/doom-old-hope-theme" '("doom-old-hope"))


;;; Generated autoloads from themes/themes/doom-one-light-theme.el

(register-definition-prefixes "themes/themes/doom-one-light-theme" '("doom-one-light"))


;;; Generated autoloads from themes/themes/doom-one-theme.el

(register-definition-prefixes "themes/themes/doom-one-theme" '("doom-one"))


;;; Generated autoloads from themes/themes/doom-opera-light-theme.el

(register-definition-prefixes "themes/themes/doom-opera-light-theme" '(":group" "doom-opera-light"))


;;; Generated autoloads from themes/themes/doom-opera-theme.el

(register-definition-prefixes "themes/themes/doom-opera-theme" '(":group" "doom-opera"))


;;; Generated autoloads from themes/themes/doom-outrun-electric-theme.el

(register-definition-prefixes "themes/themes/doom-outrun-electric-theme" '("doom-outrun-electric"))


;;; Generated autoloads from themes/themes/doom-palenight-theme.el

(register-definition-prefixes "themes/themes/doom-palenight-theme" '("doom-palenight"))


;;; Generated autoloads from themes/themes/doom-peacock-theme.el

(register-definition-prefixes "themes/themes/doom-peacock-theme" '("doom-peacock"))


;;; Generated autoloads from themes/themes/doom-pine-theme.el

(register-definition-prefixes "themes/themes/doom-pine-theme" '("doom-pine"))


;;; Generated autoloads from themes/themes/doom-plain-dark-theme.el

(register-definition-prefixes "themes/themes/doom-plain-dark-theme" '("doom-plain-"))


;;; Generated autoloads from themes/themes/doom-plain-theme.el

(register-definition-prefixes "themes/themes/doom-plain-theme" '("doom-plain"))


;;; Generated autoloads from themes/themes/doom-rouge-theme.el

(register-definition-prefixes "themes/themes/doom-rouge-theme" '("doom-rouge"))


;;; Generated autoloads from themes/themes/doom-shades-of-purple-theme.el

(register-definition-prefixes "themes/themes/doom-shades-of-purple-theme" '("doom-shades-of-purple"))


;;; Generated autoloads from themes/themes/doom-snazzy-theme.el

(register-definition-prefixes "themes/themes/doom-snazzy-theme" '("doom-snazzy"))


;;; Generated autoloads from themes/themes/doom-solarized-dark-high-contrast-theme.el

(register-definition-prefixes "themes/themes/doom-solarized-dark-high-contrast-theme" '("doom-solarized-dark-high-contrast"))


;;; Generated autoloads from themes/themes/doom-solarized-dark-theme.el

(register-definition-prefixes "themes/themes/doom-solarized-dark-theme" '("doom-solarized-dark"))


;;; Generated autoloads from themes/themes/doom-solarized-light-theme.el

(register-definition-prefixes "themes/themes/doom-solarized-light-theme" '("doom-solarized-light"))


;;; Generated autoloads from themes/themes/doom-sourcerer-theme.el

(register-definition-prefixes "themes/themes/doom-sourcerer-theme" '("doom-sourcerer"))


;;; Generated autoloads from themes/themes/doom-spacegrey-theme.el

(register-definition-prefixes "themes/themes/doom-spacegrey-theme" '("doom-spacegrey"))


;;; Generated autoloads from themes/doom-themes.el

(autoload 'doom-name-to-rgb "themes/doom-themes" "\
Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")
for FRAME (defaults to the current frame).

(fn COLOR)")
(autoload 'doom-blend "themes/doom-themes" "\
Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a
float between 0 and 1)

(fn COLOR1 COLOR2 ALPHA)")
(autoload 'doom-darken "themes/doom-themes" "\
Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between
0 and 1).

(fn COLOR ALPHA)")
(autoload 'doom-lighten "themes/doom-themes" "\
Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float
between 0 and 1).

(fn COLOR ALPHA)")
(autoload 'doom-color "themes/doom-themes" "\
Retrieve a specific color named NAME (a symbol) from the current theme.

(fn NAME &optional TYPE)")
(autoload 'doom-ref "themes/doom-themes" "\
TODO

(fn FACE PROP &optional CLASS)")
(autoload 'doom-themes-set-faces "themes/doom-themes" "\
Customize THEME (a symbol) with FACES.

If THEME is nil, it applies to all themes you load. FACES is a list of Doom
theme face specs. These is a simplified spec. For example:

  (doom-themes-set-faces 'user
    '(default :background red :foreground blue)
    '(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
    '(doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
    '(doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
    '(doom-modeline-buffer-project-root :foreground green :weight 'bold))

(fn THEME &rest FACES)")
(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)
(when (and (boundp 'custom-theme-load-path) load-file-name) (let* ((base (file-name-directory load-file-name)) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))
(register-definition-prefixes "themes/doom-themes" '("def-doom-theme" "doom-"))


;;; Generated autoloads from themes/doom-themes-base.el

(register-definition-prefixes "themes/doom-themes-base" '("doom-themes-base-"))


;;; Generated autoloads from themes/extensions/doom-themes-ext-neotree.el

(autoload 'doom-themes-neotree-config "themes/extensions/doom-themes-ext-neotree" "\
Install doom-themes' neotree configuration.

Includes an Atom-esque icon theme and highlighting based on filetype.")
(register-definition-prefixes "themes/extensions/doom-themes-ext-neotree" '("doom-"))


;;; Generated autoloads from themes/extensions/doom-themes-ext-org.el

(autoload 'doom-themes-org-config "themes/extensions/doom-themes-ext-org" "\
Load `doom-themes-ext-org'.")
(register-definition-prefixes "themes/extensions/doom-themes-ext-org" '("doom-themes-"))


;;; Generated autoloads from themes/extensions/doom-themes-ext-treemacs.el

(autoload 'doom-themes-treemacs-config "themes/extensions/doom-themes-ext-treemacs" "\
Install doom-themes' treemacs configuration.

Includes an Atom-esque icon theme and highlighting based on filetype.")
(register-definition-prefixes "themes/extensions/doom-themes-ext-treemacs" '("doom-themes-"))


;;; Generated autoloads from themes/extensions/doom-themes-ext-visual-bell.el

(autoload 'doom-themes-visual-bell-fn "themes/extensions/doom-themes-ext-visual-bell" "\
Blink the mode-line red briefly. Set `ring-bell-function' to this to use it.")
(autoload 'doom-themes-visual-bell-config "themes/extensions/doom-themes-ext-visual-bell" "\
Enable flashing the mode-line on error.")


;;; Generated autoloads from themes/test/doom-themes-test.el

(register-definition-prefixes "themes/test/doom-themes-test" '("doom-themes-dir"))


;;; Generated autoloads from themes/themes/doom-tokyo-night-theme.el

(register-definition-prefixes "themes/themes/doom-tokyo-night-theme" '("doom-tokyo-night"))


;;; Generated autoloads from themes/themes/doom-tomorrow-day-theme.el

(register-definition-prefixes "themes/themes/doom-tomorrow-day-theme" '("doom-tomorrow-day"))


;;; Generated autoloads from themes/themes/doom-tomorrow-night-theme.el

(register-definition-prefixes "themes/themes/doom-tomorrow-night-theme" '("doom-tomorrow-night"))


;;; Generated autoloads from themes/themes/doom-vibrant-theme.el

(register-definition-prefixes "themes/themes/doom-vibrant-theme" '("doom-vibrant"))


;;; Generated autoloads from themes/themes/doom-wilmersdorf-theme.el

(register-definition-prefixes "themes/themes/doom-wilmersdorf-theme" '("doom-wilmersdorf"))


;;; Generated autoloads from themes/themes/doom-xcode-theme.el

(register-definition-prefixes "themes/themes/doom-xcode-theme" '("doom-xcode"))


;;; Generated autoloads from themes/themes/doom-zenburn-theme.el

(register-definition-prefixes "themes/themes/doom-zenburn-theme" '("doom-zenburn"))


;;; Generated autoloads from emacs-application-framework/eaf.el

(autoload 'eaf-open-bookmark "emacs-application-framework/eaf" "\
Command to open or create EAF bookmarks with completion." t)
(autoload 'eaf-get-file-name-extension "emacs-application-framework/eaf" "\
A wrapper around `file-name-extension' that downcases the extension of the FILE.

(fn FILE)")
(autoload 'eaf-open "emacs-application-framework/eaf" "\
Open an EAF application with URL, optional APP-NAME and ARGS.

Interactively, a prefix arg replaces ALWAYS-NEW, which means to open a new
 buffer regardless of whether a buffer with existing URL and APP-NAME exists.

By default, `eaf-open' will switch to buffer if corresponding url exists.
`eaf-open' always open new buffer if option OPEN-ALWAYS is non-nil.

When called interactively, URL accepts a file that can be opened by EAF.

(fn URL &optional APP-NAME ARGS ALWAYS-NEW)" t)
(autoload 'eaf-install-and-update "emacs-application-framework/eaf" "\
Interactively run `install-eaf.py' to install/update EAF apps.

For a full `install-eaf.py' experience, refer to `--help' and run in a terminal.

(fn &rest APPS)" t)
(register-definition-prefixes "emacs-application-framework/eaf" '("eaf-" "get-emacs-face-foregrounds"))


;;; Generated autoloads from emacs-application-framework/extension/eaf-all-the-icons.el

(register-definition-prefixes "emacs-application-framework/extension/eaf-all-the-icons" '("eaf-all-the-icons-"))


;;; Generated autoloads from emacs-application-framework/app/browser/eaf-browser.el

(autoload 'eaf-open-browser-in-background "emacs-application-framework/app/browser/eaf-browser" "\
Open browser with the specified URL and optional ARGS in background.

(fn URL &optional ARGS)")
(autoload 'eaf-open-browser-with-history "emacs-application-framework/app/browser/eaf-browser" "\
A wrapper around `eaf-open-browser' that provides browser history candidates.

If URL is an invalid URL, it will use `eaf-browser-default-search-engine' to search URL as string literal.

This function works best if paired with a fuzzy search package." t)
(autoload 'eaf-search-it "emacs-application-framework/app/browser/eaf-browser" "\
Use SEARCH-ENGINE search SEARCH-STRING.

If called interactively, SEARCH-STRING is defaulted to symbol or region string.
The user can enter a customized SEARCH-STRING. SEARCH-ENGINE is defaulted
to `eaf-browser-default-search-engine' with a prefix arg, the user is able to
choose a search engine defined in `eaf-browser-search-engines'

(fn &optional SEARCH-STRING SEARCH-ENGINE)" t)
(autoload 'eaf-open-browser "emacs-application-framework/app/browser/eaf-browser" "\
Open EAF browser application given a URL and ARGS.

(fn URL &optional ARGS)" t)
(autoload 'eaf-open-browser-other-window "emacs-application-framework/app/browser/eaf-browser" "\
Open EAF browser application given a URL and ARGS in other window.

(fn URL &optional ARGS)" t)
(register-definition-prefixes "emacs-application-framework/app/browser/eaf-browser" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/core/eaf-epc.el

(register-definition-prefixes "emacs-application-framework/core/eaf-epc" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/extension/eaf-evil.el

(autoload 'eaf-enable-evil-intergration "emacs-application-framework/extension/eaf-evil" "\
EAF evil intergration." t)
(register-definition-prefixes "emacs-application-framework/extension/eaf-evil" '("eaf-evil-leader-key"))


;;; Generated autoloads from emacs-application-framework/extension/eaf-interleave.el

(autoload 'eaf-interleave-mode "emacs-application-framework/extension/eaf-interleave" "\
Interleaving your text books since 2015.

In the past, textbooks were sometimes published as 'interleaved' editions.
That meant, each page was followed by a blank page and the ambitious student/
scholar had the ability to take their notes directly in their copy of the
textbook. Newton and Kant were prominent representatives of this technique.

Nowadays textbooks (or lecture material) come in PDF format. Although almost
every PDF Reader has the ability to add some notes to the PDF itself, it is
not as powerful as it could be.

This is what this minor mode tries to accomplish. It presents your PDF side by
pppside to an [[http://orgmode.org][Org Mode]] buffer with your notes, narrowing
down to just those passages that are relevant to the particular page in the
document viewer.

The split direction is determined by the customizable variable
`eaf-interleave-split-direction'. When `eaf-interleave-mode' is invoked
with a prefix argument the inverse split direction is used
e.g. if `eaf-interleave-split-direction' is 'vertical the buffer is
split horizontally.

This is a minor mode.  If called interactively, toggle the
`Eaf-Interleave mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `eaf-interleave-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'eaf-interleave-app-mode "emacs-application-framework/extension/eaf-interleave" "\
Interleave view for the EAF app.

This is a minor mode.  If called interactively, toggle the
`Eaf-Interleave-App mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `eaf-interleave-app-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'eaf-interleave--open-notes-file-for-pdf "emacs-application-framework/extension/eaf-interleave" "\
Open the notes org file for the current pdf file if it exists.
Else create it. It is assumed that the notes org file will have
the exact same base name as the pdf file (just that the notes
file will have a .org extension instead of .pdf).")
(register-definition-prefixes "emacs-application-framework/extension/eaf-interleave" '("eaf-interleave-"))


;;; Generated autoloads from emacs-application-framework/app/jupyter/eaf-jupyter.el

(autoload 'eaf-jupyter-read-data "emacs-application-framework/app/jupyter/eaf-jupyter")
(register-definition-prefixes "emacs-application-framework/app/jupyter/eaf-jupyter" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/extension/eaf-mail.el

(autoload 'eaf-open-mail-as-html "emacs-application-framework/extension/eaf-mail" "\
Open the html mail in EAF Browser.

The value of `mail-user-agent' must be a KEY of the alist `eaf-mua-get-html'.

In that way the corresponding function will be called to retrieve the HTML
 part of the current mail." t)
(register-definition-prefixes "emacs-application-framework/extension/eaf-mail" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/app/markdown-previewer/eaf-markdown-previewer.el

(register-definition-prefixes "emacs-application-framework/app/markdown-previewer/eaf-markdown-previewer" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/app/markmap/eaf-markmap.el

(autoload 'eaf-open-markmap "emacs-application-framework/app/markmap/eaf-markmap" "\
Open EAF vue demo" t)
(register-definition-prefixes "emacs-application-framework/app/markmap/eaf-markmap" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/app/mindmap/eaf-mindmap.el

(autoload 'eaf-open-mindmap "emacs-application-framework/app/mindmap/eaf-mindmap" "\
Open a given Mindmap FILE.

(fn FILE)" t)
(register-definition-prefixes "emacs-application-framework/app/mindmap/eaf-mindmap" '("eaf-" "json-read-r" "org-json-"))


;;; Generated autoloads from emacs-application-framework/extension/eaf-org.el

(register-definition-prefixes "emacs-application-framework/extension/eaf-org" '("eaf-org-"))


;;; Generated autoloads from emacs-application-framework/app/org-previewer/eaf-org-previewer.el

(register-definition-prefixes "emacs-application-framework/app/org-previewer/eaf-org-previewer" '("eaf-"))


;;; Generated autoloads from emacs-application-framework/app/pdf-viewer/eaf-pdf-viewer.el

(autoload 'eaf-open-office "emacs-application-framework/app/pdf-viewer/eaf-pdf-viewer" "\
View Microsoft Office FILE as READ-ONLY PDF.

(fn FILE)" t)
(register-definition-prefixes "emacs-application-framework/app/pdf-viewer/eaf-pdf-viewer" '("eaf-"))


;;; Generated autoloads from elisp-refs/elisp-refs.el

(autoload 'elisp-refs-function "elisp-refs/elisp-refs" "\
Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-macro "elisp-refs/elisp-refs" "\
Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-special "elisp-refs/elisp-refs" "\
Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-variable "elisp-refs/elisp-refs" "\
Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-symbol "elisp-refs/elisp-refs" "\
Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(register-definition-prefixes "elisp-refs/elisp-refs" '("elisp-"))


;;; Generated autoloads from elisp-refs/elisp-refs-bench.el

(register-definition-prefixes "elisp-refs/elisp-refs-bench" '("elisp-refs-"))


;;; Generated autoloads from elisp-refs/test/elisp-refs-unit-test.el

(register-definition-prefixes "elisp-refs/test/elisp-refs-unit-test" '("with-temp-backed-buffer"))


;;; Generated autoloads from company-mode/test/elisp-tests.el

(register-definition-prefixes "company-mode/test/elisp-tests" '("company-elisp-with-buffer"))


;;; Generated autoloads from emacsql/emacsql.el

(autoload 'emacsql-show-last-sql "emacsql/emacsql" "\
Display the compiled SQL of the s-expression SQL expression before point.
A prefix argument causes the SQL to be printed into the current buffer.

(fn &optional PREFIX)" t)
(register-definition-prefixes "emacsql/emacsql" '("emacsql-"))


;;; Generated autoloads from emacsql/emacsql-compiler.el

(register-definition-prefixes "emacsql/emacsql-compiler" '("emacsql-"))


;;; Generated autoloads from emacsql/emacsql-mysql.el

(register-definition-prefixes "emacsql/emacsql-mysql" '("emacsql-mysql-"))


;;; Generated autoloads from emacsql/emacsql-pg.el

(register-definition-prefixes "emacsql/emacsql-pg" '("emacsql-pg-connection"))


;;; Generated autoloads from emacsql/emacsql-psql.el

(register-definition-prefixes "emacsql/emacsql-psql" '("emacsql-psql-"))


;;; Generated autoloads from emacsql/emacsql-sqlite.el

(register-definition-prefixes "emacsql/emacsql-sqlite" '("emacsql-sqlite-"))


;;; Generated autoloads from emacsql/emacsql-sqlite-builtin.el

(register-definition-prefixes "emacsql/emacsql-sqlite-builtin" '("emacsql-sqlite-builtin-connection"))


;;; Generated autoloads from emacsql/emacsql-sqlite-common.el

(register-definition-prefixes "emacsql/emacsql-sqlite-common" '("emacsql-"))


;;; Generated autoloads from emacsql/emacsql-sqlite-module.el

(register-definition-prefixes "emacsql/emacsql-sqlite-module" '("emacsql-sqlite-module-connection"))


;;; Generated autoloads from lsp-mode/features/support/env.el

(register-definition-prefixes "lsp-mode/features/support/env" '("lsp-mode-"))


;;; Generated autoloads from f.el/f.el

(register-definition-prefixes "f.el/f" '("f-"))


;;; Generated autoloads from fingertip/fingertip.el

(autoload 'fingertip-mode "fingertip/fingertip" "\
Minor mode for auto parenthesis pairing with syntax table.

\\<fingertip-mode-map>

This is a minor mode.  If called interactively, toggle the
`Fingertip mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `fingertip-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{fingertip-mode-map}

(fn &optional ARG)" t)
(register-definition-prefixes "fingertip/fingertip" '("fingertip-"))


;;; Generated autoloads from flycheck/flycheck.el

(autoload 'flycheck-manual "flycheck/flycheck" "\
Open the Flycheck manual." t)
(autoload 'flycheck-mode "flycheck/flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)" t)
(put 'global-flycheck-mode 'globalized-minor-mode t)
(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")
(custom-autoload 'global-flycheck-mode "flycheck/flycheck" nil)
(autoload 'global-flycheck-mode "flycheck/flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe'
would do it.

See `flycheck-mode' for more information on Flycheck mode.

(fn &optional ARG)" t)
(autoload 'flycheck-define-error-level "flycheck/flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

(fn LEVEL &rest PROPERTIES)")
(function-put 'flycheck-define-error-level 'lisp-indent-function 1)
(autoload 'flycheck-define-command-checker "flycheck/flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

(fn SYMBOL DOCSTRING &rest PROPERTIES)")
(function-put 'flycheck-define-command-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-command-checker 'doc-string-elt 2)
(autoload 'flycheck-def-config-file-var "flycheck/flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-config-file-var 'lisp-indent-function 3)
(autoload 'flycheck-def-option-var "flycheck/flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-option-var 'lisp-indent-function 3)
(function-put 'flycheck-def-option-var 'doc-string-elt 4)
(autoload 'flycheck-define-checker "flycheck/flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)
(function-put 'flycheck-define-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-checker 'doc-string-elt 2)
(register-definition-prefixes "flycheck/flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))


;;; Generated autoloads from flycheck/flycheck-buttercup.el

(register-definition-prefixes "flycheck/flycheck-buttercup" '("flycheck-buttercup-format-error-list"))


;;; Generated autoloads from flycheck/maint/flycheck-checkdoc.el

(register-definition-prefixes "flycheck/maint/flycheck-checkdoc" '("flycheck/"))


;;; Generated autoloads from flycheck/maint/flycheck-compile.el

(register-definition-prefixes "flycheck/maint/flycheck-compile" '("flycheck/batch-byte-compile"))


;;; Generated autoloads from flycheck/flycheck-ert.el

(register-definition-prefixes "flycheck/flycheck-ert" '("flycheck-er"))


;;; Generated autoloads from flycheck/maint/flycheck-format.el

(register-definition-prefixes "flycheck/maint/flycheck-format" '("flycheck/"))


;;; Generated autoloads from flycheck/maint/flycheck-maint.el

(register-definition-prefixes "flycheck/maint/flycheck-maint" '("flycheck/"))


;;; Generated autoloads from flymake-flycheck/flymake-flycheck.el

(autoload 'flymake-flycheck-all-available-diagnostic-functions "flymake-flycheck/flymake-flycheck" "\
Return a list of diagnostic functions for all usable checkers.
These might end up providing duplicate functionality, e.g. both
dash and bash might be used to check a `sh-mode' buffer if both are
found to be installed.

Usually you will want to use `flymake-flycheck-all-chained-diagnostic-functions' instead.")
(autoload 'flymake-flycheck-all-chained-diagnostic-functions "flymake-flycheck/flymake-flycheck" "\
Return a list of diagnostic functions for the current checker chain.")
(autoload 'flymake-flycheck-diagnostic-function-for "flymake-flycheck/flymake-flycheck" "\
Wrap CHECKER to make a `flymake-diagnostics-functions' backend.

(fn CHECKER)")
(register-definition-prefixes "flymake-flycheck/flymake-flycheck" '("flymake-flycheck-"))


;;; Generated autoloads from auctex/font-latex.el

(autoload 'font-latex-setup "auctex/font-latex" "\
Setup this buffer for LaTeX font-lock.  Usually called from a hook.")
(register-definition-prefixes "auctex/font-latex" '("font-latex-"))


;;; Generated autoloads from auctex/tests/latex/font-latex-test.el

(register-definition-prefixes "auctex/tests/latex/font-latex-test" '("LaTeX-common-initialization"))


;;; Generated autoloads from frame-local/frame-local.el

(register-definition-prefixes "frame-local/frame-local" '("frame-local-"))


;;; Generated autoloads from magit/lisp/git-commit.el

(put 'git-commit-major-mode 'safe-local-variable
    (lambda (val)
      (memq val '(text-mode
                  markdown-mode
                  org-mode
                  fundamental-mode
                  git-commit-elisp-text-mode))))
(register-definition-prefixes "magit/lisp/git-commit" '("git-commit-" "global-git-commit-mode"))


;;; Generated autoloads from magit/lisp/git-rebase.el

(autoload 'git-rebase-current-line "magit/lisp/git-rebase" "\
Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned.")
(autoload 'git-rebase-mode "magit/lisp/git-rebase" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run \"git rebase -i\" or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running \"man git-rebase\" at the command line) for details.

(fn)" t)
(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")
(add-to-list 'auto-mode-alist (cons git-rebase-filename-regexp #'git-rebase-mode))
(register-definition-prefixes "magit/lisp/git-rebase" '("git-rebase-" "magit-imenu--rebase-"))


;;; Generated autoloads from helpful/helpful.el

(autoload 'helpful-function "helpful/helpful" "\
Show help for function named SYMBOL.

See also `helpful-macro', `helpful-command' and `helpful-callable'.

(fn SYMBOL)" t)
(autoload 'helpful-command "helpful/helpful" "\
Show help for interactive function named SYMBOL.

See also `helpful-function'.

(fn SYMBOL)" t)
(autoload 'helpful-key "helpful/helpful" "\
Show help for interactive command bound to KEY-SEQUENCE.

(fn KEY-SEQUENCE)" t)
(autoload 'helpful-macro "helpful/helpful" "\
Show help for macro named SYMBOL.

(fn SYMBOL)" t)
(autoload 'helpful-callable "helpful/helpful" "\
Show help for function, macro or special form named SYMBOL.

See also `helpful-macro', `helpful-function' and `helpful-command'.

(fn SYMBOL)" t)
(autoload 'helpful-symbol "helpful/helpful" "\
Show help for SYMBOL, a variable, function, macro, or face.

See also `helpful-callable' and `helpful-variable'.

(fn SYMBOL)" t)
(autoload 'helpful-variable "helpful/helpful" "\
Show help for variable named SYMBOL.

(fn SYMBOL)" t)
(autoload 'helpful-at-point "helpful/helpful" "\
Show help for the symbol at point." t)
(register-definition-prefixes "helpful/helpful" '("helpful-"))


;;; Generated autoloads from helpful/test/helpful-unit-test.el

(register-definition-prefixes "helpful/test/helpful-unit-test" '("helpful-" "test-foo"))


;;; Generated autoloads from highlight-indent-guides/highlight-indent-guides.el

(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides/highlight-indent-guides" "\
Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively." t)
(autoload 'highlight-indent-guides-mode "highlight-indent-guides/highlight-indent-guides" "\
Display indent guides in a buffer.

This is a minor mode.  If called interactively, toggle the
`Highlight-Indent-Guides mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `highlight-indent-guides-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "highlight-indent-guides/highlight-indent-guides" '("highlight-indent-guides-"))


;;; Generated autoloads from highlight-indent-guides/tests/highlight-indent-guides-tests.el

(register-definition-prefixes "highlight-indent-guides/tests/highlight-indent-guides-tests" '("higlight-indent-guides-"))


;;; Generated autoloads from highlight-numbers/highlight-numbers.el

(autoload 'highlight-numbers-mode "highlight-numbers/highlight-numbers" "\
Minor mode for highlighting numeric literals in source code.

Toggle Highlight Numbers mode on or off.

With a prefix argument ARG, enable Highlight Numbers mode if ARG is
positive, and disable it otherwise. If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.

(fn &optional ARG)" t)
(register-definition-prefixes "highlight-numbers/highlight-numbers" '("highlight-numbers-"))


;;; Generated autoloads from holo-layer/holo-layer.el

(register-definition-prefixes "holo-layer/holo-layer" '("holo-layer-"))


;;; Generated autoloads from holo-layer/holo-layer-epc.el

(register-definition-prefixes "holo-layer/holo-layer-epc" '("holo-layer-"))


;;; Generated autoloads from ht.el/ht.el

(register-definition-prefixes "ht.el/ht" 'nil)


;;; Generated autoloads from ht.el/test/ht-test.el

(register-definition-prefixes "ht.el/test/ht-test" '("ht-run-tests"))


;;; Generated autoloads from hydra/hydra.el

(autoload 'defhydra "hydra/hydra" "\
Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)
(function-put 'defhydra 'lisp-indent-function 'defun)
(function-put 'defhydra 'doc-string-elt 3)
(register-definition-prefixes "hydra/hydra" '("defhydra" "hydra-"))


;;; Generated autoloads from hydra/hydra-examples.el

(register-definition-prefixes "hydra/hydra-examples" '("hydra-" "org-agenda-cts" "whitespace-mode"))


;;; Generated autoloads from hydra/hydra-ox.el

(register-definition-prefixes "hydra/hydra-ox" '("hydra-ox"))


;;; Generated autoloads from hydra/hydra-test.el

(register-definition-prefixes "hydra/hydra-test" '("hydra-" "remap"))


;;; Generated autoloads from emacs-immersive-translate/immersive-translate.el

(autoload 'immersive-translate-abort "emacs-immersive-translate/immersive-translate" "\
Stop all active immersive-translate processes in BUF.

(fn BUF)" t)
(autoload 'immersive-translate-buffer "emacs-immersive-translate/immersive-translate" "\
Translate the whole buffer." t)
(autoload 'immersive-translate-paragraph "emacs-immersive-translate/immersive-translate" "\
Translate the current paragraph." t)
(autoload 'immersive-translate-clear "emacs-immersive-translate/immersive-translate" "\
Clear translations." t)
(autoload 'immersive-translate-auto-mode "emacs-immersive-translate/immersive-translate" "\
Toggle `immersive-translate-auto-mode'.

Translate paragraph under the cursor after Emacs is idle for
`immersive-translate-auto-idle' seconds.

This is a minor mode.  If called interactively, toggle the
`Immersive-Translate-Auto mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `immersive-translate-auto-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'immersive-translate-setup "emacs-immersive-translate/immersive-translate" "\
Setup immersive-trasnlate.")
(register-definition-prefixes "emacs-immersive-translate/immersive-translate" '("immersive-translate-"))


;;; Generated autoloads from emacs-immersive-translate/immersive-translate-baidu.el

(register-definition-prefixes "emacs-immersive-translate/immersive-translate-baidu" '("immersive-translate-"))


;;; Generated autoloads from emacs-immersive-translate/immersive-translate-chatgpt.el

(register-definition-prefixes "emacs-immersive-translate/immersive-translate-chatgpt" '("immersive-translate-c"))


;;; Generated autoloads from emacs-immersive-translate/immersive-translate-curl.el

(register-definition-prefixes "emacs-immersive-translate/immersive-translate-curl" '("immersive-translate-curl-"))


;;; Generated autoloads from emacs-immersive-translate/immersive-translate-trans.el

(register-definition-prefixes "emacs-immersive-translate/immersive-translate-trans" '("immersive-translate-trans-"))


;;; Generated autoloads from iscroll/iscroll.el

(autoload 'iscroll-mode "iscroll/iscroll" "\
Smooth scrolling over images.

This is a minor mode.  If called interactively, toggle the
`IScroll mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `iscroll-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "iscroll/iscroll" '("iscroll-"))


;;; Generated autoloads from kind-icon/kind-icon.el

(autoload 'kind-icon-margin-formatter "kind-icon/kind-icon" "\
Return a margin-formatter function which produces kind icons.
METADATA is the completion metadata supplied by the caller (see
info node `(elisp)Programmed Completion').  To use, add this
function to the relevant margin-formatters list.

(fn METADATA)")
(autoload 'kind-icon-enhance-completion "kind-icon/kind-icon" "\
A wrapper for `completion-in-region-functions'.
This wrapper sets a custom `affixation-function' on
COMPLETION-FUNCTION, which places an icon in the prefix slot.  Use
it like:

  (setq completion-in-region-function
     (kind-icon-enhance-completion
       completion-in-region-function))

(fn COMPLETION-FUNCTION)")
(register-definition-prefixes "kind-icon/kind-icon" '("kind-icon-"))


;;; Generated autoloads from auctex/latex.el

(autoload 'BibTeX-auto-store "auctex/latex" "\
This function should be called from `bibtex-mode-hook'.
It will setup BibTeX to store keys in an auto file.")
(add-to-list 'auto-mode-alist '("\\.drv\\'" . latex-mode) t)
(add-to-list 'auto-mode-alist '("\\.hva\\'" . latex-mode))
(autoload 'TeX-latex-mode "auctex/latex" "\
Major mode in AUCTeX for editing LaTeX files.
See info under AUCTeX for full documentation.

Special commands:
\\{LaTeX-mode-map}

Entering LaTeX mode calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `LaTeX-mode-hook'." t)
(add-to-list 'auto-mode-alist '("\\.dtx\\'" . doctex-mode))
(autoload 'docTeX-mode "auctex/latex" "\
Major mode in AUCTeX for editing .dtx files derived from `LaTeX-mode'.
Runs `LaTeX-mode', sets a few variables and
runs the hooks in `docTeX-mode-hook'.

(fn)" t)
(defalias 'TeX-doctex-mode #'docTeX-mode)
(register-definition-prefixes "auctex/latex" '("Bib" "LaTeX-" "TeX-" "docTeX-" "latex-math-mode"))


;;; Generated autoloads from latex-extra/latex-extra.el

(autoload 'latex/setup-auto-fill "latex-extra/latex-extra" "\
Set the function used to fill a paragraph to `latex/auto-fill-function'." t)
(autoload 'latex/setup-keybinds "latex-extra/latex-extra" "\
Obsolete function. Use (add-hook 'LaTeX-mode-hook #'latex-extra-mode) instead." t)
(autoload 'latex-extra-mode "latex-extra/latex-extra" "\
Defines extra commands and keys for LaTeX-mode.

To activate just call
    (add-hook 'LaTeX-mode-hook #'latex-extra-mode)

The additions of this package fall into the following three
categories:

1-Key Compilation
=================

Tired of hitting C-c C-c 4 times (latex, bibtex, latex, view) for
the document to compile? This defines a much needed command that does
*everything* at once, and even handles compilation errors!

  C-c C-a `latex/compile-commands-until-done'

Navigation
==========

Five new keybindings are defined for navigating between
sections/chapters. These are meant to be intuitive to people familiar
with `org-mode'.

  C-c C-n `latex/next-section'
    Goes forward to the next section-like command in the buffer (part,
    chapter, (sub)section, or (sub)paragraph, whichever comes first).
  C-c C-u `latex/up-section'
    Goes backward to the previous section-like command containing this
    one. For instance, if you're inside a subsection it goes up to the
    section that contains it.
  C-c C-f `latex/next-section-same-level'
    Like next-section, except it skips anything that's \"lower-level\" then
    the current one. For instance, if you're inside a subsection it finds
    the next subsection (or higher), skipping any subsubsections or
    paragraphs.
  C-M-f `latex/forward-environment'
    Skip over the next environment, or exit the current one, whichever
    comes first.
  C-M-e `latex/end-of-environment'
    Exit the current environment, and skip over some whitespace
    afterwards. (Like `LaTeX-find-matching-end', but a little more useful.)

  C-M-b `latex/backward-environment'
  C-M-a `latex/beginning-of-environment'
  C-c C-p `latex/previous-section'
  C-c C-b `latex/previous-section-same-level'
    Same as above, but go backward.

Whitespace Handling
===================

`latex-extra.el' improves `auto-fill-mode' so that it only applies to
text, not equations. To use this improvement, just activate
`auto-fill-mode' as usual.

It also defines a new command:

  C-c C-q `latex/clean-fill-indent-environment'
    Completely cleans up the entire current environment. This involves:

    1. Removing extraneous spaces and blank lines.
    2. Filling text (and only text, not equations).
    3. Indenting everything.

This is a minor mode.  If called interactively, toggle the
`Latex-Extra mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `latex-extra-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "latex-extra/latex-extra" '("latex"))


;;; Generated autoloads from auctex/latex-flymake.el

(register-definition-prefixes "auctex/latex-flymake" '("LaTeX-"))


;;; Generated autoloads from auctex/tests/latex/latex-test.el

(register-definition-prefixes "auctex/tests/latex/latex-test" '("LaTeX-common-initialization"))


;;; Generated autoloads from lsp-mode/clients/lsp-actionscript.el

(register-definition-prefixes "lsp-mode/clients/lsp-actionscript" '("lsp-actionscript-"))


;;; Generated autoloads from lsp-mode/clients/lsp-ada.el

(register-definition-prefixes "lsp-mode/clients/lsp-ada" '("lsp-ada-"))


;;; Generated autoloads from lsp-mode/clients/lsp-angular.el

(register-definition-prefixes "lsp-mode/clients/lsp-angular" '("lsp-client"))


;;; Generated autoloads from lsp-mode/clients/lsp-ansible.el

(register-definition-prefixes "lsp-mode/clients/lsp-ansible" '("lsp-ansible-"))


;;; Generated autoloads from lsp-mode/clients/lsp-astro.el

(register-definition-prefixes "lsp-mode/clients/lsp-astro" '("lsp-astro--get-initialization-options"))


;;; Generated autoloads from lsp-mode/clients/lsp-awk.el

(register-definition-prefixes "lsp-mode/clients/lsp-awk" '("lsp-awk-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-bash.el

(register-definition-prefixes "lsp-mode/clients/lsp-bash" '("lsp-bash-"))


;;; Generated autoloads from lsp-mode/clients/lsp-beancount.el

(register-definition-prefixes "lsp-mode/clients/lsp-beancount" '("lsp-beancount-"))


;;; Generated autoloads from lsp-mode/test/lsp-benchmarks.el

(register-definition-prefixes "lsp-mode/test/lsp-benchmarks" '("lsp-benchmark"))


;;; Generated autoloads from lsp-bridge/lsp-bridge.el

(autoload 'lsp-bridge-mode "lsp-bridge/lsp-bridge" "\
LSP Bridge mode.

This is a minor mode.  If called interactively, toggle the
`Lsp-Bridge mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-bridge-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'global-lsp-bridge-mode "lsp-bridge/lsp-bridge" nil t)
(register-definition-prefixes "lsp-bridge/lsp-bridge" '("acm-library-path" "lsp-bri" "position-before-jump"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-call-hierarchy.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-call-hierarchy" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-code-action.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-code-action" '("lsp-bridge-code-action"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-diagnostic.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-diagnostic" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-epc.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-epc" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-jdtls.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-jdtls" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-lsp-installer.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-lsp-installer" '("codeium-" "lsp-bridge-" "tabnine-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-org-babel.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-org-babel" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-peek.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-peek" '("lsp-bridge-"))


;;; Generated autoloads from lsp-bridge/lsp-bridge-ref.el

(register-definition-prefixes "lsp-bridge/lsp-bridge-ref" '("lsp-bridge-ref-"))


;;; Generated autoloads from lsp-bridge/test/lsp-bridge-test.el

(register-definition-prefixes "lsp-bridge/test/lsp-bridge-test" '("lsp-bridge-start-test"))


;;; Generated autoloads from lsp-mode/clients/lsp-camel.el

(register-definition-prefixes "lsp-mode/clients/lsp-camel" '("lsp-camel-"))


;;; Generated autoloads from lsp-mode/clients/lsp-clangd.el

(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-mode/clients/lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

(fn ERROR)")
(register-definition-prefixes "lsp-mode/clients/lsp-clangd" '("lsp-c"))


;;; Generated autoloads from lsp-mode/test/lsp-clangd-test.el

(register-definition-prefixes "lsp-mode/test/lsp-clangd-test" '("lsp-in-sample-cpp-project"))


;;; Generated autoloads from lsp-mode/clients/lsp-clojure.el

(autoload 'lsp-clojure-show-test-tree "lsp-mode/clients/lsp-clojure" "\
Show a test tree and focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(register-definition-prefixes "lsp-mode/clients/lsp-clojure" '("lsp-clojure-"))


;;; Generated autoloads from lsp-mode/test/lsp-common-test.el

(register-definition-prefixes "lsp-mode/test/lsp-common-test" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-completion.el

(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "\
lsp-mode 7.0.1")
(autoload 'lsp-completion-at-point "lsp-mode/lsp-completion" "\
Get lsp completions.")
(autoload 'lsp-completion--enable "lsp-mode/lsp-completion" "\
Enable LSP completion support.")
(autoload 'lsp-completion-mode "lsp-mode/lsp-completion" "\
Toggle LSP completion support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-completion-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))
(register-definition-prefixes "lsp-mode/lsp-completion" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-credo.el

(register-definition-prefixes "lsp-mode/clients/lsp-credo" '("lsp-credo-"))


;;; Generated autoloads from lsp-mode/clients/lsp-crystal.el

(register-definition-prefixes "lsp-mode/clients/lsp-crystal" '("lsp-clients-crystal-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-csharp.el

(register-definition-prefixes "lsp-mode/clients/lsp-csharp" '("lsp-csharp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-css.el

(register-definition-prefixes "lsp-mode/clients/lsp-css" '("lsp-css-"))


;;; Generated autoloads from lsp-mode/lsp-diagnostics.el

(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "\
lsp-mode 7.0.1")
(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-mode/lsp-diagnostics")
(autoload 'lsp-diagnostics--enable "lsp-mode/lsp-diagnostics" "\
Enable LSP checker support.")
(autoload 'lsp-diagnostics-mode "lsp-mode/lsp-diagnostics" "\
Toggle LSP diagnostics integration.

This is a minor mode.  If called interactively, toggle the
`Lsp-Diagnostics mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))
(register-definition-prefixes "lsp-mode/lsp-diagnostics" '("lsp-diagnostics-"))


;;; Generated autoloads from lsp-mode/lsp-dired.el

(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")
(custom-autoload 'lsp-dired-mode "lsp-mode/lsp-dired" nil)
(autoload 'lsp-dired-mode "lsp-mode/lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Dired mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-dired-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-mode/lsp-dired" '("lsp-dired-"))


;;; Generated autoloads from lsp-mode/docs/lsp-doc.el

(register-definition-prefixes "lsp-mode/docs/lsp-doc" '("lsp-doc-"))


;;; Generated autoloads from lsp-mode/clients/lsp-dockerfile.el

(register-definition-prefixes "lsp-mode/clients/lsp-dockerfile" '("lsp-dockerfile-language-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-dot.el

(register-definition-prefixes "lsp-mode/clients/lsp-dot" '("lsp-dot--dot-ls-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-elixir.el

(register-definition-prefixes "lsp-mode/clients/lsp-elixir" '("lsp-elixir-"))


;;; Generated autoloads from lsp-mode/clients/lsp-elm.el

(register-definition-prefixes "lsp-mode/clients/lsp-elm" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-emmet.el

(register-definition-prefixes "lsp-mode/clients/lsp-emmet" '("lsp-emmet-ls-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-erlang.el

(register-definition-prefixes "lsp-mode/clients/lsp-erlang" '("lsp-erlang-"))


;;; Generated autoloads from lsp-mode/clients/lsp-eslint.el

(register-definition-prefixes "lsp-mode/clients/lsp-eslint" '("lsp-"))


;;; Generated autoloads from lsp-mode/test/lsp-file-watch-test.el

(register-definition-prefixes "lsp-mode/test/lsp-file-watch-test" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-fortran.el

(register-definition-prefixes "lsp-mode/clients/lsp-fortran" '("lsp-clients-"))


;;; Generated autoloads from lsp-mode/clients/lsp-fsharp.el

(autoload 'lsp-fsharp--workspace-load "lsp-mode/clients/lsp-fsharp" "\
Load all of the provided PROJECTS.

(fn PROJECTS)")
(register-definition-prefixes "lsp-mode/clients/lsp-fsharp" '("lsp-fsharp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-gdscript.el

(register-definition-prefixes "lsp-mode/clients/lsp-gdscript" '("lsp-gdscript-"))


;;; Generated autoloads from lsp-mode/scripts/lsp-generate-settings.el

(register-definition-prefixes "lsp-mode/scripts/lsp-generate-settings" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-gleam.el

(register-definition-prefixes "lsp-mode/clients/lsp-gleam" '("lsp-gleam-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-glsl.el

(register-definition-prefixes "lsp-mode/clients/lsp-glsl" '("lsp-glsl-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-go.el

(register-definition-prefixes "lsp-mode/clients/lsp-go" '("lsp-go-"))


;;; Generated autoloads from lsp-mode/clients/lsp-graphql.el

(register-definition-prefixes "lsp-mode/clients/lsp-graphql" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-groovy.el

(register-definition-prefixes "lsp-mode/clients/lsp-groovy" '("lsp-groovy-"))


;;; Generated autoloads from lsp-mode/clients/lsp-hack.el

(register-definition-prefixes "lsp-mode/clients/lsp-hack" '("lsp-clients-hack-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-haxe.el

(register-definition-prefixes "lsp-mode/clients/lsp-haxe" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-headerline.el

(autoload 'lsp-headerline-breadcrumb-mode "lsp-mode/lsp-headerline" "\
Toggle breadcrumb on headerline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-headerline-breadcrumb-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-breadcrumb-go-to-symbol "lsp-mode/lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-mode/lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(register-definition-prefixes "lsp-mode/lsp-headerline" '("lsp-headerline-"))


;;; Generated autoloads from lsp-mode/clients/lsp-html.el

(register-definition-prefixes "lsp-mode/clients/lsp-html" '("lsp-html-"))


;;; Generated autoloads from lsp-mode/lsp-icons.el

(register-definition-prefixes "lsp-mode/lsp-icons" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-ido.el

(autoload 'lsp-ido-workspace-symbol "lsp-mode/lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t)
(register-definition-prefixes "lsp-mode/lsp-ido" '("lsp-ido-"))


;;; Generated autoloads from lsp-mode/clients/lsp-idris.el

(register-definition-prefixes "lsp-mode/clients/lsp-idris" '("lsp-idris2-lsp-"))


;;; Generated autoloads from lsp-mode/lsp-iedit.el

(autoload 'lsp-iedit-highlights "lsp-mode/lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-iedit-linked-ranges "lsp-mode/lsp-iedit" "\
Start an `iedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-multiedit-highlights "lsp-mode/lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-evil-multiedit-linked-ranges "lsp-mode/lsp-iedit" "\
Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-state-highlights "lsp-mode/lsp-iedit" "\
Start `iedit-mode'. for `textDocument/documentHighlight'" t)
(autoload 'lsp-evil-state-linked-ranges "lsp-mode/lsp-iedit" "\
Start `iedit-mode'. for `textDocument/linkedEditingRange'" t)
(register-definition-prefixes "lsp-mode/lsp-iedit" '("lsp-iedit--on-ranges"))


;;; Generated autoloads from lsp-mode/test/lsp-integration-test.el

(register-definition-prefixes "lsp-mode/test/lsp-integration-test" '("deferred::nextc" "lsp-"))


;;; Generated autoloads from lsp-mode/test/lsp-io-test.el

(register-definition-prefixes "lsp-mode/test/lsp-io-test" '("lsp--"))


;;; Generated autoloads from lsp-mode/clients/lsp-javascript.el

(register-definition-prefixes "lsp-mode/clients/lsp-javascript" '("lsp-"))


;;; Generated autoloads from lsp-mode/test/lsp-javascript-test.el

(register-definition-prefixes "lsp-mode/test/lsp-javascript-test" '("lsp-flow-" "test-location"))


;;; Generated autoloads from lsp-mode/clients/lsp-json.el

(register-definition-prefixes "lsp-mode/clients/lsp-json" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-kotlin.el

(register-definition-prefixes "lsp-mode/clients/lsp-kotlin" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-lens.el

(autoload 'lsp-lens--enable "lsp-mode/lsp-lens" "\
Enable lens mode.")
(autoload 'lsp-lens-show "lsp-mode/lsp-lens" "\
Display lenses in the buffer." t)
(autoload 'lsp-lens-hide "lsp-mode/lsp-lens" "\
Delete all lenses." t)
(autoload 'lsp-lens-mode "lsp-mode/lsp-lens" "\
Toggle code-lens overlays.

This is a minor mode.  If called interactively, toggle the
`Lsp-Lens mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-lens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-avy-lens "lsp-mode/lsp-lens" "\
Click lsp lens using `avy' package." t)
(register-definition-prefixes "lsp-mode/lsp-lens" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-lua.el

(register-definition-prefixes "lsp-mode/clients/lsp-lua" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-magik.el

(register-definition-prefixes "lsp-mode/clients/lsp-magik" '("lsp-magik-"))


;;; Generated autoloads from lsp-mode/clients/lsp-markdown.el

(register-definition-prefixes "lsp-mode/clients/lsp-markdown" '("lsp-markdown-"))


;;; Generated autoloads from lsp-mode/clients/lsp-marksman.el

(register-definition-prefixes "lsp-mode/clients/lsp-marksman" '("lsp-marksman-"))


;;; Generated autoloads from lsp-mode/test/lsp-methods-test.el

(register-definition-prefixes "lsp-mode/test/lsp-methods-test" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-mint.el

(register-definition-prefixes "lsp-mode/clients/lsp-mint" '("lsp-clients-mint-executable"))


;;; Generated autoloads from lsp-mode/lsp-mode.el

(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))
(autoload 'lsp--string-listp "lsp-mode/lsp-mode" "\
Return t if all elements of SEQUENCE are strings, else nil.

(fn SEQUENCE)")
(autoload 'lsp-load-vscode-workspace "lsp-mode/lsp-mode" "\
Load vscode workspace from FILE

(fn FILE)" t)
(autoload 'lsp-save-vscode-workspace "lsp-mode/lsp-mode" "\
Save vscode workspace to FILE

(fn FILE)" t)
(autoload 'lsp-install-server "lsp-mode/lsp-mode" "\
Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

(fn UPDATE? &optional SERVER-ID)" t)
(autoload 'lsp-uninstall-server "lsp-mode/lsp-mode" "\
Delete a LSP server from `lsp-server-install-dir'.

(fn DIR)" t)
(autoload 'lsp-uninstall-servers "lsp-mode/lsp-mode" "\
Uninstall all installed servers." t)
(autoload 'lsp-update-server "lsp-mode/lsp-mode" "\
Interactively update (reinstall) a server.

(fn &optional SERVER-ID)" t)
(autoload 'lsp-update-servers "lsp-mode/lsp-mode" "\
Update (reinstall) all installed servers." t)
(autoload 'lsp-ensure-server "lsp-mode/lsp-mode" "\
Ensure server SERVER-ID

(fn SERVER-ID)")
(autoload 'lsp "lsp-mode/lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

(fn &optional ARG)" t)
(autoload 'lsp-deferred "lsp-mode/lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs.")
(autoload 'lsp-start-plain "lsp-mode/lsp-mode" "\
Start `lsp-mode' using minimal configuration using the latest `melpa' version
of the packages.

In case the major-mode that you are using for " t)
(register-definition-prefixes "lsp-mode/lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace"))


;;; Generated autoloads from lsp-mode/features/step-definitions/lsp-mode-steps.el

(register-definition-prefixes "lsp-mode/features/step-definitions/lsp-mode-steps" '("lsp-"))


;;; Generated autoloads from lsp-mode/test/lsp-mode-test.el

(register-definition-prefixes "lsp-mode/test/lsp-mode-test" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-modeline.el

(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "\
lsp-mode 7.0.1")
(autoload 'lsp-modeline-code-actions-mode "lsp-mode/lsp-modeline" "\
Toggle code actions on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-code-actions-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")
(autoload 'lsp-modeline-diagnostics-mode "lsp-mode/lsp-modeline" "\
Toggle diagnostics modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-modeline-workspace-status-mode "lsp-mode/lsp-modeline" "\
Toggle workspace status on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-modeline-workspace-status-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-mode/lsp-modeline" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-move.el

(register-definition-prefixes "lsp-mode/clients/lsp-move" '("lsp-clients-"))


;;; Generated autoloads from lsp-mode/clients/lsp-nginx.el

(register-definition-prefixes "lsp-mode/clients/lsp-nginx" '("lsp-nginx-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-nim.el

(register-definition-prefixes "lsp-mode/clients/lsp-nim" '("lsp-nim-l"))


;;; Generated autoloads from lsp-mode/clients/lsp-nix.el

(register-definition-prefixes "lsp-mode/clients/lsp-nix" '("lsp-nix-"))


;;; Generated autoloads from lsp-mode/clients/lsp-ocaml.el

(register-definition-prefixes "lsp-mode/clients/lsp-ocaml" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-openscad.el

(register-definition-prefixes "lsp-mode/clients/lsp-openscad" '("lsp-openscad-"))


;;; Generated autoloads from lsp-mode/clients/lsp-perl.el

(register-definition-prefixes "lsp-mode/clients/lsp-perl" '("lsp-perl-"))


;;; Generated autoloads from lsp-mode/clients/lsp-perlnavigator.el

(register-definition-prefixes "lsp-mode/clients/lsp-perlnavigator" '("lsp-perlnavigator-"))


;;; Generated autoloads from lsp-mode/clients/lsp-php.el

(register-definition-prefixes "lsp-mode/clients/lsp-php" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-pls.el

(register-definition-prefixes "lsp-mode/clients/lsp-pls" '("lsp-pls-"))


;;; Generated autoloads from lsp-mode/clients/lsp-prolog.el

(register-definition-prefixes "lsp-mode/clients/lsp-prolog" '("lsp-prolog-server-command"))


;;; Generated autoloads from lsp-mode/lsp-protocol.el

(register-definition-prefixes "lsp-mode/lsp-protocol" '("dash-expand:&RangeToPoint" "lsp"))


;;; Generated autoloads from lsp-mode/clients/lsp-purescript.el

(register-definition-prefixes "lsp-mode/clients/lsp-purescript" '("lsp-purescript-"))


;;; Generated autoloads from lsp-mode/clients/lsp-pwsh.el

(register-definition-prefixes "lsp-mode/clients/lsp-pwsh" '("lsp-pwsh-"))


;;; Generated autoloads from lsp-mode/clients/lsp-pyls.el

(register-definition-prefixes "lsp-mode/clients/lsp-pyls" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-pylsp.el

(register-definition-prefixes "lsp-mode/clients/lsp-pylsp" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-r.el

(register-definition-prefixes "lsp-mode/clients/lsp-r" '("lsp-clients-r-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-racket.el

(register-definition-prefixes "lsp-mode/clients/lsp-racket" '("lsp-racket-lang"))


;;; Generated autoloads from lsp-mode/clients/lsp-remark.el

(register-definition-prefixes "lsp-mode/clients/lsp-remark" '("lsp-remark-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-rf.el

(register-definition-prefixes "lsp-mode/clients/lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-"))


;;; Generated autoloads from lsp-mode/clients/lsp-rubocop.el

(register-definition-prefixes "lsp-mode/clients/lsp-rubocop" '("lsp-rubocop-"))


;;; Generated autoloads from lsp-mode/clients/lsp-ruby-lsp.el

(register-definition-prefixes "lsp-mode/clients/lsp-ruby-lsp" '("lsp-ruby-lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-ruby-syntax-tree.el

(register-definition-prefixes "lsp-mode/clients/lsp-ruby-syntax-tree" '("lsp-ruby-syntax-tree-"))


;;; Generated autoloads from lsp-mode/clients/lsp-ruff-lsp.el

(register-definition-prefixes "lsp-mode/clients/lsp-ruff-lsp" '("lsp-ruff-lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-rust.el

(register-definition-prefixes "lsp-mode/clients/lsp-rust" '("lsp-"))


;;; Generated autoloads from lsp-mode/lsp-semantic-tokens.el

(defvar-local semantic-token-modifier-cache (make-hash-table) "\
A cache of modifier values to the selected fonts.
This allows whole-bitmap lookup instead of checking each bit. The
expectation is that usage of modifiers will tend to cluster, so
we will not have the full range of possible usages, hence a
tractable hash map.

This is set as buffer-local. It should probably be shared in a
given workspace/language-server combination.

This cache should be flushed every time any modifier
configuration changes.")
(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-mode/lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests.")
(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-mode/lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

(fn WORKSPACE)")
(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-mode/lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable.")
(autoload 'lsp-semantic-tokens--enable "lsp-mode/lsp-semantic-tokens" "\
Enable semantic tokens mode.")
(autoload 'lsp-semantic-tokens-mode "lsp-mode/lsp-semantic-tokens" "\
Toggle semantic-tokens support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lsp-semantic-tokens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-mode/lsp-semantic-tokens" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-semgrep.el

(register-definition-prefixes "lsp-mode/clients/lsp-semgrep" '("lsp-semgrep-" "semgrep-"))


;;; Generated autoloads from lsp-mode/clients/lsp-sml.el

(register-definition-prefixes "lsp-mode/clients/lsp-sml" '("lsp-sml-millet-"))


;;; Generated autoloads from lsp-mode/clients/lsp-solargraph.el

(register-definition-prefixes "lsp-mode/clients/lsp-solargraph" '("lsp-solargraph-"))


;;; Generated autoloads from lsp-mode/clients/lsp-sorbet.el

(register-definition-prefixes "lsp-mode/clients/lsp-sorbet" '("lsp-sorbet-"))


;;; Generated autoloads from lsp-mode/clients/lsp-sqls.el

(register-definition-prefixes "lsp-mode/clients/lsp-sqls" '("lsp-sql"))


;;; Generated autoloads from lsp-mode/clients/lsp-steep.el

(register-definition-prefixes "lsp-mode/clients/lsp-steep" '("lsp-steep-"))


;;; Generated autoloads from lsp-mode/clients/lsp-svelte.el

(register-definition-prefixes "lsp-mode/clients/lsp-svelte" '("lsp-svelte-plugin-"))


;;; Generated autoloads from lsp-mode/clients/lsp-terraform.el

(register-definition-prefixes "lsp-mode/clients/lsp-terraform" '("construct-tf-package" "lsp-t"))


;;; Generated autoloads from lsp-mode/clients/lsp-tex.el

(register-definition-prefixes "lsp-mode/clients/lsp-tex" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-toml.el

(register-definition-prefixes "lsp-mode/clients/lsp-toml" '("lsp-toml-"))


;;; Generated autoloads from lsp-treemacs/lsp-treemacs.el

(autoload 'lsp-treemacs-symbols "lsp-treemacs/lsp-treemacs" "\
Show symbols view." t)
(autoload 'lsp-treemacs-java-deps-list "lsp-treemacs/lsp-treemacs" "\
Display java dependencies." t)
(autoload 'lsp-treemacs-java-deps-follow "lsp-treemacs/lsp-treemacs" nil t)
(defvar lsp-treemacs-sync-mode nil "\
Non-nil if Lsp-Treemacs-Sync mode is enabled.
See the `lsp-treemacs-sync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-treemacs-sync-mode'.")
(custom-autoload 'lsp-treemacs-sync-mode "lsp-treemacs/lsp-treemacs" nil)
(autoload 'lsp-treemacs-sync-mode "lsp-treemacs/lsp-treemacs" "\
Global minor mode for synchronizing lsp-mode workspace folders and treemacs projects.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Treemacs-Sync mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-treemacs-sync-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'lsp-treemacs-references "lsp-treemacs/lsp-treemacs" "\
Show the references for the symbol at point.
With a prefix argument, select the new window and expand the tree of references automatically.

(fn ARG)" t)
(autoload 'lsp-treemacs-implementations "lsp-treemacs/lsp-treemacs" "\
Show the implementations for the symbol at point.
With a prefix argument, select the new window expand the tree of implementations automatically.

(fn ARG)" t)
(autoload 'lsp-treemacs-call-hierarchy "lsp-treemacs/lsp-treemacs" "\
Show the incoming call hierarchy for the symbol at point.
With a prefix argument, show the outgoing call hierarchy.

(fn OUTGOING)" t)
(autoload 'lsp-treemacs-type-hierarchy "lsp-treemacs/lsp-treemacs" "\
Show the type hierarchy for the symbol at point.
With prefix 0 show sub-types.
With prefix 1 show super-types.
With prefix 2 show both.

(fn DIRECTION)" t)
(autoload 'lsp-treemacs-errors-list "lsp-treemacs/lsp-treemacs" nil t)
(register-definition-prefixes "lsp-treemacs/lsp-treemacs" '("lsp-treemacs-"))


;;; Generated autoloads from lsp-treemacs/lsp-treemacs-generic.el

(register-definition-prefixes "lsp-treemacs/lsp-treemacs-generic" '("lsp-treemacs-"))


;;; Generated autoloads from lsp-treemacs/lsp-treemacs-themes.el

(register-definition-prefixes "lsp-treemacs/lsp-treemacs-themes" '("lsp-treemacs-theme"))


;;; Generated autoloads from lsp-mode/clients/lsp-ttcn3.el

(register-definition-prefixes "lsp-mode/clients/lsp-ttcn3" '("lsp-ttcn3-lsp-server-command"))


;;; Generated autoloads from lsp-mode/clients/lsp-typeprof.el

(register-definition-prefixes "lsp-mode/clients/lsp-typeprof" '("lsp-typeprof-"))


;;; Generated autoloads from lsp-ui/lsp-ui.el

(autoload 'lsp-ui-mode "lsp-ui/lsp-ui" "\
Toggle language server UI mode on or off.
‘lsp-ui-mode’ is a minor mode that contains a series of useful UI
integrations for ‘lsp-mode’.  With a prefix argument ARG, enable
language server UI mode if ARG is positive, and disable it
otherwise.  If called from Lisp, enable the mode if ARG is
omitted or nil, and toggle it if ARG is ‘toggle’.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-ui/lsp-ui" '("lsp-ui-"))


;;; Generated autoloads from lsp-ui/lsp-ui-doc.el

(register-definition-prefixes "lsp-ui/lsp-ui-doc" '("lsp-ui-doc-"))


;;; Generated autoloads from lsp-ui/lsp-ui-flycheck.el

(register-definition-prefixes "lsp-ui/lsp-ui-flycheck" '("lsp-ui-flycheck-"))


;;; Generated autoloads from lsp-ui/lsp-ui-imenu.el

(register-definition-prefixes "lsp-ui/lsp-ui-imenu" '("lsp-ui-imenu" "overlay-priority"))


;;; Generated autoloads from lsp-ui/lsp-ui-peek.el

(register-definition-prefixes "lsp-ui/lsp-ui-peek" '("lsp-"))


;;; Generated autoloads from lsp-ui/lsp-ui-sideline.el

(register-definition-prefixes "lsp-ui/lsp-ui-sideline" '("lsp-ui-sideline"))


;;; Generated autoloads from lsp-ui/lsp-ui-util.el

(register-definition-prefixes "lsp-ui/lsp-ui-util" '("lsp-ui-util-"))


;;; Generated autoloads from lsp-mode/use-package/lsp-use-package.el

(autoload 'use-package-normalize-ensure-servers "lsp-mode/use-package/lsp-use-package" "\
Normalize the arguments to diminish down to a list of symbols.
LABEL - the label for the section.
ARG - keyword value to normalize.

(fn NAME LABEL ARG &optional RECURSED)")
(autoload 'use-package-normalize/:ensure-servers "lsp-mode/use-package/lsp-use-package" "\
Normalize ARGS under KEYWORD section.
NAME is the name of the section.

(fn NAME KEYWORD ARGS)")
(with-eval-after-load 'use-package (add-to-list 'use-package-keywords :ensure-servers t))
(register-definition-prefixes "lsp-mode/use-package/lsp-use-package" '("use-package-handler/:ensure-servers"))


;;; Generated autoloads from lsp-mode/clients/lsp-v.el

(register-definition-prefixes "lsp-mode/clients/lsp-v" '("lsp-v-vls-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-vala.el

(register-definition-prefixes "lsp-mode/clients/lsp-vala" '("lsp-clients-vala-ls-executable"))


;;; Generated autoloads from lsp-mode/clients/lsp-verilog.el

(register-definition-prefixes "lsp-mode/clients/lsp-verilog" '("lsp-clients-"))


;;; Generated autoloads from lsp-mode/clients/lsp-vetur.el

(register-definition-prefixes "lsp-mode/clients/lsp-vetur" '("lsp-vetur-"))


;;; Generated autoloads from lsp-mode/clients/lsp-vhdl.el

(register-definition-prefixes "lsp-mode/clients/lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-"))


;;; Generated autoloads from lsp-mode/clients/lsp-vimscript.el

(register-definition-prefixes "lsp-mode/clients/lsp-vimscript" '("lsp-clients-vim-"))


;;; Generated autoloads from lsp-mode/clients/lsp-volar.el

(register-definition-prefixes "lsp-mode/clients/lsp-volar" '("lsp-volar-"))


;;; Generated autoloads from lsp-mode/scripts/lsp-vscode-snippets.el

(register-definition-prefixes "lsp-mode/scripts/lsp-vscode-snippets" '("lsp-"))


;;; Generated autoloads from lsp-mode/clients/lsp-xml.el

(register-definition-prefixes "lsp-mode/clients/lsp-xml" '("lsp-xml-"))


;;; Generated autoloads from lsp-mode/clients/lsp-yaml.el

(register-definition-prefixes "lsp-mode/clients/lsp-yaml" '("lsp-yaml-"))


;;; Generated autoloads from lsp-mode/clients/lsp-zig.el

(register-definition-prefixes "lsp-mode/clients/lsp-zig" '("lsp-zig-zls-executable"))


;;; Generated autoloads from hydra/lv.el

(register-definition-prefixes "hydra/lv" '("lv-"))


;;; Generated autoloads from magit/lisp/magit.el

(defvar magit-define-global-key-bindings 'default "\
Which set of key bindings to add to the global keymap, if any.

This option controls which set of Magit key bindings, if any, may
be added to the global keymap, even before Magit is first used in
the current Emacs session.

If the value is nil, no bindings are added.

If `default', maybe add:

    C-x g     `magit-status'
    C-x M-g   `magit-dispatch'
    C-c M-g   `magit-file-dispatch'

If `recommended', maybe add:

    C-x g     `magit-status'
    C-c g     `magit-dispatch'
    C-c f     `magit-file-dispatch'

    These bindings are strongly recommended, but we cannot use
    them by default, because the \"C-c <LETTER>\" namespace is
    strictly reserved for bindings added by the user.

The bindings in the chosen set may be added when
`after-init-hook' is run.  Each binding is added if, and only
if, at that time no other key is bound to the same command,
and no other command is bound to the same key.  In other words
we try to avoid adding bindings that are unnecessary, as well
as bindings that conflict with other bindings.

Adding these bindings is delayed until `after-init-hook' is
run to allow users to set the variable anywhere in their init
file (without having to make sure to do so before `magit' is
loaded or autoloaded) and to increase the likelihood that all
the potentially conflicting user bindings have already been
added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately, when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable has no effect if `after-init-hook' has
already been run.")
(custom-autoload 'magit-define-global-key-bindings "magit/lisp/magit" t)
(defun magit-maybe-define-global-key-bindings (&optional force) "\
See variable `magit-define-global-key-bindings'." (when magit-define-global-key-bindings (let ((map (current-global-map))) (pcase-dolist (`(,key \, def) (cond ((eq magit-define-global-key-bindings 'recommended) '(("C-x g" . magit-status) ("C-c g" . magit-dispatch) ("C-c f" . magit-file-dispatch))) ('(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))))) (when (or force (not (or (lookup-key map (kbd key)) (where-is-internal def (make-sparse-keymap) t)))) (define-key map (kbd key) def))))))
(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook #'magit-maybe-define-global-key-bindings t))
 (autoload 'magit-dispatch "magit" nil t)
 (autoload 'magit-run "magit" nil t)
(autoload 'magit-git-command "magit/lisp/magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-git-command-topdir "magit/lisp/magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

(fn COMMAND)" t)
(autoload 'magit-shell-command "magit/lisp/magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-shell-command-topdir "magit/lisp/magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

(fn COMMAND)" t)
(autoload 'magit-version "magit/lisp/magit" "\
Return the version of Magit currently in use.

If optional argument PRINT-DEST is non-nil, also print the used
versions of Magit, Transient, Git and Emacs to the output stream
selected by that argument.  Interactively use the echo area, or
with a prefix argument use the current buffer.  Additionally put
the output in the kill ring.

(fn &optional PRINT-DEST)" t)
(register-definition-prefixes "magit/lisp/magit" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-apply.el

(autoload 'magit-stage-buffer-file "magit/lisp/magit-apply" "\
Stage all changes to the file being visited in the current buffer." t)
(autoload 'magit-stage-file "magit/lisp/magit-apply" "\
Read one or more files and stage all changes in those files.
With prefix argument FORCE, offer ignored files for completion.

(fn FILES &optional FORCE)" t)
(autoload 'magit-stage-modified "magit/lisp/magit-apply" "\
Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

(fn &optional ALL)" t)
(autoload 'magit-unstage-buffer-file "magit/lisp/magit-apply" "\
Unstage all changes to the file being visited in the current buffer." t)
(autoload 'magit-unstage-file "magit/lisp/magit-apply" "\
Read one or more files and unstage all changes to those files.

(fn FILES)" t)
(autoload 'magit-unstage-all "magit/lisp/magit-apply" "\
Remove all changes from the staging area." t)
(register-definition-prefixes "magit/lisp/magit-apply" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-autorevert.el

(put 'magit-auto-revert-mode 'globalized-minor-mode t)
(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "\
Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")
(custom-autoload 'magit-auto-revert-mode "magit/lisp/magit-autorevert" nil)
(autoload 'magit-auto-revert-mode "magit/lisp/magit-autorevert" "\
Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.

See `auto-revert-mode' for more information on Auto-Revert mode.

(fn &optional ARG)" t)
(register-definition-prefixes "magit/lisp/magit-autorevert" '("auto-revert-buffer" "magit-"))


;;; Generated autoloads from magit/lisp/magit-base.el

(autoload 'magit-emacs-Q-command "magit/lisp/magit-base" "\
Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t)
(autoload 'Info-follow-nearest-node--magit-gitman "magit/lisp/magit-base" "\


(fn FN &optional FORK)")
(advice-add 'Info-follow-nearest-node :around #'Info-follow-nearest-node--magit-gitman)
(advice-add 'org-man-export :around #'org-man-export--magit-gitman)
(autoload 'org-man-export--magit-gitman "magit/lisp/magit-base" "\


(fn FN LINK DESCRIPTION FORMAT)")
(register-definition-prefixes "magit/lisp/magit-base" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-bisect.el

 (autoload 'magit-bisect "magit-bisect" nil t)
(autoload 'magit-bisect-start "magit/lisp/magit-bisect" "\
Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

(fn BAD GOOD ARGS)" t)
(autoload 'magit-bisect-reset "magit/lisp/magit-bisect" "\
After bisecting, cleanup bisection state and return to original `HEAD'." t)
(autoload 'magit-bisect-good "magit/lisp/magit-bisect" "\
While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t)
(autoload 'magit-bisect-bad "magit/lisp/magit-bisect" "\
While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t)
(autoload 'magit-bisect-mark "magit/lisp/magit-bisect" "\
While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t)
(autoload 'magit-bisect-skip "magit/lisp/magit-bisect" "\
While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t)
(autoload 'magit-bisect-run "magit/lisp/magit-bisect" "\
Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

(fn CMDLINE &optional BAD GOOD ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-bisect" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-blame.el

 (autoload 'magit-blame-echo "magit-blame" nil t)
 (autoload 'magit-blame-addition "magit-blame" nil t)
 (autoload 'magit-blame-removal "magit-blame" nil t)
 (autoload 'magit-blame-reverse "magit-blame" nil t)
 (autoload 'magit-blame "magit-blame" nil t)
(register-definition-prefixes "magit/lisp/magit-blame" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-branch.el

 (autoload 'magit-branch "magit" nil t)
(autoload 'magit-checkout "magit/lisp/magit-branch" "\
Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

(git checkout REVISION).

(fn REVISION &optional ARGS)" t)
(function-put 'magit-checkout 'interactive-only 'magit--checkout)
(autoload 'magit-branch-create "magit/lisp/magit-branch" "\
Create BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t)
(function-put 'magit-branch-create 'interactive-only 'magit-call-git)
(autoload 'magit-branch-and-checkout "magit/lisp/magit-branch" "\
Create and checkout BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT &optional ARGS)" t)
(function-put 'magit-branch-and-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-or-checkout "magit/lisp/magit-branch" "\
Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

(fn ARG &optional START-POINT)" t)
(function-put 'magit-branch-or-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-checkout "magit/lisp/magit-branch" "\
Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

(fn BRANCH &optional START-POINT)" t)
(function-put 'magit-branch-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-orphan "magit/lisp/magit-branch" "\
Create and checkout an orphan BRANCH with contents from revision START-POINT.

(fn BRANCH START-POINT)" t)
(autoload 'magit-branch-spinout "magit/lisp/magit-branch" "\
Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-spinoff "magit/lisp/magit-branch" "\
Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-reset "magit/lisp/magit-branch" "\
Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

(fn BRANCH TO &optional SET-UPSTREAM)" t)
(autoload 'magit-branch-delete "magit/lisp/magit-branch" "\
Delete one or multiple branches.

If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

Require confirmation when deleting branches is dangerous in some
way.  Option `magit-no-confirm' can be customized to not require
confirmation in certain cases.  See its docstring to learn why
confirmation is required by default in certain cases or if a
prompt is confusing.

(fn BRANCHES &optional FORCE)" t)
(autoload 'magit-branch-rename "magit/lisp/magit-branch" "\
Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

(fn OLD NEW &optional FORCE)" t)
(autoload 'magit-branch-shelve "magit/lisp/magit-branch" "\
Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
(autoload 'magit-branch-unshelve "magit/lisp/magit-branch" "\
Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
 (autoload 'magit-branch-configure "magit-branch" nil t)
(register-definition-prefixes "magit/lisp/magit-branch" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-bundle.el

 (autoload 'magit-bundle "magit-bundle" nil t)
 (autoload 'magit-bundle-import "magit-bundle" nil t)
(autoload 'magit-bundle-create-tracked "magit/lisp/magit-bundle" "\
Create and track a new bundle.

(fn FILE TAG BRANCH REFS ARGS)" t)
(autoload 'magit-bundle-update-tracked "magit/lisp/magit-bundle" "\
Update a bundle that is being tracked using TAG.

(fn TAG)" t)
(autoload 'magit-bundle-verify "magit/lisp/magit-bundle" "\
Check whether FILE is valid and applies to the current repository.

(fn FILE)" t)
(autoload 'magit-bundle-list-heads "magit/lisp/magit-bundle" "\
List the refs in FILE.

(fn FILE)" t)
(register-definition-prefixes "magit/lisp/magit-bundle" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-clone.el

 (autoload 'magit-clone "magit-clone" nil t)
(autoload 'magit-clone-regular "magit/lisp/magit-clone" "\
Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-shallow "magit/lisp/magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

(fn REPOSITORY DIRECTORY ARGS DEPTH)" t)
(autoload 'magit-clone-shallow-since "magit/lisp/magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

(fn REPOSITORY DIRECTORY ARGS DATE)" t)
(autoload 'magit-clone-shallow-exclude "magit/lisp/magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t)
(autoload 'magit-clone-bare "magit/lisp/magit-clone" "\
Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-mirror "magit/lisp/magit-clone" "\
Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-sparse "magit/lisp/magit-clone" "\
Clone REPOSITORY into DIRECTORY and create a sparse checkout.

(fn REPOSITORY DIRECTORY ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-clone" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-commit.el

 (autoload 'magit-commit "magit-commit" nil t)
(autoload 'magit-commit-create "magit/lisp/magit-commit" "\
Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

(git commit [--amend] ARGS)

(fn &optional ARGS)" t)
(autoload 'magit-commit-amend "magit/lisp/magit-commit" "\
Amend the last commit.

(git commit --amend ARGS)

(fn &optional ARGS)" t)
(autoload 'magit-commit-extend "magit/lisp/magit-commit" "\
Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
(git commit
--amend --no-edit)

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-reword "magit/lisp/magit-commit" "\
Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

(git commit --amend --only)

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-fixup "magit/lisp/magit-commit" "\
Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-squash "magit/lisp/magit-commit" "\
Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

If you want to immediately add a message to the squash commit,
then use `magit-commit-augment' instead of this command.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-augment "magit/lisp/magit-commit" "\
Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-fixup "magit/lisp/magit-commit" "\
Create a fixup commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-squash "magit/lisp/magit-commit" "\
Create a squash commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-reshelve "magit/lisp/magit-commit" "\
Change the committer date and possibly the author date of `HEAD'.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changed, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

(fn DATE UPDATE-AUTHOR &optional ARGS)" t)
(autoload 'magit-commit-absorb-modules "magit/lisp/magit-commit" "\
Spread modified modules across recent commits.

(fn PHASE COMMIT)" t)
 (autoload 'magit-commit-absorb "magit-commit" nil t)
 (autoload 'magit-commit-autofixup "magit-commit" nil t)
(register-definition-prefixes "magit/lisp/magit-commit" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-diff.el

 (autoload 'magit-diff "magit-diff" nil t)
 (autoload 'magit-diff-refresh "magit-diff" nil t)
(autoload 'magit-diff-dwim "magit/lisp/magit-diff" "\
Show changes for the thing at point.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-range "magit/lisp/magit-diff" "\
Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

(fn REV-OR-RANGE &optional ARGS FILES)" t)
(autoload 'magit-diff-working-tree "magit/lisp/magit-diff" "\
Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-staged "magit/lisp/magit-diff" "\
Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-unstaged "magit/lisp/magit-diff" "\
Show changes between the working tree and the index.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-unmerged "magit/lisp/magit-diff" "\
Show changes that are being merged.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-while-committing "magit/lisp/magit-diff" "\
While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed." t)
(autoload 'magit-diff-buffer-file "magit/lisp/magit-diff" "\
Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differences between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t)
(autoload 'magit-diff-paths "magit/lisp/magit-diff" "\
Show changes between any two files on disk.

(fn A B)" t)
(autoload 'magit-show-commit "magit/lisp/magit-diff" "\
Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

(fn REV &optional ARGS FILES MODULE)" t)
(register-definition-prefixes "magit/lisp/magit-diff" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-ediff.el

 (autoload 'magit-ediff "magit-ediff" nil)
(autoload 'magit-ediff-resolve-all "magit/lisp/magit-ediff" "\
Resolve all conflicts in the FILE at point using Ediff.

If there is no file at point or if it doesn't have any unmerged
changes, then prompt for a file.

See info node `(magit) Ediffing' for more information about this
and alternative commands.

(fn FILE)" t)
(autoload 'magit-ediff-resolve-rest "magit/lisp/magit-ediff" "\
Resolve outstanding conflicts in the FILE at point using Ediff.

If there is no file at point or if it doesn't have any unmerged
changes, then prompt for a file.

See info node `(magit) Ediffing' for more information about this
and alternative commands.

(fn FILE)" t)
(autoload 'magit-ediff-stage "magit/lisp/magit-ediff" "\
Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-compare "magit/lisp/magit-ediff" "\
Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

(fn REVA REVB FILEA FILEB)" t)
(autoload 'magit-ediff-dwim "magit/lisp/magit-ediff" "\
Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t)
(autoload 'magit-ediff-show-staged "magit/lisp/magit-ediff" "\
Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-unstaged "magit/lisp/magit-ediff" "\
Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-working-tree "magit/lisp/magit-ediff" "\
Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-commit "magit/lisp/magit-ediff" "\
Show changes introduced by COMMIT using Ediff.

(fn COMMIT)" t)
(autoload 'magit-ediff-show-stash "magit/lisp/magit-ediff" "\
Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

(fn STASH)" t)
(register-definition-prefixes "magit/lisp/magit-ediff" '("magit-ediff-"))


;;; Generated autoloads from magit/lisp/magit-extras.el

 (autoload 'magit-git-mergetool "magit-extras" nil t)
(autoload 'magit-run-git-gui-blame "magit/lisp/magit-extras" "\
Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

(fn COMMIT FILENAME &optional LINENUM)" t)
(autoload 'magit-run-git-gui "magit/lisp/magit-extras" "\
Run `git gui' for the current git repository." t)
(autoload 'magit-run-gitk "magit/lisp/magit-extras" "\
Run `gitk' in the current repository." t)
(autoload 'magit-run-gitk-branches "magit/lisp/magit-extras" "\
Run `gitk --branches' in the current repository." t)
(autoload 'magit-run-gitk-all "magit/lisp/magit-extras" "\
Run `gitk --all' in the current repository." t)
(autoload 'ido-enter-magit-status "magit/lisp/magit-extras" "\
Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (keymap-set ido-completion-map
                          \"C-x g\" \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (keymap-set ido-common-completion-map
              \"C-x g\" \\='ido-enter-magit-status)" t)
(autoload 'magit-project-status "magit/lisp/magit-extras" "\
Run `magit-status' in the current project's root." t)
(autoload 'magit-dired-jump "magit/lisp/magit-extras" "\
Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

(fn &optional OTHER-WINDOW)" t)
(autoload 'magit-dired-log "magit/lisp/magit-extras" "\
Show log for all marked files, or the current file.

(fn &optional FOLLOW)" t)
(autoload 'magit-dired-am-apply-patches "magit/lisp/magit-extras" "\
In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

(fn REPO &optional ARG)" t)
(autoload 'magit-do-async-shell-command "magit/lisp/magit-extras" "\
Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

(fn FILE)" t)
(autoload 'magit-previous-line "magit/lisp/magit-extras" "\
Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")
(autoload 'magit-next-line "magit/lisp/magit-extras" "\
Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-next-line 'interactive-only 'forward-line)
(autoload 'magit-clean "magit/lisp/magit-extras" "\
Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

(git clean -f -d [-x|-X])

(fn &optional ARG)" t)
(autoload 'magit-generate-changelog "magit/lisp/magit-extras" "\
Insert ChangeLog entries into the current buffer.

The entries are generated from the diff being committed.
If prefix argument, AMENDING, is non-nil, include changes
in HEAD as well as staged changes in the diff to check.

(fn &optional AMENDING)" t)
(autoload 'magit-add-change-log-entry "magit/lisp/magit-extras" "\
Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t)
(autoload 'magit-add-change-log-entry-other-window "magit/lisp/magit-extras" "\
Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME)" t)
(autoload 'magit-edit-line-commit "magit/lisp/magit-extras" "\
Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

(fn &optional TYPE)" t)
(autoload 'magit-diff-edit-hunk-commit "magit/lisp/magit-extras" "\
From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-commit' instead of this command.

(fn FILE)" t)
(autoload 'magit-reshelve-since "magit/lisp/magit-extras" "\
Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

(fn REV KEYID)" t)
(autoload 'magit-pop-revision-stack "magit/lisp/magit-extras" "\
Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g., while composing a commit
message), then that repository is used.  Otherwise (e.g., while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

(fn REV TOPLEVEL)" t)
(autoload 'magit-copy-section-value "magit/lisp/magit-extras" "\
Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

(fn ARG)" t)
(autoload 'magit-copy-buffer-revision "magit/lisp/magit-extras" "\
Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t)
(autoload 'magit-display-repository-buffer "magit/lisp/magit-extras" "\
Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer "magit/lisp/magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-window "magit/lisp/magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-frame "magit/lisp/magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-abort-dwim "magit/lisp/magit-extras" "\
Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t)
(register-definition-prefixes "magit/lisp/magit-extras" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-fetch.el

 (autoload 'magit-fetch "magit-fetch" nil t)
 (autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)
 (autoload 'magit-fetch-from-upstream "magit-fetch" nil t)
(autoload 'magit-fetch-other "magit/lisp/magit-fetch" "\
Fetch from another repository.

(fn REMOTE ARGS)" t)
(autoload 'magit-fetch-branch "magit/lisp/magit-fetch" "\
Fetch a BRANCH from a REMOTE.

(fn REMOTE BRANCH ARGS)" t)
(autoload 'magit-fetch-refspec "magit/lisp/magit-fetch" "\
Fetch a REFSPEC from a REMOTE.

(fn REMOTE REFSPEC ARGS)" t)
(autoload 'magit-fetch-all "magit/lisp/magit-fetch" "\
Fetch from all remotes.

(fn ARGS)" t)
(autoload 'magit-fetch-all-prune "magit/lisp/magit-fetch" "\
Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t)
(autoload 'magit-fetch-all-no-prune "magit/lisp/magit-fetch" "\
Fetch from all remotes." t)
 (autoload 'magit-fetch-modules "magit-fetch" nil t)
(register-definition-prefixes "magit/lisp/magit-fetch" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-files.el

(autoload 'magit-find-file "magit/lisp/magit-files" "\
View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-window "magit/lisp/magit-files" "\
View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-frame "magit/lisp/magit-files" "\
View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
 (autoload 'magit-file-dispatch "magit" nil t)
(autoload 'magit-blob-visit-file "magit/lisp/magit-files" "\
View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t)
(autoload 'magit-file-checkout "magit/lisp/magit-files" "\
Checkout FILE from REV.

(fn REV FILE)" t)
(register-definition-prefixes "magit/lisp/magit-files" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-git.el

(register-definition-prefixes "magit/lisp/magit-git" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-gitignore.el

 (autoload 'magit-gitignore "magit-gitignore" nil t)
(autoload 'magit-gitignore-in-topdir "magit/lisp/magit-gitignore" "\
Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

(fn RULE)" t)
(autoload 'magit-gitignore-in-subdir "magit/lisp/magit-gitignore" "\
Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

(fn RULE DIRECTORY)" t)
(autoload 'magit-gitignore-in-gitdir "magit/lisp/magit-gitignore" "\
Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

(fn RULE)" t)
(autoload 'magit-gitignore-on-system "magit/lisp/magit-gitignore" "\
Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

(fn RULE)" t)
(autoload 'magit-skip-worktree "magit/lisp/magit-gitignore" "\
Call \"git update-index --skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-skip-worktree "magit/lisp/magit-gitignore" "\
Call \"git update-index --no-skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-assume-unchanged "magit/lisp/magit-gitignore" "\
Call \"git update-index --assume-unchanged -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-assume-unchanged "magit/lisp/magit-gitignore" "\
Call \"git update-index --no-assume-unchanged -- FILE\".

(fn FILE)" t)
(register-definition-prefixes "magit/lisp/magit-gitignore" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-libgit.el

(register-definition-prefixes "magit/lisp/magit-libgit" '("magit-libgit-repo"))


;;; Generated autoloads from magit/lisp/magit-log.el

 (autoload 'magit-log "magit-log" nil t)
 (autoload 'magit-log-refresh "magit-log" nil t)
(autoload 'magit-log-current "magit/lisp/magit-log" "\
Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-head "magit/lisp/magit-log" "\
Show log for `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-related "magit/lisp/magit-log" "\
Show log for the current branch, its upstream and its push target.
When the upstream is a local branch, then also show its own
upstream.  When `HEAD' is detached, then show log for that, the
previously checked out branch and its upstream and push-target.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-other "magit/lisp/magit-log" "\
Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-branches "magit/lisp/magit-log" "\
Show log for all local branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-matching-branches "magit/lisp/magit-log" "\
Show log for all branches matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-matching-tags "magit/lisp/magit-log" "\
Show log for all tags matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-all-branches "magit/lisp/magit-log" "\
Show log for all local and remote branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-all "magit/lisp/magit-log" "\
Show log for all references and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-buffer-file "magit/lisp/magit-log" "\
Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

(fn &optional FOLLOW BEG END)" t)
(autoload 'magit-log-trace-definition "magit/lisp/magit-log" "\
Show log for the definition at point.

(fn FILE FN REV)" t)
(autoload 'magit-log-merged "magit/lisp/magit-log" "\
Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\". If COMMIT is
directly on BRANCH, then show approximately
`magit-log-merged-commit-count' surrounding commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

(fn COMMIT BRANCH &optional ARGS FILES)" t)
(autoload 'magit-log-move-to-parent "magit/lisp/magit-log" "\
Move to the Nth parent of the current commit.

(fn &optional N)" t)
 (autoload 'magit-shortlog "magit-log" nil t)
(autoload 'magit-shortlog-since "magit/lisp/magit-log" "\
Show a history summary for commits since REV.

(fn REV ARGS)" t)
(autoload 'magit-shortlog-range "magit/lisp/magit-log" "\
Show a history summary for commit or range REV-OR-RANGE.

(fn REV-OR-RANGE ARGS)" t)
(autoload 'magit-cherry "magit/lisp/magit-log" "\
Show commits in a branch that are not merged in the upstream branch.

(fn HEAD UPSTREAM)" t)
(register-definition-prefixes "magit/lisp/magit-log" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-margin.el

(register-definition-prefixes "magit/lisp/magit-margin" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-merge.el

 (autoload 'magit-merge "magit" nil t)
(autoload 'magit-merge-plain "magit/lisp/magit-merge" "\
Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

(git merge --no-edit|--no-commit [ARGS] REV)

(fn REV &optional ARGS NOCOMMIT)" t)
(autoload 'magit-merge-editmsg "magit/lisp/magit-merge" "\
Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

(git merge --edit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-nocommit "magit/lisp/magit-merge" "\
Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

(git merge --no-commit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-into "magit/lisp/magit-merge" "\
Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-absorb "magit/lisp/magit-merge" "\
Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-squash "magit/lisp/magit-merge" "\
Squash commit REV into the current branch; don't create a commit.

(git merge --squash REV)

(fn REV)" t)
(autoload 'magit-merge-preview "magit/lisp/magit-merge" "\
Preview result of merging REV into the current branch.

(fn REV)" t)
(autoload 'magit-merge-abort "magit/lisp/magit-merge" "\
Abort the current merge operation.

(git merge --abort)" t)
(register-definition-prefixes "magit/lisp/magit-merge" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-mode.el

(autoload 'magit-info "magit/lisp/magit-mode" "\
Visit the Magit manual." t)
(register-definition-prefixes "magit/lisp/magit-mode" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-notes.el

 (autoload 'magit-notes "magit" nil t)
(register-definition-prefixes "magit/lisp/magit-notes" '("magit-notes-"))


;;; Generated autoloads from magit/lisp/magit-patch.el

 (autoload 'magit-patch "magit-patch" nil t)
 (autoload 'magit-patch-create "magit-patch" nil t)
 (autoload 'magit-patch-apply "magit-patch" nil t)
(autoload 'magit-patch-save "magit/lisp/magit-patch" "\
Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

(fn FILE &optional ARG)" t)
(autoload 'magit-request-pull "magit/lisp/magit-patch" "\
Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

(fn URL START END)" t)
(register-definition-prefixes "magit/lisp/magit-patch" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-process.el

(register-definition-prefixes "magit/lisp/magit-process" '("magit-" "tramp-sh-handle-"))


;;; Generated autoloads from magit/lisp/magit-pull.el

 (autoload 'magit-pull "magit-pull" nil t)
 (autoload 'magit-pull-from-pushremote "magit-pull" nil t)
 (autoload 'magit-pull-from-upstream "magit-pull" nil t)
(autoload 'magit-pull-branch "magit/lisp/magit-pull" "\
Pull from a branch read in the minibuffer.

(fn SOURCE ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-pull" '("magit-pull-"))


;;; Generated autoloads from magit/lisp/magit-push.el

 (autoload 'magit-push "magit-push" nil t)
 (autoload 'magit-push-current-to-pushremote "magit-push" nil t)
 (autoload 'magit-push-current-to-upstream "magit-push" nil t)
(autoload 'magit-push-current "magit/lisp/magit-push" "\
Push the current branch to a branch read in the minibuffer.

(fn TARGET ARGS)" t)
(autoload 'magit-push-other "magit/lisp/magit-push" "\
Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

(fn SOURCE TARGET ARGS)" t)
(autoload 'magit-push-refspecs "magit/lisp/magit-push" "\
Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

(fn REMOTE REFSPECS ARGS)" t)
(autoload 'magit-push-matching "magit/lisp/magit-push" "\
Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tags "magit/lisp/magit-push" "\
Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tag "magit/lisp/magit-push" "\
Push a tag to another repository.

(fn TAG REMOTE &optional ARGS)" t)
(autoload 'magit-push-notes-ref "magit/lisp/magit-push" "\
Push a notes ref to another repository.

(fn REF REMOTE &optional ARGS)" t)
 (autoload 'magit-push-implicitly "magit-push" nil t)
 (autoload 'magit-push-to-remote "magit-push" nil t)
(register-definition-prefixes "magit/lisp/magit-push" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-reflog.el

(autoload 'magit-reflog-current "magit/lisp/magit-reflog" "\
Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t)
(autoload 'magit-reflog-other "magit/lisp/magit-reflog" "\
Display the reflog of a branch or another ref.

(fn REF)" t)
(autoload 'magit-reflog-head "magit/lisp/magit-reflog" "\
Display the `HEAD' reflog." t)
(register-definition-prefixes "magit/lisp/magit-reflog" '("magit-reflog-"))


;;; Generated autoloads from magit/lisp/magit-refs.el

 (autoload 'magit-show-refs "magit-refs" nil t)
(autoload 'magit-show-refs-head "magit/lisp/magit-refs" "\
List and compare references in a dedicated buffer.
Compared with `HEAD'.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-current "magit/lisp/magit-refs" "\
List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-other "magit/lisp/magit-refs" "\
List and compare references in a dedicated buffer.
Compared with a branch read from the user.

(fn &optional REF ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-refs" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-remote.el

 (autoload 'magit-remote "magit-remote" nil t)
(autoload 'magit-remote-add "magit/lisp/magit-remote" "\
Add a remote named REMOTE and fetch it.

(fn REMOTE URL &optional ARGS)" t)
(autoload 'magit-remote-rename "magit/lisp/magit-remote" "\
Rename the remote named OLD to NEW.

(fn OLD NEW)" t)
(autoload 'magit-remote-remove "magit/lisp/magit-remote" "\
Delete the remote named REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune "magit/lisp/magit-remote" "\
Remove stale remote-tracking branches for REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune-refspecs "magit/lisp/magit-remote" "\
Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

(fn REMOTE)" t)
(autoload 'magit-remote-set-head "magit/lisp/magit-remote" "\
Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

(fn REMOTE &optional BRANCH)" t)
(autoload 'magit-remote-unset-head "magit/lisp/magit-remote" "\
Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

(fn REMOTE)" t)
 (autoload 'magit-update-default-branch "magit-remote" nil t)
(autoload 'magit-remote-unshallow "magit/lisp/magit-remote" "\
Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

(fn REMOTE)" t)
 (autoload 'magit-remote-configure "magit-remote" nil t)
(register-definition-prefixes "magit/lisp/magit-remote" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-repos.el

(autoload 'magit-list-repositories "magit/lisp/magit-repos" "\
Display a list of repositories.

Use the option `magit-repository-directories' to control which
repositories are displayed." t)
(register-definition-prefixes "magit/lisp/magit-repos" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-reset.el

 (autoload 'magit-reset "magit" nil t)
(autoload 'magit-reset-mixed "magit/lisp/magit-reset" "\
Reset the `HEAD' and index to COMMIT, but not the working tree.

(git reset --mixed COMMIT)

(fn COMMIT)" t)
(autoload 'magit-reset-soft "magit/lisp/magit-reset" "\
Reset the `HEAD' to COMMIT, but not the index and working tree.

(git reset --soft REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-hard "magit/lisp/magit-reset" "\
Reset the `HEAD', index, and working tree to COMMIT.

(git reset --hard REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-keep "magit/lisp/magit-reset" "\
Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

(git reset --keep REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-index "magit/lisp/magit-reset" "\
Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

(git reset COMMIT .)

(fn COMMIT)" t)
(autoload 'magit-reset-worktree "magit/lisp/magit-reset" "\
Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

(fn COMMIT)" t)
(autoload 'magit-reset-quickly "magit/lisp/magit-reset" "\
Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

(git reset --mixed|--hard COMMIT)

(fn COMMIT &optional HARD)" t)
(register-definition-prefixes "magit/lisp/magit-reset" '("magit-reset-"))


;;; Generated autoloads from magit/lisp/magit-section.el

(register-definition-prefixes "magit/lisp/magit-section" '("isearch-clean-overlays@magit-mode" "magit-"))


;;; Generated autoloads from magit/lisp/magit-sequence.el

(autoload 'magit-sequencer-continue "magit/lisp/magit-sequence" "\
Resume the current cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-skip "magit/lisp/magit-sequence" "\
Skip the stopped at commit during a cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-abort "magit/lisp/magit-sequence" "\
Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-cherry-pick "magit-sequence" nil t)
(autoload 'magit-cherry-copy "magit/lisp/magit-sequence" "\
Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-apply "magit/lisp/magit-sequence" "\
Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-harvest "magit/lisp/magit-sequence" "\
Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-donate "magit/lisp/magit-sequence" "\
Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.  `HEAD' is allowed to be detached initially.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-spinout "magit/lisp/magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
(autoload 'magit-cherry-spinoff "magit/lisp/magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
 (autoload 'magit-revert "magit-sequence" nil t)
(autoload 'magit-revert-and-commit "magit/lisp/magit-sequence" "\
Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
(autoload 'magit-revert-no-commit "magit/lisp/magit-sequence" "\
Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
 (autoload 'magit-am "magit-sequence" nil t)
(autoload 'magit-am-apply-patches "magit/lisp/magit-sequence" "\
Apply the patches FILES.

(fn &optional FILES ARGS)" t)
(autoload 'magit-am-apply-maildir "magit/lisp/magit-sequence" "\
Apply the patches from MAILDIR.

(fn &optional MAILDIR ARGS)" t)
(autoload 'magit-am-continue "magit/lisp/magit-sequence" "\
Resume the current patch applying sequence." t)
(autoload 'magit-am-skip "magit/lisp/magit-sequence" "\
Skip the stopped at patch during a patch applying sequence." t)
(autoload 'magit-am-abort "magit/lisp/magit-sequence" "\
Abort the current patch applying sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-rebase "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)
(autoload 'magit-rebase-branch "magit/lisp/magit-sequence" "\
Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

(fn TARGET ARGS)" t)
(autoload 'magit-rebase-subset "magit/lisp/magit-sequence" "\
Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

(fn NEWBASE START ARGS)" t)
(autoload 'magit-rebase-interactive "magit/lisp/magit-sequence" "\
Start an interactive rebase sequence.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-autosquash "magit/lisp/magit-sequence" "\
Combine squash and fixup commits with their intended targets.

(fn ARGS)" t)
(autoload 'magit-rebase-edit-commit "magit/lisp/magit-sequence" "\
Edit a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-reword-commit "magit/lisp/magit-sequence" "\
Reword a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-remove-commit "magit/lisp/magit-sequence" "\
Remove a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-continue "magit/lisp/magit-sequence" "\
Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

(fn &optional NOEDIT)" t)
(autoload 'magit-rebase-skip "magit/lisp/magit-sequence" "\
Skip the current commit and restart the current rebase operation." t)
(autoload 'magit-rebase-edit "magit/lisp/magit-sequence" "\
Edit the todo list of the current rebase operation." t)
(autoload 'magit-rebase-abort "magit/lisp/magit-sequence" "\
Abort the current rebase operation, restoring the original branch." t)
(register-definition-prefixes "magit/lisp/magit-sequence" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-sparse-checkout.el

 (autoload 'magit-sparse-checkout "magit-sparse-checkout" nil t)
(autoload 'magit-sparse-checkout-enable "magit/lisp/magit-sparse-checkout" "\
Convert the working tree to a sparse checkout.

(fn &optional ARGS)" t)
(autoload 'magit-sparse-checkout-set "magit/lisp/magit-sparse-checkout" "\
Restrict working tree to DIRECTORIES.
To extend rather than override the currently configured
directories, call `magit-sparse-checkout-add' instead.

(fn DIRECTORIES)" t)
(autoload 'magit-sparse-checkout-add "magit/lisp/magit-sparse-checkout" "\
Add DIRECTORIES to the working tree.
To override rather than extend the currently configured
directories, call `magit-sparse-checkout-set' instead.

(fn DIRECTORIES)" t)
(autoload 'magit-sparse-checkout-reapply "magit/lisp/magit-sparse-checkout" "\
Reapply the sparse checkout rules to the working tree.
Some operations such as merging or rebasing may need to check out
files that aren't included in the sparse checkout.  Call this
command to reset to the sparse checkout state." t)
(autoload 'magit-sparse-checkout-disable "magit/lisp/magit-sparse-checkout" "\
Convert sparse checkout to full checkout.
Note that disabling the sparse checkout does not clear the
configured directories.  Call `magit-sparse-checkout-enable' to
restore the previous sparse checkout." t)
(register-definition-prefixes "magit/lisp/magit-sparse-checkout" '("magit-sparse-checkout-"))


;;; Generated autoloads from magit/lisp/magit-stash.el

 (autoload 'magit-stash "magit-stash" nil t)
(autoload 'magit-stash-both "magit/lisp/magit-stash" "\
Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-index "magit/lisp/magit-stash" "\
Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

(fn MESSAGE)" t)
(autoload 'magit-stash-worktree "magit/lisp/magit-stash" "\
Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-keep-index "magit/lisp/magit-stash" "\
Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-both "magit/lisp/magit-stash" "\
Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-index "magit/lisp/magit-stash" "\
Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t)
(autoload 'magit-snapshot-worktree "magit/lisp/magit-stash" "\
Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
 (autoload 'magit-stash-push "magit-stash" nil t)
(autoload 'magit-stash-apply "magit/lisp/magit-stash" "\
Apply a stash to the working tree.

First try \"git stash apply --index\", which tries to preserve
the index stored in the stash, if any.  This may fail because
applying the stash could result in conflicts and those have to
be stored in the index, making it impossible to also store the
stash's index there as well.

If the above failed, then try \"git stash apply\".  This fails
(with or without \"--index\") if there are any uncommitted
changes to files that are also modified in the stash.

If both of the above failed, then apply using \"git apply\".
If there are no conflicting files, use \"--3way\".  If there are
conflicting files, then using \"--3way\" requires that those
files are staged first, which may be undesirable, so prompt
the user whether to use \"--3way\" or \"--reject\".

(fn STASH)" t)
(autoload 'magit-stash-pop "magit/lisp/magit-stash" "\
Apply a stash to the working tree, on success remove it from stash list.

First try \"git stash pop --index\", which tries to preserve
the index stored in the stash, if any.  This may fail because
applying the stash could result in conflicts and those have to
be stored in the index, making it impossible to also store the
stash's index there as well.

If the above failed, then try \"git stash apply\".  This fails
(with or without \"--index\") if there are any uncommitted
changes to files that are also modified in the stash.

If both of the above failed, then apply using \"git apply\".
If there are no conflicting files, use \"--3way\".  If there are
conflicting files, then using \"--3way\" requires that those
files are staged first, which may be undesirable, so prompt
the user whether to use \"--3way\" or \"--reject\".

(fn STASH)" t)
(autoload 'magit-stash-drop "magit/lisp/magit-stash" "\
Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

(fn STASH)" t)
(autoload 'magit-stash-clear "magit/lisp/magit-stash" "\
Remove all stashes saved in REF's reflog by deleting REF.

(fn REF)" t)
(autoload 'magit-stash-branch "magit/lisp/magit-stash" "\
Create and checkout a new BRANCH from an existing STASH.
The new branch starts at the commit that was current when the
stash was created.  If the stash applies cleanly, then drop it.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-branch-here "magit/lisp/magit-stash" "\
Create and checkout a new BRANCH from an existing STASH.
Use the current branch or `HEAD' as the starting-point of BRANCH.
Then apply STASH, dropping it if it applies cleanly.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-format-patch "magit/lisp/magit-stash" "\
Create a patch from STASH

(fn STASH)" t)
(autoload 'magit-stash-list "magit/lisp/magit-stash" "\
List all stashes in a buffer." t)
(autoload 'magit-stash-show "magit/lisp/magit-stash" "\
Show all diffs of a stash in a buffer.

(fn STASH &optional ARGS FILES)" t)
(register-definition-prefixes "magit/lisp/magit-stash" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-status.el

(autoload 'magit-init "magit/lisp/magit-status" "\
Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

(fn DIRECTORY)" t)
(autoload 'magit-status "magit/lisp/magit-status" "\
Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)" t)
(defalias 'magit #'magit-status "\
Begin using Magit.

This alias for `magit-status' exists for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")
(autoload 'magit-status-here "magit/lisp/magit-status" "\
Like `magit-status' but with non-nil `magit-status-goto-file-position'." t)
(autoload 'magit-status-quick "magit/lisp/magit-status" "\
Show the status of the current Git repository, maybe without refreshing.

If the status buffer of the current Git repository exists but
isn't being displayed in the selected frame, then display it
without refreshing it.

If the status buffer is being displayed in the selected frame,
then also refresh it.

Prefix arguments have the same meaning as for `magit-status',
and additionally cause the buffer to be refresh.

To use this function instead of `magit-status', add this to your
init file: (global-set-key (kbd \"C-x g\") \\='magit-status-quick)." t)
(autoload 'magit-status-setup-buffer "magit/lisp/magit-status" "\


(fn &optional DIRECTORY)")
(register-definition-prefixes "magit/lisp/magit-status" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-submodule.el

 (autoload 'magit-submodule "magit-submodule" nil t)
 (autoload 'magit-submodule-add "magit-submodule" nil t)
(autoload 'magit-submodule-read-name-for-path "magit/lisp/magit-submodule" "\


(fn PATH &optional PREFER-SHORT)")
 (autoload 'magit-submodule-register "magit-submodule" nil t)
 (autoload 'magit-submodule-populate "magit-submodule" nil t)
 (autoload 'magit-submodule-update "magit-submodule" nil t)
 (autoload 'magit-submodule-synchronize "magit-submodule" nil t)
 (autoload 'magit-submodule-unpopulate "magit-submodule" nil t)
(autoload 'magit-submodule-remove "magit/lisp/magit-submodule" "\
Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

(fn MODULES ARGS TRASH-GITDIRS)" t)
(autoload 'magit-insert-modules "magit/lisp/magit-submodule" "\
Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section.")
(autoload 'magit-insert-modules-overview "magit/lisp/magit-submodule" "\
Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash.")
(autoload 'magit-insert-modules-unpulled-from-upstream "magit/lisp/magit-submodule" "\
Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpulled-from-pushremote "magit/lisp/magit-submodule" "\
Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-upstream "magit/lisp/magit-submodule" "\
Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-pushremote "magit/lisp/magit-submodule" "\
Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-list-submodules "magit/lisp/magit-submodule" "\
Display a list of the current repository's populated submodules." t)
(register-definition-prefixes "magit/lisp/magit-submodule" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-subtree.el

 (autoload 'magit-subtree "magit-subtree" nil t)
 (autoload 'magit-subtree-import "magit-subtree" nil t)
 (autoload 'magit-subtree-export "magit-subtree" nil t)
(autoload 'magit-subtree-add "magit/lisp/magit-subtree" "\
Add REF from REPOSITORY as a new subtree at PREFIX.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-add-commit "magit/lisp/magit-subtree" "\
Add COMMIT as a new subtree at PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-merge "magit/lisp/magit-subtree" "\
Merge COMMIT into the PREFIX subtree.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-pull "magit/lisp/magit-subtree" "\
Pull REF from REPOSITORY into the PREFIX subtree.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-push "magit/lisp/magit-subtree" "\
Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-split "magit/lisp/magit-subtree" "\
Extract the history of the subtree PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-subtree" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-tag.el

 (autoload 'magit-tag "magit" nil t)
(autoload 'magit-tag-create "magit/lisp/magit-tag" "\
Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

(git tag [--annotate] NAME REV)

(fn NAME REV &optional ARGS)" t)
(autoload 'magit-tag-delete "magit/lisp/magit-tag" "\
Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

(git tag -d TAGS)

(fn TAGS)" t)
(autoload 'magit-tag-prune "magit/lisp/magit-tag" "\
Offer to delete tags missing locally from REMOTE, and vice versa.

(fn TAGS REMOTE-TAGS REMOTE)" t)
(autoload 'magit-tag-release "magit/lisp/magit-tag" "\
Create a release tag for `HEAD'.

Assume that release tags match `magit-release-tag-regexp'.

If `HEAD's message matches `magit-release-commit-regexp', then
base the tag on the version string specified by that.  Otherwise
prompt for the name of the new tag using the highest existing
tag as initial input and leaving it to the user to increment the
desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

(fn TAG MSG &optional ARGS)" t)
(register-definition-prefixes "magit/lisp/magit-tag" '("magit-"))


;;; Generated autoloads from magit/test/magit-tests.el

(register-definition-prefixes "magit/test/magit-tests" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-transient.el

(register-definition-prefixes "magit/lisp/magit-transient" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-wip.el

(defvar magit-wip-mode nil "\
Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")
(custom-autoload 'magit-wip-mode "magit/lisp/magit-wip" nil)
(autoload 'magit-wip-mode "magit/lisp/magit-wip" "\
Save uncommitted changes to work-in-progress refs.

Whenever appropriate (i.e., when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'magit-wip-after-save-mode 'globalized-minor-mode t)
(defvar magit-wip-after-save-mode nil "\
Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")
(custom-autoload 'magit-wip-after-save-mode "magit/lisp/magit-wip" nil)
(autoload 'magit-wip-after-save-mode "magit/lisp/magit-wip" "\
Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.

See `magit-wip-after-save-local-mode' for more information on
Magit-Wip-After-Save-Local mode.

(fn &optional ARG)" t)
(defvar magit-wip-after-apply-mode nil "\
Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-after-apply-mode "magit/lisp/magit-wip" nil)
(autoload 'magit-wip-after-apply-mode "magit/lisp/magit-wip" "\
Commit to work-in-progress refs.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-After-Apply mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-after-apply-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar magit-wip-before-change-mode nil "\
Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-before-change-mode "magit/lisp/magit-wip" nil)
(autoload 'magit-wip-before-change-mode "magit/lisp/magit-wip" "\
Commit to work-in-progress refs before certain destructive changes.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-Before-Change mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-before-change-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'magit-wip-commit-initial-backup "magit/lisp/magit-wip" "\
Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository.")
(register-definition-prefixes "magit/lisp/magit-wip" '("magit-"))


;;; Generated autoloads from magit/lisp/magit-worktree.el

 (autoload 'magit-worktree "magit-worktree" nil t)
(autoload 'magit-worktree-checkout "magit/lisp/magit-worktree" "\
Checkout BRANCH in a new worktree at PATH.

(fn PATH BRANCH)" t)
(autoload 'magit-worktree-branch "magit/lisp/magit-worktree" "\
Create a new BRANCH and check it out in a new worktree at PATH.

(fn PATH BRANCH START-POINT &optional FORCE)" t)
(autoload 'magit-worktree-move "magit/lisp/magit-worktree" "\
Move WORKTREE to PATH.

(fn WORKTREE PATH)" t)
(register-definition-prefixes "magit/lisp/magit-worktree" '("magit-"))


;;; Generated autoloads from marginalia/marginalia.el

(defvar marginalia-mode nil "\
Non-nil if Marginalia mode is enabled.
See the `marginalia-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `marginalia-mode'.")
(custom-autoload 'marginalia-mode "marginalia/marginalia" nil)
(autoload 'marginalia-mode "marginalia/marginalia" "\
Annotate completion candidates with richer information.

This is a global minor mode.  If called interactively, toggle the
`Marginalia mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='marginalia-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'marginalia-cycle "marginalia/marginalia" "\
Cycle between annotators in `marginalia-annotator-registry'." t)
(register-definition-prefixes "marginalia/marginalia" '("marginalia-"))


;;; Generated autoloads from markdown-mode/markdown-mode.el

(autoload 'markdown-mode "markdown-mode/markdown-mode" "\
Major mode for editing Markdown files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode/markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

(fn)" t)
(autoload 'markdown-view-mode "markdown-mode/markdown-mode" "\
Major mode for viewing Markdown content.

(fn)" t)
(autoload 'gfm-view-mode "markdown-mode/markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

(fn)" t)
(autoload 'markdown-live-preview-mode "markdown-mode/markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "markdown-mode/markdown-mode" '("defun-markdown-" "gfm-" "markdown"))


;;; Generated autoloads from markdown-mode/tests/markdown-test.el

(register-definition-prefixes "markdown-mode/tests/markdown-test" '("markdown-"))


;;; Generated autoloads from meow/meow-beacon.el

(register-definition-prefixes "meow/meow-beacon" '("meow-"))


;;; Generated autoloads from meow/meow-cheatsheet.el

(register-definition-prefixes "meow/meow-cheatsheet" '("meow-"))


;;; Generated autoloads from meow/meow-cheatsheet-layout.el

(register-definition-prefixes "meow/meow-cheatsheet-layout" '("meow-cheatsheet-"))


;;; Generated autoloads from meow/meow-command.el

(register-definition-prefixes "meow/meow-command" '("meow-"))


;;; Generated autoloads from meow/meow-core.el

(autoload 'meow-mode "meow/meow-core" "\
Meow minor mode.

This minor mode is used by meow-global-mode, should not be enabled directly.

This is a minor mode.  If called interactively, toggle the `Meow
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `meow-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{meow-keymap}

(fn &optional ARG)")
(autoload 'meow-indicator "meow/meow-core" "\
Indicator showing current mode.")
(put 'meow-global-mode 'globalized-minor-mode t)
(defvar meow-global-mode nil "\
Non-nil if Meow-Global mode is enabled.
See the `meow-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `meow-global-mode'.")
(custom-autoload 'meow-global-mode "meow/meow-core" nil)
(autoload 'meow-global-mode "meow/meow-core" "\
Toggle Meow mode in all buffers.
With prefix ARG, enable Meow-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Meow mode is enabled in all buffers where `(lambda nil (unless
(minibufferp) (meow-mode 1)))' would do it.

See `meow-mode' for more information on Meow mode.

(fn &optional ARG)" t)
(register-definition-prefixes "meow/meow-core" '("meow--"))


;;; Generated autoloads from meow/meow-esc.el

(register-definition-prefixes "meow/meow-esc" '("meow-"))


;;; Generated autoloads from meow/meow-face.el

(register-definition-prefixes "meow/meow-face" '("meow--prepare-face"))


;;; Generated autoloads from meow/meow-helpers.el

(autoload 'meow-define-state "meow/meow-helpers" "\
Define a custom meow state.

The state will be called NAME-SYM, and have description
DESCRIPTION. Following these two arguments, pairs of keywords and
values should be passed, similarly to define-minor-mode syntax.

Recognized keywords:
:keymap - the keymap to use for the state
:lighter - the text to display in the mode line while state is active
:face - custom cursor face

The last argument is an optional lisp form that will be run when the minor
mode turns on AND off. If you want to hook into only the turn-on event,
check whether (meow-NAME-SYM-mode) is true.

Example usage:
(meow-define-state mystate
  \"My meow state\"
  :lighter \" [M]\"
  :keymap 'my-keymap
  (message \"toggled state\"))

Also see meow-register-state, which is used internally by this
function, if you want more control over defining your state. This
is more helpful if you already have a keymap and defined minor
mode that you only need to integrate with meow.

This function produces several items:
1. meow-NAME-mode: a minor mode for the state. This is the main entry point.
2. meow-NAME-mode-p: a predicate for whether the state is active.
3. meow-cursor-type-NAME: a variable for the cursor type for the state.
4. meow--update-cursor-NAME: a function that sets the cursor type to 3.
 and face FACE or 'meow-unknown cursor if FACE is nil.

(fn NAME-SYM DESCRIPTION &rest BODY)" nil t)
(function-put 'meow-define-state 'lisp-indent-function 1)
(register-definition-prefixes "meow/meow-helpers" '("meow-"))


;;; Generated autoloads from meow/meow-keymap.el

(register-definition-prefixes "meow/meow-keymap" '("meow-"))


;;; Generated autoloads from meow/meow-keypad.el

(register-definition-prefixes "meow/meow-keypad" '("meow-"))


;;; Generated autoloads from meow/meow-shims.el

(register-definition-prefixes "meow/meow-shims" '("meow--"))


;;; Generated autoloads from meow/meow-thing.el

(register-definition-prefixes "meow/meow-thing" '("meow-"))


;;; Generated autoloads from meow/meow-tutor.el

(register-definition-prefixes "meow/meow-tutor" '("meow-"))


;;; Generated autoloads from meow/meow-util.el

(register-definition-prefixes "meow/meow-util" '("meow-"))


;;; Generated autoloads from meow/meow-var.el

(register-definition-prefixes "meow/meow-var" '("meow-"))


;;; Generated autoloads from meow/meow-visual.el

(register-definition-prefixes "meow/meow-visual" '("meow--"))


;;; Generated autoloads from auctex/multi-prompt.el

(autoload 'multi-prompt "auctex/multi-prompt" "\
Completing prompt for a list of strings.
The first argument SEPARATOR should be the string (of length 1) to
separate the elements in the list.  The second argument UNIQUE should
be non-nil, if each element must be unique.  The remaining elements
are the arguments to `completing-read'.  See that.

(fn SEPARATOR UNIQUE PROMPT TABLE &optional MP-PREDICATE REQUIRE-MATCH INITIAL HISTORY)")
(autoload 'multi-prompt-key-value "auctex/multi-prompt" "\
Read multiple strings, with completion and key=value support.
PROMPT is a string to prompt with, usually ending with a colon
and a space.

TABLE is an alist where each entry is a list.  The first element
of each list is a string representing a key and the optional
second element is a list with strings to be used as values for
the key.  The second element can also be a variable returning a
list of strings.

See the documentation for `completing-read' for details on the
other arguments: PREDICATE, REQUIRE-MATCH, INITIAL-INPUT, HIST,
DEF, and INHERIT-INPUT-METHOD.

The return value is the string as entered in the minibuffer.

(fn PROMPT TABLE &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)")
(register-definition-prefixes "auctex/multi-prompt" '("multi-prompt-"))


;;; Generated autoloads from mwim.el/mwim.el

 (autoload 'mwim-beginning-of-line-or-code "mwim" nil t)
 (autoload 'mwim-beginning-of-code-or-line "mwim" nil t)
 (autoload 'mwim-beginning-of-code-or-line-or-comment "mwim" nil t)
 (autoload 'mwim-end-of-line-or-code "mwim" nil t)
 (autoload 'mwim-end-of-code-or-line "mwim" nil t)
(autoload 'mwim-beginning "mwim.el/mwim" "\
Move point to the next beginning position
Available positions are defined by `mwim-beginning-position-functions'.
See `mwim-move-to-next-position' for details.
Interactively, with prefix argument, move to the previous position.

(fn &optional ARG)" t)
(autoload 'mwim-end "mwim.el/mwim" "\
Move point to the next end position.
Available positions are defined by `mwim-end-position-functions'.
See `mwim-move-to-next-position' for details.
Interactively, with prefix argument, move to the previous position.

(fn &optional ARG)" t)
(autoload 'mwim "mwim.el/mwim" "\
Switch between various positions on the current line.
Available positions are defined by `mwim-position-functions'
variable.
Interactively, with prefix argument, move to the previous position.

(fn &optional ARG)" t)
(register-definition-prefixes "mwim.el/mwim" '("mwim-"))


;;; Generated autoloads from mwim.el/tests/mwim-tests.el

(register-definition-prefixes "mwim.el/tests/mwim-tests" '("mwim-test-"))


;;; Generated autoloads from auctex/tests/tex/navigation.el

(register-definition-prefixes "auctex/tests/tex/navigation" '("TeX-check-f-m-"))


;;; Generated autoloads from nerd-icons.el/nerd-icons.el

(autoload 'nerd-icons-install-fonts "nerd-icons.el/nerd-icons" "\
Helper function to download and install the latests fonts based on OS.
The provided Nerd Font is Symbols Nerd Font Mono.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t)
(autoload 'nerd-icons-insert "nerd-icons.el/nerd-icons" "\
Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When GLYPH-SET is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG GLYPH-SET)" t)
(autoload 'nerd-icons-icon-for-dir "nerd-icons.el/nerd-icons" "\
Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn DIR &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-file "nerd-icons.el/nerd-icons" "\
Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-extension "nerd-icons.el/nerd-icons" "\
Get the formatted icon for EXT.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn EXT &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-mode "nerd-icons.el/nerd-icons" "\
Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-url "nerd-icons.el/nerd-icons" "\
Get the formatted icon for URL.
If an icon for URL isn't found in `nerd-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-buffer "nerd-icons.el/nerd-icons" "\
Get the formatted icon for the current buffer.

This function prioritises the use of the buffers file extension to
discern the icon when its `major-mode' matches its auto mode,
otherwise it will use the buffers `major-mode' to decide its
icon.")
(register-definition-prefixes "nerd-icons.el/nerd-icons" '("nerd-icons-"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-codicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-codicon" '("nerd-icons/codicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-devicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-devicon" '("nerd-icons/devicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-faicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-faicon" '("nerd-icons/faicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-flicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-flicon" '("nerd-icons/flicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-ipsicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-ipsicon" '("nerd-icons/ipsicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-mdicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-mdicon" '("nerd-icons/mdicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-octicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-octicon" '("nerd-icons/octicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-pomicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-pomicon" '("nerd-icons/pomicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-powerline.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-powerline" '("nerd-icons/powerline-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-sucicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-sucicon" '("nerd-icons/sucicon-alist"))


;;; Generated autoloads from nerd-icons.el/data/nerd-icons-data-wicon.el

(register-definition-prefixes "nerd-icons.el/data/nerd-icons-data-wicon" '("nerd-icons/wicon-alist"))


;;; Generated autoloads from nerd-icons-dired/nerd-icons-dired.el

(autoload 'nerd-icons-dired-mode "nerd-icons-dired/nerd-icons-dired" "\
Display nerd-icons icon for each files in a Dired buffer.

This is a minor mode.  If called interactively, toggle the
`Nerd-Icons-Dired mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `nerd-icons-dired-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "nerd-icons-dired/nerd-icons-dired" '("nerd-icons-dired-"))


;;; Generated autoloads from no-littering/no-littering.el

(autoload 'no-littering-expand-etc-file-name "no-littering/no-littering" "\
Expand filename FILE relative to `no-littering-etc-directory'.

(fn FILE)")
(autoload 'no-littering-expand-var-file-name "no-littering/no-littering" "\
Expand filename FILE relative to `no-littering-var-directory'.

(fn FILE)")
(register-definition-prefixes "no-littering/no-littering" '("no-littering-"))


;;; Generated autoloads from nov.el/nov.el

(autoload 'nov-mode "nov.el/nov" "\
Major mode for reading EPUB documents

(fn)" t)
(autoload 'nov-bookmark-jump-handler "nov.el/nov" "\
The bookmark handler-function interface for bookmark BMK.

See also `nov-bookmark-make-record'.

(fn BMK)")
(register-definition-prefixes "nov.el/nov" '("nov-"))


;;; Generated autoloads from nov-xwidget/nov-xwidget.el

(register-definition-prefixes "nov-xwidget/nov-xwidget" '("nov-xwidget-"))


;;; Generated autoloads from orderless/orderless.el

(autoload 'orderless-filter "orderless/orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.

(fn STRING TABLE &optional PRED)")
(autoload 'orderless-all-completions "orderless/orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.  The
matching portions of each candidate are highlighted.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(autoload 'orderless-try-completion "orderless/orderless" "\
Complete STRING to unique matching entry in TABLE.
This uses `orderless-all-completions' to find matches for STRING
in TABLE among entries satisfying PRED.  If there is only one
match, it completes to that match.  If there are no matches, it
returns nil.  In any other case it \"completes\" STRING to
itself, without moving POINT.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions "Completion of multiple components, in any order."))
(autoload 'orderless-ivy-re-builder "orderless/orderless" "\
Convert STR into regexps for use with ivy.
This function is for integration of orderless with ivy, use it as
a value in `ivy-re-builders-alist'.

(fn STR)")
(register-definition-prefixes "orderless/orderless" '("orderless-"))


;;; Generated autoloads from org-appear/org-appear.el

(autoload 'org-appear-mode "org-appear/org-appear" "\
A minor mode that automatically toggles elements in Org mode.

This is a minor mode.  If called interactively, toggle the
`Org-Appear mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-appear-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-appear/org-appear" '("org-appear-"))


;;; Generated autoloads from org-bars/org-bars.el

(register-definition-prefixes "org-bars/org-bars" '("org-bars-"))


;;; Generated autoloads from org-bars/org-bars-tests.el

(register-definition-prefixes "org-bars/org-bars-tests" '("comment"))


;;; Generated autoloads from org-visual-outline/org-dynamic-bullets.el

(autoload 'org-dynamic-bullets-mode "org-visual-outline/org-dynamic-bullets" "\
Display orgmode trees.

This is a minor mode.  If called interactively, toggle the
`Org-Dynamic-Bullets mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-dynamic-bullets-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-visual-outline/org-dynamic-bullets" '("org-dynamic-bullets-"))


;;; Generated autoloads from org-modern/org-modern.el

(autoload 'org-modern-mode "org-modern/org-modern" "\
Modern looks for Org.

This is a minor mode.  If called interactively, toggle the
`Org-Modern mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-modern-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'org-modern-agenda "org-modern/org-modern" "\
Finalize Org agenda highlighting.")
(put 'global-org-modern-mode 'globalized-minor-mode t)
(defvar global-org-modern-mode nil "\
Non-nil if Global Org-Modern mode is enabled.
See the `global-org-modern-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-org-modern-mode'.")
(custom-autoload 'global-org-modern-mode "org-modern/org-modern" nil)
(autoload 'global-org-modern-mode "org-modern/org-modern" "\
Toggle Org-Modern mode in all buffers.
With prefix ARG, enable Global Org-Modern mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Org-Modern mode is enabled in all buffers where `org-modern--on' would
do it.

See `org-modern-mode' for more information on Org-Modern mode.

(fn &optional ARG)" t)
(register-definition-prefixes "org-modern/org-modern" '("org-modern-"))


;;; Generated autoloads from org-modern-indent/org-modern-indent.el

(autoload 'org-modern-indent-mode "org-modern-indent/org-modern-indent" "\
Org-modern-like block brackets within org-indent.

This is a minor mode.  If called interactively, toggle the
`Org-Modern-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-modern-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-modern-indent/org-modern-indent" '("org-modern-indent-"))


;;; Generated autoloads from org-roam/org-roam.el

(autoload 'org-roam-list-files "org-roam/org-roam" "\
Return a list of all Org-roam files under `org-roam-directory'.
See `org-roam-file-p' for how each file is determined to be as
part of Org-Roam.")
(register-definition-prefixes "org-roam/org-roam" '("org-roam-"))


;;; Generated autoloads from org-roam/org-roam-capture.el

(autoload 'org-roam-capture- "org-roam/org-roam-capture" "\
Main entry point of `org-roam-capture' module.
GOTO and KEYS correspond to `org-capture' arguments.
INFO is a plist for filling up Org-roam's capture templates.
NODE is an `org-roam-node' construct containing information about the node.
PROPS is a plist containing additional Org-roam properties for each template.
TEMPLATES is a list of org-roam templates.

(fn &key GOTO KEYS NODE INFO PROPS TEMPLATES)")
(autoload 'org-roam-capture "org-roam/org-roam-capture" "\
Launches an `org-capture' process for a new or existing node.
This uses the templates defined at `org-roam-capture-templates'.
Arguments GOTO and KEYS see `org-capture'.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed along to the underlying `org-roam-capture-'.

(fn &optional GOTO KEYS &key FILTER-FN TEMPLATES INFO)" t)
(register-definition-prefixes "org-roam/org-roam-capture" '("org-roam-capture-"))


;;; Generated autoloads from org-roam/org-roam-compat.el

(register-definition-prefixes "org-roam/org-roam-compat" '("org-roam--"))


;;; Generated autoloads from org-roam/extensions/org-roam-dailies.el

(autoload 'org-roam-dailies-capture-today "org-roam/extensions/org-roam-dailies" "\
Create an entry in the daily-note for today.
When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-today "org-roam/extensions/org-roam-dailies" "\
Find the daily-note for today, creating it if necessary.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-tomorrow "org-roam/extensions/org-roam-dailies" "\
Create an entry in the daily-note for tomorrow.

With numeric argument N, use the daily-note N days in the future.

With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-tomorrow "org-roam/extensions/org-roam-dailies" "\
Find the daily-note for tomorrow, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-yesterday "org-roam/extensions/org-roam-dailies" "\
Create an entry in the daily-note for yesteday.

With numeric argument N, use the daily-note N days in the past.

When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-yesterday "org-roam/extensions/org-roam-dailies" "\
Find the daily-note for yesterday, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-date "org-roam/extensions/org-roam-dailies" "\
Create an entry in the daily-note for a date using the calendar.
Prefer past dates, unless PREFER-FUTURE is non-nil.
With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO PREFER-FUTURE KEYS)" t)
(autoload 'org-roam-dailies-goto-date "org-roam/extensions/org-roam-dailies" "\
Find the daily-note for a date using the calendar, creating it if necessary.
Prefer past dates, unless PREFER-FUTURE is non-nil.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional PREFER-FUTURE KEYS)" t)
(autoload 'org-roam-dailies-find-directory "org-roam/extensions/org-roam-dailies" "\
Find and open `org-roam-dailies-directory'." t)
(register-definition-prefixes "org-roam/extensions/org-roam-dailies" '("org-roam-dailies-"))


;;; Generated autoloads from org-roam/org-roam-db.el

(autoload 'org-roam-db-sync "org-roam/org-roam-db" "\
Synchronize the cache state with the current Org files on-disk.
If FORCE, force a rebuild of the cache from scratch.

(fn &optional FORCE)" t)
(defvar org-roam-db-autosync-mode nil "\
Non-nil if Org-Roam-Db-Autosync mode is enabled.
See the `org-roam-db-autosync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-db-autosync-mode'.")
(custom-autoload 'org-roam-db-autosync-mode "org-roam/org-roam-db" nil)
(autoload 'org-roam-db-autosync-mode "org-roam/org-roam-db" "\
Global minor mode to keep your Org-roam session automatically synchronized.

Through the session this will continue to setup your
buffers (that are Org-roam file visiting), keep track of the
related changes, maintain cache consistency and incrementally
update the currently active database.

If you need to manually trigger resync of the currently active
database, see `org-roam-db-sync' command.

This is a global minor mode.  If called interactively, toggle the
`Org-Roam-Db-Autosync mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-roam-db-autosync-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'org-roam-db-autosync-enable "org-roam/org-roam-db" "\
Activate `org-roam-db-autosync-mode'.")
(register-definition-prefixes "org-roam/org-roam-db" '("emacsql-constraint" "org-roam-d"))


;;; Generated autoloads from org-roam/extensions/org-roam-export.el

(register-definition-prefixes "org-roam/extensions/org-roam-export" '("org-roam-export--org-html--reference"))


;;; Generated autoloads from org-roam/extensions/org-roam-graph.el

(autoload 'org-roam-graph "org-roam/extensions/org-roam-graph" "\
Build and possibly display a graph for NODE.
ARG may be any of the following values:
  - nil       show the graph.
  - `\\[universal-argument]'     show the graph for NODE.
  - `\\[universal-argument]' N   show the graph for NODE limiting nodes to N steps.

(fn &optional ARG NODE)" t)
(register-definition-prefixes "org-roam/extensions/org-roam-graph" '("org-roam-"))


;;; Generated autoloads from org-roam/org-roam-id.el

(autoload 'org-roam-update-org-id-locations "org-roam/org-roam-id" "\
Scan Org-roam files to update `org-id' related state.
This is like `org-id-update-id-locations', but will automatically
use the currently bound `org-directory' and `org-roam-directory'
along with DIRECTORIES (if any), where the lookup for files in
these directories will be always recursive.

Note: Org-roam doesn't have hard dependency on
`org-id-locations-file' to lookup IDs for nodes that are stored
in the database, but it still tries to properly integrates with
`org-id'. This allows the user to cross-reference IDs outside of
the current `org-roam-directory', and also link with \"id:\"
links to headings/files within the current `org-roam-directory'
that are excluded from identification in Org-roam as
`org-roam-node's, e.g. with \"ROAM_EXCLUDE\" property.

(fn &rest DIRECTORIES)" t)
(register-definition-prefixes "org-roam/org-roam-id" '("org-roam-id-"))


;;; Generated autoloads from org-roam/org-roam-log.el

(register-definition-prefixes "org-roam/org-roam-log" '("org-roam-log-"))


;;; Generated autoloads from org-roam/org-roam-migrate.el

(autoload 'org-roam-migrate-wizard "org-roam/org-roam-migrate" "\
Migrate all notes from to be compatible with Org-roam v2.
1. Convert all notes from v1 format to v2.
2. Rebuild the cache.
3. Replace all file links with ID links." t)
(register-definition-prefixes "org-roam/org-roam-migrate" '("org-roam-migrate-"))


;;; Generated autoloads from org-roam/org-roam-mode.el

(autoload 'org-roam-buffer-display-dedicated "org-roam/org-roam-mode" "\
Launch NODE dedicated Org-roam buffer.
Unlike the persistent `org-roam-buffer', the contents of this
buffer won't be automatically changed and will be held in place.

In interactive calls prompt to select NODE, unless called with
`universal-argument', in which case NODE will be set to
`org-roam-node-at-point'.

(fn NODE)" t)
(register-definition-prefixes "org-roam/org-roam-mode" '("org-roam-"))


;;; Generated autoloads from org-roam/org-roam-node.el

(autoload 'org-roam-node-find "org-roam/org-roam-node" "\
Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)

(fn &optional OTHER-WINDOW INITIAL-INPUT FILTER-FN PRED &key TEMPLATES)" t)
(autoload 'org-roam-node-random "org-roam/org-roam-node" "\
Find and open a random Org-roam node.
With prefix argument OTHER-WINDOW, visit the node in another
window instead.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional OTHER-WINDOW FILTER-FN)" t)
(autoload 'org-roam-node-insert "org-roam/org-roam-node" "\
Find an Org-roam node and insert (where the point is) an \"id:\" link to it.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed to the underlying `org-roam-capture-'.

(fn &optional FILTER-FN &key TEMPLATES INFO)" t)
(autoload 'org-roam-refile "org-roam/org-roam-node" "\
Refile node at point to an Org-roam node.
If region is active, then use it instead of the node at point." t)
(autoload 'org-roam-extract-subtree "org-roam/org-roam-node" "\
Convert current subtree at point to a node, and extract it into a new file." t)
(autoload 'org-roam-ref-find "org-roam/org-roam-node" "\
Find and open an Org-roam node that's dedicated to a specific ref.
INITIAL-INPUT is the initial input to the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional INITIAL-INPUT FILTER-FN)" t)
(register-definition-prefixes "org-roam/org-roam-node" '("org-roam-"))


;;; Generated autoloads from org-roam/extensions/org-roam-overlay.el

(register-definition-prefixes "org-roam/extensions/org-roam-overlay" '("org-roam-overlay-"))


;;; Generated autoloads from org-roam/extensions/org-roam-protocol.el

(register-definition-prefixes "org-roam/extensions/org-roam-protocol" '("org-roam-"))


;;; Generated autoloads from org-roam/org-roam-utils.el

(autoload 'org-roam-version "org-roam/org-roam-utils" "\
Return `org-roam' version.
Interactively, or when MESSAGE is non-nil, show in the echo area.

(fn &optional MESSAGE)" t)
(autoload 'org-roam-diagnostics "org-roam/org-roam-utils" "\
Collect and print info for `org-roam' issues." t)
(register-definition-prefixes "org-roam/org-roam-utils" '("org-roam-"))


;;; Generated autoloads from org-visual-outline/org-visual-indent.el

(autoload 'org-visual-indent-mode "org-visual-outline/org-visual-indent" "\
Add vertical lines to `org-indent'.

This is a minor mode.  If called interactively, toggle the
`Org-Visual-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `org-visual-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-visual-outline/org-visual-indent" '("org-visual-indent-"))


;;; Generated autoloads from paren-face/paren-face.el

(autoload 'paren-face-mode "paren-face/paren-face" "\
Use a dedicated face just for parentheses.

This is a minor mode.  If called interactively, toggle the
`Paren-Face mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `paren-face-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'global-paren-face-mode 'globalized-minor-mode t)
(defvar global-paren-face-mode nil "\
Non-nil if Global Paren-Face mode is enabled.
See the `global-paren-face-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-paren-face-mode'.")
(custom-autoload 'global-paren-face-mode "paren-face/paren-face" nil)
(autoload 'global-paren-face-mode "paren-face/paren-face" "\
Toggle Paren-Face mode in all buffers.
With prefix ARG, enable Global Paren-Face mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Paren-Face mode is enabled in all buffers where
`turn-on-paren-face-mode-if-desired' would do it.

See `paren-face-mode' for more information on Paren-Face mode.

(fn &optional ARG)" t)
(register-definition-prefixes "paren-face/paren-face" '("paren-face-" "turn-on-paren-face-mode-if-desired"))


;;; Generated autoloads from pdf-tools/lisp/pdf-annot.el

(autoload 'pdf-annot-minor-mode "pdf-tools/lisp/pdf-annot" "\
Support for PDF Annotations.

\\{pdf-annot-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Annot minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-annot-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-annot" '("pdf-annot-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-cache.el

(register-definition-prefixes "pdf-tools/lisp/pdf-cache" '("boundingbox" "define-pdf-cache-function" "page" "pdf-cache-" "textregions"))


;;; Generated autoloads from pdf-tools/lisp/pdf-dev.el

(register-definition-prefixes "pdf-tools/lisp/pdf-dev" '("pdf-dev-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-history.el

(autoload 'pdf-history-minor-mode "pdf-tools/lisp/pdf-history" "\
Keep a history of previously visited pages.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-History minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-history-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-history" '("pdf-history-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-info.el

(register-definition-prefixes "pdf-tools/lisp/pdf-info" '("pdf-info-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-isearch.el

(autoload 'pdf-isearch-minor-mode "pdf-tools/lisp/pdf-isearch" "\
Isearch mode for PDF buffer.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Isearch minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-isearch-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-isearch" '("pdf-isearch-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-links.el

(autoload 'pdf-links-minor-mode "pdf-tools/lisp/pdf-links" "\
Handle links in PDF documents.\\<pdf-links-minor-mode-map>

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Links minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-links-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-links-action-perform "pdf-tools/lisp/pdf-links" "\
Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

(fn LINK)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-links" '("pdf-links-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-loader.el

(autoload 'pdf-loader-install "pdf-tools/lisp/pdf-loader" "\
Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)")
(register-definition-prefixes "pdf-tools/lisp/pdf-loader" '("pdf-loader--"))


;;; Generated autoloads from pdf-tools/lisp/pdf-macs.el

(register-definition-prefixes "pdf-tools/lisp/pdf-macs" '("pdf-view-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-misc.el

(autoload 'pdf-misc-minor-mode "pdf-tools/lisp/pdf-misc" "\
FIXME:  Not documented.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-size-indication-minor-mode "pdf-tools/lisp/pdf-misc" "\
Provide a working size indication in the mode-line.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Size-Indication minor mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-size-indication-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-menu-bar-minor-mode "pdf-tools/lisp/pdf-misc" "\
Display a PDF Tools menu in the menu-bar.

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Menu-Bar minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-menu-bar-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-misc-context-menu-minor-mode "pdf-tools/lisp/pdf-misc" "\
Provide a right-click context menu in PDF buffers.

\\{pdf-misc-context-menu-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Misc-Context-Menu minor mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-misc-context-menu-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-misc" '("pdf-misc-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-occur.el

(autoload 'pdf-occur "pdf-tools/lisp/pdf-occur" "\
List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

(fn STRING &optional REGEXP-P)" t)
(autoload 'pdf-occur-multi-command "pdf-tools/lisp/pdf-occur" "\
Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t)
(defvar pdf-occur-global-minor-mode nil "\
Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")
(custom-autoload 'pdf-occur-global-minor-mode "pdf-tools/lisp/pdf-occur" nil)
(autoload 'pdf-occur-global-minor-mode "pdf-tools/lisp/pdf-occur" "\
Enable integration of Pdf Occur with other modes.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Pdf-Occur-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-occur-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-occur-ibuffer-minor-mode "pdf-tools/lisp/pdf-occur" "\
Hack into ibuffer's do-occur binding.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Ibuffer minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-ibuffer-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-occur-dired-minor-mode "pdf-tools/lisp/pdf-occur" "\
Hack into dired's `dired-do-search' binding.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

This is a minor mode.  If called interactively, toggle the
`Pdf-Occur-Dired minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-occur-dired-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-occur" '("pdf-occur-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-outline.el

(autoload 'pdf-outline-minor-mode "pdf-tools/lisp/pdf-outline" "\
Display an outline of a PDF document.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

This is a minor mode.  If called interactively, toggle the
`Pdf-Outline minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-outline-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-outline "pdf-tools/lisp/pdf-outline" "\
Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

(fn &optional BUFFER NO-SELECT-WINDOW-P)" t)
(autoload 'pdf-outline-imenu-enable "pdf-tools/lisp/pdf-outline" "\
Enable imenu in the current PDF buffer." t)
(register-definition-prefixes "pdf-tools/lisp/pdf-outline" '("pdf-outline"))


;;; Generated autoloads from pdf-tools/lisp/pdf-sync.el

(autoload 'pdf-sync-minor-mode "pdf-tools/lisp/pdf-sync" "\
Correlate a PDF position with the TeX file.

\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to `synctex' (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will
open the corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

This is a minor mode.  If called interactively, toggle the
`Pdf-Sync minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `pdf-sync-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-sync" '("pdf-sync-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-tools.el

(defvar pdf-tools-handle-upgrades t "\
Whether PDF Tools should handle upgrading itself.")
(custom-autoload 'pdf-tools-handle-upgrades "pdf-tools/lisp/pdf-tools" t)
(autoload 'pdf-tools-install "pdf-tools/lisp/pdf-tools" "\
Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t)
(autoload 'pdf-tools-enable-minor-modes "pdf-tools/lisp/pdf-tools" "\
Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

(fn &optional MODES)" t)
(autoload 'pdf-tools-help "pdf-tools/lisp/pdf-tools" "\
Show a Help buffer for `pdf-tools'." t)
(register-definition-prefixes "pdf-tools/lisp/pdf-tools" '("pdf-tools-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-util.el

(register-definition-prefixes "pdf-tools/lisp/pdf-util" '("display-buffer-split-below-and-attach" "pdf-util-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-view.el

(autoload 'pdf-view-bookmark-jump-handler "pdf-tools/lisp/pdf-view" "\
The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

(fn BMK)")
(register-definition-prefixes "pdf-tools/lisp/pdf-view" '("cua-copy-region--pdf-view-advice" "pdf-view-"))


;;; Generated autoloads from pdf-tools/lisp/pdf-virtual.el

(autoload 'pdf-virtual-edit-mode "pdf-tools/lisp/pdf-virtual" "\
Major mode when editing a virtual PDF buffer.

(fn)" t)
(autoload 'pdf-virtual-view-mode "pdf-tools/lisp/pdf-virtual" "\
Major mode in virtual PDF buffers.

(fn)" t)
(defvar pdf-virtual-global-minor-mode nil "\
Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")
(custom-autoload 'pdf-virtual-global-minor-mode "pdf-tools/lisp/pdf-virtual" nil)
(autoload 'pdf-virtual-global-minor-mode "pdf-tools/lisp/pdf-virtual" "\
Enable recognition and handling of VPDF files.

This is a global minor mode.  If called interactively, toggle the
`Pdf-Virtual-Global minor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pdf-virtual-global-minor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'pdf-virtual-buffer-create "pdf-tools/lisp/pdf-virtual" "\


(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t)
(register-definition-prefixes "pdf-tools/lisp/pdf-virtual" '("pdf-virtual-"))


;;; Generated autoloads from pdf-tools/test/pdf-virtual-test.el

(register-definition-prefixes "pdf-tools/test/pdf-virtual-test" '("pdf-virtual-test-document" "with-pdf-virtual-test-"))


;;; Generated autoloads from pfuture/pfuture.el

(autoload 'pfuture-new "pfuture/pfuture" "\
Create a new future process for command CMD.
Any arguments after the command are interpreted as arguments to the command.
This will return a process object with additional \\='stderr and \\='stdout
properties, which can be read via (process-get process \\='stdout) and
(process-get process \\='stderr) or alternatively with
(pfuture-result process) or (pfuture-stderr process).

Note that CMD must be a *sequence* of strings, meaning
this is wrong: (pfuture-new \"git status\")
this is right: (pfuture-new \"git\" \"status\")

(fn &rest CMD)")
(register-definition-prefixes "pfuture/pfuture" '("pfuture-"))


;;; Generated autoloads from auctex/plain-tex.el

(autoload 'TeX-plain-tex-mode "auctex/plain-tex" "\
Major mode in AUCTeX for editing plain TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{plain-TeX-mode-map}

Entering `plain-tex-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `plain-TeX-mode-hook'." t)
(autoload 'ams-tex-mode "auctex/plain-tex" "\
Major mode in AUCTeX for editing AmS-TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{AmSTeX-mode-map}

Entering `ams-tex-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `AmS-TeX-mode-hook'." t)
(register-definition-prefixes "auctex/plain-tex" '("AmS" "plain-TeX-"))


;;; Generated autoloads from posframe/posframe.el

(autoload 'posframe-workable-p "posframe/posframe" "\
Test posframe workable status.")
(autoload 'posframe-show "posframe/posframe" "\
Pop up a posframe to show STRING at POSITION.

 (1) POSITION

POSITION can be:
1. An integer, meaning point position.
2. A cons of two integers, meaning absolute X and Y coordinates.
3. Other type, in which case the corresponding POSHANDLER should be
   provided.

 (2) POSHANDLER

POSHANDLER is a function of one argument returning an actual
position.  Its argument is a plist of the following form:

  (:position xxx
   :poshandler xxx
   :font-height xxx
   :font-width xxx
   :posframe xxx
   :posframe-width xxx
   :posframe-height xxx
   :posframe-buffer xxx
   :parent-frame xxx
   :parent-window-start xxx
   :parent-window-end xxx
   :parent-window-left xxx
   :parent-window-top xxx
   :parent-frame-width xxx
   :parent-frame-height xxx
   :parent-window xxx
   :parent-window-width  xxx
   :parent-window-height xxx
   :mouse-x xxx
   ;mouse-y xxx
   :minibuffer-height xxx
   :mode-line-height  xxx
   :header-line-height xxx
   :tab-line-height xxx
   :x-pixel-offset xxx
   :y-pixel-offset xxx)

By default, poshandler is auto-selected based on the type of POSITION,
but the selection can be overridden using the POSHANDLER argument.

The builtin poshandler functions are listed below:

1.  `posframe-poshandler-frame-center'
2.  `posframe-poshandler-frame-top-center'
3.  `posframe-poshandler-frame-top-left-corner'
4.  `posframe-poshandler-frame-top-right-corner'
5.  `posframe-poshandler-frame-top-left-or-right-other-corner'
6.  `posframe-poshandler-frame-bottom-center'
7.  `posframe-poshandler-frame-bottom-left-corner'
8.  `posframe-poshandler-frame-bottom-right-corner'
9.  `posframe-poshandler-window-center'
10.  `posframe-poshandler-window-top-center'
11. `posframe-poshandler-window-top-left-corner'
12. `posframe-poshandler-window-top-right-corner'
13. `posframe-poshandler-window-bottom-center'
14. `posframe-poshandler-window-bottom-left-corner'
15. `posframe-poshandler-window-bottom-right-corner'
16. `posframe-poshandler-point-top-left-corner'
17. `posframe-poshandler-point-bottom-left-corner'
18. `posframe-poshandler-point-bottom-left-corner-upward'
19. `posframe-poshandler-point-window-center'
20. `posframe-poshandler-point-frame-center'

 (3) POSHANDLER-EXTRA-INFO

POSHANDLER-EXTRA-INFO is a plist, which will prepend to the
argument of poshandler function: `info', it will *OVERRIDE* the
exist key in `info'.

 (4) BUFFER-OR-NAME

This posframe's buffer is BUFFER-OR-NAME, which can be a buffer
or a name of a (possibly nonexistent) buffer.

buffer name can prefix with space, for example \" *mybuffer*\", so
the buffer name will hide for ibuffer and `list-buffers'.

 (5) NO-PROPERTIES

If NO-PROPERTIES is non-nil, The STRING's properties will
be removed before being shown in posframe.

 (6) HEIGHT, MAX-HEIGHT, MIN-HEIGHT, WIDTH, MAX-WIDTH and MIN-WIDTH

These arguments are specified in the canonical character width
and height of posframe, more details can be found in docstring of
function `fit-frame-to-buffer',

 (7) LEFT-FRINGE and RIGHT-FRINGE

If LEFT-FRINGE or RIGHT-FRINGE is a number, left fringe or
right fringe with be shown with the specified width.

 (8) BORDER-WIDTH, BORDER-COLOR, INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR

By default, posframe shows no borders, but users can specify
borders by setting BORDER-WIDTH to a positive number.  Border
color can be specified by BORDER-COLOR.

INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR are same as
BORDER-WIDTH and BORDER-COLOR, but do not suggest to use for the
reason:

   Add distinct controls for child frames' borders (Bug#45620)
   http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=ff7b1a133bfa7f2614650f8551824ffaef13fadc

 (9) FONT, FOREGROUND-COLOR and BACKGROUND-COLOR

Posframe's font as well as foreground and background colors are
derived from the current frame by default, but can be overridden
using the FONT, FOREGROUND-COLOR and BACKGROUND-COLOR arguments,
respectively.

 (10) CURSOR and WINDOW-POINT

By default, cursor is not showed in posframe, user can let cursor
showed with this argument help by set its value to a `cursor-type'.

When cursor need to be showed in posframe, user may need to set
WINDOW-POINT to the point of BUFFER, which can let cursor showed
at this point.

 (11) RESPECT-HEADER-LINE and RESPECT-MODE-LINE

By default, posframe will display no header-line, mode-line and
tab-line.  In case a header-line, mode-line or tab-line is
desired, users can set RESPECT-HEADER-LINE and RESPECT-MODE-LINE
to t.

 (12) INITIALIZE

INITIALIZE is a function with no argument.  It will run when
posframe buffer is first selected with `with-current-buffer'
in `posframe-show', and only run once (for performance reasons).

 (13) LINES-TRUNCATE

If LINES-TRUNCATE is non-nil, then lines will truncate in the
posframe instead of wrap.

 (14) OVERRIDE-PARAMETERS

OVERRIDE-PARAMETERS is very powful, *all* the valid frame parameters
used by posframe's frame can be overridden by it.

NOTE: some `posframe-show' arguments are not frame parameters, so they
can not be overrided by this argument.

 (15) TIMEOUT

TIMEOUT can specify the number of seconds after which the posframe
will auto-hide.

 (15) REFRESH

If REFRESH is a number, posframe's frame-size will be re-adjusted
every REFRESH seconds.

 (17) ACCEPT-FOCUS

When ACCEPT-FOCUS is non-nil, posframe will accept focus.
be careful, you may face some bugs when set it to non-nil.

 (18) HIDEHANDLER

HIDEHANDLER is a function, when it return t, posframe will be
hide, this function has a plist argument:

  (:posframe-buffer xxx
   :posframe-parent-buffer xxx)

The builtin hidehandler functions are listed below:

1. `posframe-hidehandler-when-buffer-switch'

 (19) REFPOSHANDLER

REFPOSHANDLER is a function, a reference position (most is
top-left of current frame) will be returned when call this
function.

when it is nil or it return nil, child-frame feature will be used
and reference position will be deal with in Emacs.

The user case I know at the moment is let ivy-posframe work well
in EXWM environment (let posframe show on the other application
window).

         DO NOT USE UNLESS NECESSARY!!!

An example parent frame poshandler function is:

1. `posframe-refposhandler-xwininfo'

 (19) Others

You can use `posframe-delete-all' to delete all posframes.

(fn BUFFER-OR-NAME &key STRING POSITION POSHANDLER POSHANDLER-EXTRA-INFO WIDTH HEIGHT MAX-WIDTH MAX-HEIGHT MIN-WIDTH MIN-HEIGHT X-PIXEL-OFFSET Y-PIXEL-OFFSET LEFT-FRINGE RIGHT-FRINGE BORDER-WIDTH BORDER-COLOR INTERNAL-BORDER-WIDTH INTERNAL-BORDER-COLOR FONT CURSOR WINDOW-POINT FOREGROUND-COLOR BACKGROUND-COLOR RESPECT-HEADER-LINE RESPECT-MODE-LINE INITIALIZE NO-PROPERTIES KEEP-RATIO LINES-TRUNCATE OVERRIDE-PARAMETERS TIMEOUT REFRESH ACCEPT-FOCUS HIDEHANDLER REFPOSHANDLER &allow-other-keys)")
(autoload 'posframe-hide-all "posframe/posframe" "\
Hide all posframe frames." t)
(autoload 'posframe-delete-all "posframe/posframe" "\
Delete all posframe frames and buffers." t)
(register-definition-prefixes "posframe/posframe" '("posframe-"))


;;; Generated autoloads from posframe/posframe-benchmark.el

(autoload 'posframe-benchmark "posframe/posframe-benchmark" "\
Benchmark tool for posframe." t)
(register-definition-prefixes "posframe/posframe-benchmark" '("posframe-benchmark-alist"))


;;; Generated autoloads from auctex/preview.el

(autoload 'desktop-buffer-preview "auctex/preview" "\
Hook function for restoring persistent previews into a buffer.

(fn FILE-NAME BUFFER-NAME MISC)")
(add-to-list 'desktop-buffer-mode-handlers '(latex-mode . desktop-buffer-preview))
(autoload 'preview-install-styles "auctex/preview" "\
Installs the TeX style files into a permanent location.
This must be in the TeX search path.  If FORCE-OVERWRITE is greater
than 1, files will get overwritten without query, if it is less
than 1 or nil, the operation will fail.  The default of 1 for interactive
use will query.

Similarly FORCE-SAVE can be used for saving
`preview-TeX-style-dir' to record the fact that the uninstalled
files are no longer needed in the search path.

(fn DIR &optional FORCE-OVERWRITE FORCE-SAVE)" t)
(autoload 'LaTeX-preview-setup "auctex/preview" "\
Hook function for embedding the preview package into AUCTeX.
This is called by `LaTeX-mode-hook' and changes AUCTeX variables
to add the preview functionality.")
(autoload 'preview-report-bug "auctex/preview" "\
Report a bug in the preview-latex package." t)
(register-definition-prefixes "auctex/preview" '("TeX-" "desktop-buffer-preview-misc-data" "preview-"))


;;; Generated autoloads from puni/puni.el

(autoload 'puni-delete-active-region "puni/puni" "\
Delete active region.
When this will cause unbalanced state, ask the user to confirm,
unless `puni-confirm-when-delete-unbalanced-active-region' is
nil." t)
(autoload 'puni-kill-region "puni/puni" "\
Kill text between point and mark.
When this will cause unbalanced state, ask the user to confirm,
unless `puni-confirm-when-delete-unbalanced-active-region'.

When `rectangle-mark-mode' is enabled, kill the marked
rectangular region instead." t)
(autoload 'puni-kill-active-region "puni/puni" "\
Kill active region.
When this will cause unbalanced state, ask the user to confirm,
unless `puni-confirm-when-delete-unbalanced-active-region' is
nil.

When `rectangle-mark-mode' is enabled, kill the marked
rectangular region instead." t)
(autoload 'puni-backward-delete-char "puni/puni" "\
Delete char backward while keeping expressions balanced.
With prefix argument N, kill that many chars.  Negative argument
means kill chars forward.

Pressing \\[universal-argument] one or more times without
entering a number would force this command to delete 1 char
backward, even if this breaks the balance.

This respects the variable `delete-active-region'.

(fn &optional N)" t)
(autoload 'puni-forward-delete-char "puni/puni" "\
Delete char forward while keeping expressions balanced.
With prefix argument N, kill that many chars.  Negative argument
means kill chars backward.

Pressing \\[universal-argument] one or more times without
entering a number would force this command to delete 1 char
forward, even if this breaks the balance.

This respects the variable `delete-active-region'.

(fn &optional N)" t)
(autoload 'puni-forward-kill-word "puni/puni" "\
Kill word forward while keeping expressions balanced.
With prefix argument N, kill that many words.  Negative argument
means kill words backward.

(fn &optional N)" t)
(autoload 'puni-backward-kill-word "puni/puni" "\
Kill word backward while keeping expressions balanced.
With prefix argument N, kill that many words.  Negative argument
means kill words forward.

(fn &optional N)" t)
(autoload 'puni-kill-line "puni/puni" "\
Kill a line forward while keeping expressions balanced.
With prefix argument N, kill that many lines.  Negative argument
means kill lines backward.

This respects the variable `kill-whole-line'.

(fn &optional N)" t)
(autoload 'puni-backward-kill-line "puni/puni" "\
Kill a line backward while keeping expressions balanced.
With prefix argument N, kill that many lines.  Negative argument
means kill lines forward.

This respects the variable `kill-whole-line'.

(fn &optional N)" t)
(autoload 'puni-force-delete "puni/puni" "\
Force delete backward char, or the active region.
Can be used to fight with undesired behavior of structural
editing." t)
(autoload 'puni-forward-sexp "puni/puni" "\
Go forward a sexp.
This is the same as `puni-strict-forward-sexp', except that it
jumps forward consecutive single-line comments.

With prefix argument N, go forward that many sexps.  Negative
argument means go backward.

(fn &optional N)" t)
(autoload 'puni-backward-sexp "puni/puni" "\
Go backward a sexp.
This is the same as `puni-strict-backward-sexp', except that it
jumps backward consecutive single-line comments.

With prefix argument N, go backward that many sexps.  Negative
argument means go forward.

(fn &optional N)" t)
(autoload 'puni-forward-sexp-or-up-list "puni/puni" "\
Go forward a sexp, or an ending delimiter if there's no sexp forward.
With prefix argument N, do this that many times.  Negative
argument means go backward.

(fn &optional N)" t)
(autoload 'puni-backward-sexp-or-up-list "puni/puni" "\
Go backward a sexp, or a starting delimiter if there's no sexp backward.
With prefix argument N, do this that many times.  Negative
argument means go forward.

(fn &optional N)" t)
(autoload 'puni-beginning-of-sexp "puni/puni" "\
Go to the beginning of current sexp.
This means go to the point after the opening delimiter.  If this
is called from there, then go to the point before the delimiter,
so consecutive calling this can take you all the way across
opening delimiters.

If it goes to the beginning of the buffer (likely to happen when
called by accident in the top scope), set a mark at where we
begin so we can pop back to it." t)
(autoload 'puni-end-of-sexp "puni/puni" "\
Go to the end of current sexp.
This means go to the point before the closing delimiter.  If this
is called from there, then go to the point after the delimiter,
so consecutive calling this can take you all the way across
closing delimiters.

If it goes to the end of the buffer (likely to happen when called
by accident in the top scope), set a mark at where we begin so we
can pop back to it." t)
(autoload 'puni-syntactic-forward-punct "puni/puni" "\
Jump to next punctuation syntactically.
This means:

- When the point is outside of strings or comments, jump over
  strings/comments/symbols.
- When there are consecutive same chars, go to the last one
  unless they have parentheses syntax.

This command is designed to give you a \"syntactical navigating\"
feeling." t)
(autoload 'puni-syntactic-backward-punct "puni/puni" "\
Jump to previous punctuation syntactically.
This means:

- When the point is outside of strings or comments, jump over
  strings/comments/symbols.
- When there are consecutive same chars, go to the last one
  unless they have parentheses syntax.

This command is designed to give you a \"syntactical navigating\"
feeling." t)
(autoload 'puni-mark-sexp-at-point "puni/puni" "\
Mark the sexp at or after point." t)
(autoload 'puni-mark-list-around-point "puni/puni" "\
Mark the list around point.
The list around point is the part inside the sexp around point,
i.e., after its opening delimiter, and before its closing
delimiter.  If the point is already at the top scope, then the
whole buffer is the list around point." t)
(autoload 'puni-mark-sexp-around-point "puni/puni" "\
Mark the sexp around point." t)
(autoload 'puni-expand-region "puni/puni" "\
Expand selected region by semantic units." t)
(autoload 'puni-squeeze "puni/puni" "\
Copy the list around point, and delete the sexp around point.
This can be used to \"rewrap\" a sexp.  You could squeeze it
first, type in the new delimiters, and then yank inside them.

When there's an active balanced region, copy it and delete the
sexp around it." t)
(autoload 'puni-slurp-forward "puni/puni" "\
Move the closing delimiter of sexp around point forward one sexp.
With positive prefix argument N, slurp that many sexps.

This also works for consecutive opening delimiters after current
list, e.g.,

     ((|foo)) bar ;; Call `puni-slurp-backward'
  => ((|foo bar))

(fn &optional N)" t)
(autoload 'puni-barf-forward "puni/puni" "\
Move the closing delimiter of sexp around point backward one sexp.
With positive prefix argument N, barf that many sexps.

(fn &optional N)" t)
(autoload 'puni-slurp-backward "puni/puni" "\
Move the opening delimiter of sexp around point backward one sexp.
With positive prefix argument N, slurp that many sexps.

This also works for consecutive opening delimiters before current
list, e.g.,

     foo ((|bar)) ;; Call `puni-slurp-backward'
  => ((foo |bar))

(fn &optional N)" t)
(autoload 'puni-barf-backward "puni/puni" "\
Move the opening delimiter of sexp around point forward one sexp.
With positive prefix argument N, barf that many sexps.

(fn &optional N)" t)
(autoload 'puni-splice "puni/puni" "\
Remove the delimiters of sexp around point." t)
(autoload 'puni-splice-killing-backward "puni/puni" "\
Kill all sexps before point in the current list, then splice it.
Splicing is done by removing the delimiters of the list." t)
(autoload 'puni-splice-killing-forward "puni/puni" "\
Kill all sexps after point in the current list, then splice it.
Splicing is done by removing the delimiters of the list." t)
(autoload 'puni-split "puni/puni" "\
Split the list around point into two sexps." t)
(autoload 'puni-raise "puni/puni" "\
Replace the sexp around point with sexp at or after point.
If there's an active balanced region, replace the sexp around it
with it." t)
(autoload 'puni-transpose "puni/puni" "\
Swap the sexp before and after point." t)
(autoload 'puni-convolute "puni/puni" "\
Exchange the order of application of two closest outer forms." t)
(autoload 'puni-wrap-next-sexps "puni/puni" "\
Wrap next N S-expressions with BEG-DELIM and END-DELIM.
- If N is a positive integer, wrap N sexps after the point.
- If N is `to-end', wrap sexps from the point to the end of
  current list.
- If N is a negative integer, wrap N sexps before the point.
- If N is `to-beg', wrap sexps from the point to the beginning of
  current list.
- If N is `region', and there's an active region, wrap the region
  instead, otherwise throw an error.

(fn N BEG-DELIM END-DELIM)")
(autoload 'puni-wrap-round "puni/puni" "\
Wrap the following S-expression with parentheses.
If a ‘C-u’ prefix argument is given, wrap all S-expressions
following the point until the end of the buffer or of the
enclosing list.  If a numeric prefix argument N is given, wrap N
S-expressions.  Automatically indent the newly wrapped
S-expression.

(fn &optional N)" t)
(autoload 'puni-wrap-square "puni/puni" "\
Wrap the following S-expression with square brackets.
If a ‘C-u’ prefix argument is given, wrap all S-expressions
following the point until the end of the buffer or of the
enclosing list.  If a numeric prefix argument N is given, wrap N
S-expressions.  Automatically indent the newly wrapped
S-expression.

(fn &optional N)" t)
(autoload 'puni-wrap-curly "puni/puni" "\
Wrap the following S-expression with curly brackets.
If a ‘C-u’ prefix argument is given, wrap all S-expressions
following the point until the end of the buffer or of the
enclosing list.  If a numeric prefix argument N is given, wrap N
S-expressions.  Automatically indent the newly wrapped
S-expression.

(fn &optional N)" t)
(autoload 'puni-wrap-angle "puni/puni" "\
Wrap the following S-expression with angle brackets.
If a ‘C-u’ prefix argument is given, wrap all S-expressions
following the point until the end of the buffer or of the
enclosing list.  If a numeric prefix argument N is given, wrap N
S-expressions.  Automatically indent the newly wrapped
S-expression.

(fn &optional N)" t)
(defvar puni-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "DEL") 'puni-backward-delete-char) (define-key map (kbd "C-d") 'puni-forward-delete-char) (define-key map (kbd "M-d") 'puni-forward-kill-word) (define-key map (kbd "M-DEL") 'puni-backward-kill-word) (define-key map (kbd "C-k") 'puni-kill-line) (define-key map (kbd "C-S-k") 'puni-backward-kill-line) (define-key map (kbd "C-c DEL") 'puni-force-delete) (define-key map (kbd "C-w") 'puni-kill-region) (define-key map (kbd "C-M-f") 'puni-forward-sexp) (define-key map (kbd "C-M-b") 'puni-backward-sexp) (define-key map (kbd "C-M-a") 'puni-beginning-of-sexp) (define-key map (kbd "C-M-e") 'puni-end-of-sexp) (define-key map (kbd "M-(") 'puni-syntactic-backward-punct) (define-key map (kbd "M-)") 'puni-syntactic-forward-punct) map) "\
Keymap used for `puni-mode'.")
(define-minor-mode puni-mode "Enable keybindings for Puni commands." :keymap puni-mode-map)
(define-globalized-minor-mode puni-global-mode puni-mode (lambda nil (puni-mode 1)))
(autoload 'puni-disable-puni-mode "puni/puni" "\
Disable Puni mode in current buffer.")
(register-definition-prefixes "puni/puni" '("puni-"))


;;; Generated autoloads from pyim/pyim.el

(defvar pyim-title "PYIM ")
(register-input-method "pyim" "UTF-8" #'pyim-activate pyim-title "")
(autoload 'pyim-activate "pyim/pyim" "\
pyim 启动函数.

pyim 是使用 `pyim-activate' 来启动输入法，这个命令主要做如下工作：
1. 重置所有的 local 变量。
2. 创建汉字到拼音和拼音到汉字的 hash table。
3. 创建词库缓存 dcache.
4. 运行 hook： `pyim-load-hook'。
5. 将 `pyim--kill-emacs-hook-function' 命令添加到 `kill-emacs-hook' , emacs 关闭
之前将用户选择过的词生成的缓存和词频缓存保存到文件，供以后使用。
6. 设定变量：
   1. `input-method-function'
   2. `deactivate-current-input-method-function'
7. 运行 `pyim-activate-hook'

pyim 使用函数 `pyim-activate' 启动输入法的时候，会将变量
`input-method-function' 设置为 `pyim-input-method' ，这个变量会影
响 `read-event' 的行为。

当输入字符时，`read-event' 会被调用，`read-event' 调用的过程中，
会执行 `pyim-input-method' 这个函数。

(fn &optional ARGS)" t)
(autoload 'pyim-convert-string-at-point "pyim/pyim" "\
将光标前的用户输入的字符串转换为中文.

(fn &optional _)" t)
(register-definition-prefixes "pyim/pyim" '("pyim-"))


;;; Generated autoloads from pyim/pyim-autoselector.el

(register-definition-prefixes "pyim/pyim-autoselector" '("pyim-autoselector-"))


;;; Generated autoloads from pyim/pyim-candidates.el

(register-definition-prefixes "pyim/pyim-candidates" '("pyim-"))


;;; Generated autoloads from pyim/pyim-cloudim.el

(register-definition-prefixes "pyim/pyim-cloudim" '("pyim-cloudim"))


;;; Generated autoloads from pyim/pyim-common.el

(register-definition-prefixes "pyim/pyim-common" '("pyim-"))


;;; Generated autoloads from pyim/pyim-cregexp.el

(register-definition-prefixes "pyim/pyim-cregexp" '("pyim-cregexp-"))


;;; Generated autoloads from pyim/pyim-cregexp-utils.el

(autoload 'pyim-cregexp-convert-at-point "pyim/pyim-cregexp-utils" "\
将光标前的字符串按拼音的规则转换为一个搜索中文的 regexp.
用于实现拼音搜索中文的功能。

在 minibuffer 中，这个命令默认会自动运行 `exit-minibuffer'.
这个可以使用 INSERT-ONLY 参数控制。

(fn &optional INSERT-ONLY)" t)
(defvar pyim-isearch-mode nil "\
Non-nil if pyim-isearch mode is enabled.
See the `pyim-isearch-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyim-isearch-mode'.")
(custom-autoload 'pyim-isearch-mode "pyim/pyim-cregexp-utils" nil)
(autoload 'pyim-isearch-mode "pyim/pyim-cregexp-utils" "\
这个 mode 为 isearch 添加拼音搜索功能.

This is a global minor mode.  If called interactively, toggle the
`pyim-isearch mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyim-isearch-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pyim/pyim-cregexp-utils" '("pyim-"))


;;; Generated autoloads from pyim/pyim-cstring.el

(autoload 'pyim-cstring-to-pinyin "pyim/pyim-cstring" "\
将汉字字符串转换为对应的拼音字符串的工具.

如果 SHOU-ZI-MU 设置为 t, 转换仅得到拼音首字母字符串。当
RETURN-LIST 设置为 t 时，返回一个拼音列表，这个列表包含词条的一个
或者多个拼音（词条包含多音字时）；如果 IGNORE-DUO-YIN-ZI 设置为
t, 遇到多音字时，只使用第一个拼音，其它拼音忽略。

BUG: 当 STRING 中包含其它标点符号，并且设置 SEPERATER 时，结果会
包含多余的连接符：比如： \"你=好\" --> \"ni-=-hao\"

(fn STRING &optional SHOU-ZI-MU SEPARATOR RETURN-LIST IGNORE-DUO-YIN-ZI _)")
(autoload 'pyim-cstring-to-pinyin-simple "pyim/pyim-cstring" "\
简化版的 `pyim-cstring-to-pinyin', 不处理多音字。

(fn STRING &optional SHOU-ZI-MU SEPARATOR RETURN-LIST)")
(register-definition-prefixes "pyim/pyim-cstring" '("pyim-"))


;;; Generated autoloads from pyim/pyim-cstring-utils.el

(register-definition-prefixes "pyim/pyim-cstring-utils" '("pyim-"))


;;; Generated autoloads from pyim/pyim-dcache.el

(register-definition-prefixes "pyim/pyim-dcache" '("pyim-dcache-"))


;;; Generated autoloads from pyim/pyim-dhashcache.el

(register-definition-prefixes "pyim/pyim-dhashcache" '("pyim-dhashcache-"))


;;; Generated autoloads from pyim/pyim-dict.el

(register-definition-prefixes "pyim/pyim-dict" '("pyim-"))


;;; Generated autoloads from pyim/pyim-dict-manager.el

(autoload 'pyim-dicts-manager "pyim/pyim-dict-manager" "\
pyim 词库管理器。

使用这个词库管理器可以方便的执行下列命令：
1. 添加词库。
2. 删除词库。
3. 向上和向下移动词库。
4. 保存词库设置。
5. 重启输入法。" t)
(register-definition-prefixes "pyim/pyim-dict-manager" '("pyim-dict-manager-"))


;;; Generated autoloads from pyim/pyim-dregcache.el

(register-definition-prefixes "pyim/pyim-dregcache" '("pyim-dregcache-"))


;;; Generated autoloads from pyim/tests/pyim-emacs-init.el

(register-definition-prefixes "pyim/tests/pyim-emacs-init" '("pyim-test-find-file"))


;;; Generated autoloads from pyim/pyim-entered.el

(register-definition-prefixes "pyim/pyim-entered" '("pyim-entered-"))


;;; Generated autoloads from pyim/pyim-indicator.el

(register-definition-prefixes "pyim/pyim-indicator" '("pyim-indicator-"))


;;; Generated autoloads from pyim/pyim-liberime.el

(register-definition-prefixes "pyim/pyim-liberime" '("pyim-"))


;;; Generated autoloads from pyim/pyim-outcome.el

(register-definition-prefixes "pyim/pyim-outcome" '("pyim-"))


;;; Generated autoloads from pyim/pyim-page.el

(register-definition-prefixes "pyim/pyim-page" '("pyim-page-"))


;;; Generated autoloads from pyim/pyim-pinyin.el

(register-definition-prefixes "pyim/pyim-pinyin" '("pyim-pinyin-"))


;;; Generated autoloads from pyim/pyim-preview.el

(register-definition-prefixes "pyim/pyim-preview" '("pyim-preview--"))


;;; Generated autoloads from pyim/pyim-probe.el

(register-definition-prefixes "pyim/pyim-probe" '("pyim-probe-"))


;;; Generated autoloads from pyim/pyim-process.el

(register-definition-prefixes "pyim/pyim-process" '("pyim-"))


;;; Generated autoloads from pyim/pyim-punctuation.el

(register-definition-prefixes "pyim/pyim-punctuation" '("pyim-punctuation-"))


;;; Generated autoloads from pyim/pyim-pymap.el

(register-definition-prefixes "pyim/pyim-pymap" '("pyim-pymap"))


;;; Generated autoloads from pyim/pyim-pymap-utils.el

(register-definition-prefixes "pyim/pyim-pymap-utils" '("pyim-pymap-"))


;;; Generated autoloads from pyim/pyim-scheme.el

(autoload 'pyim-default-scheme "pyim/pyim-scheme" "\


(fn &optional SCHEME-NAME)" t)
(register-definition-prefixes "pyim/pyim-scheme" '("pyim-"))


;;; Generated autoloads from pyim/tests/pyim-tests.el

(register-definition-prefixes "pyim/tests/pyim-tests" '("pyim-tests-"))


;;; Generated autoloads from rainbow-delimiters/rainbow-delimiters.el

(autoload 'rainbow-delimiters-mode "rainbow-delimiters/rainbow-delimiters" "\
Highlight nested parentheses, brackets, and braces according to their depth.

This is a minor mode.  If called interactively, toggle the
`Rainbow-Delimiters mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `rainbow-delimiters-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters/rainbow-delimiters" "\
Enable `rainbow-delimiters-mode'.")
(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters/rainbow-delimiters" "\
Disable `rainbow-delimiters-mode'.")
(register-definition-prefixes "rainbow-delimiters/rainbow-delimiters" '("rainbow-delimiters-"))


;;; Generated autoloads from rainbow-delimiters/rainbow-delimiters-test.el

(register-definition-prefixes "rainbow-delimiters/rainbow-delimiters-test" '("fontify-" "highlights-matching-" "should-do-nothing" "with-"))


;;; Generated autoloads from rainbow-mode/rainbow-mode.el

(autoload 'rainbow-mode "rainbow-mode/rainbow-mode" "\
Colorize strings that represent colors.

This will fontify with colors the string like \"#aabbcc\" or \"blue\".

This is a minor mode.  If called interactively, toggle the
`Rainbow mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `rainbow-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "rainbow-mode/rainbow-mode" '("rainbow-"))


;;; Generated autoloads from emacs-rime/rime.el

(defvar rime-title (char-to-string 12563) "\
The title of input method.")
(autoload 'rime-lighter "emacs-rime/rime" "\
Return a lighter which can be used in mode-line.

The content is `rime-title'.

You can customize the color with `rime-indicator-face' and `rime-indicator-dim-face'.")
(autoload 'rime-activate "emacs-rime/rime" "\
Activate rime.
Argument NAME ignored.

(fn NAME)")
(register-input-method "rime" "euc-cn" 'rime-activate rime-title)
(register-definition-prefixes "emacs-rime/rime" '("rime-"))


;;; Generated autoloads from emacs-rime/rime-predicates.el

(register-definition-prefixes "emacs-rime/rime-predicates" '("rime-predicate-"))


;;; Generated autoloads from s.el/s.el

(register-definition-prefixes "s.el/s" '("s-"))


;;; Generated autoloads from shrink-path.el/shrink-path.el

(register-definition-prefixes "shrink-path.el/shrink-path" '("shrink-path-"))


;;; Generated autoloads from spinner.el/spinner.el

(autoload 'spinner-create "spinner.el/spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

(fn &optional TYPE BUFFER-LOCAL FPS DELAY)")
(autoload 'spinner-start "spinner.el/spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    \\='(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

(fn &optional TYPE-OR-OBJECT FPS DELAY)")
(register-definition-prefixes "spinner.el/spinner" '("spinner-"))


;;; Generated autoloads from symbol-overlay/symbol-overlay.el

(autoload 'symbol-overlay-mode "symbol-overlay/symbol-overlay" "\
Minor mode for auto-highlighting symbol at point.

This is a minor mode.  If called interactively, toggle the
`Symbol-Overlay mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `symbol-overlay-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'symbol-overlay-put "symbol-overlay/symbol-overlay" "\
Toggle all overlays of symbol at point." t)
(autoload 'symbol-overlay-count "symbol-overlay/symbol-overlay" "\
Show count of symbol at point." t)
(autoload 'symbol-overlay-remove-all "symbol-overlay/symbol-overlay" "\
Remove all highlighted symbols in the buffer.
When called interactively, then also reset
`symbol-overlay-keywords-alist'." t)
(autoload 'symbol-overlay-save-symbol "symbol-overlay/symbol-overlay" "\
Copy symbol at point." t)
(autoload 'symbol-overlay-toggle-in-scope "symbol-overlay/symbol-overlay" "\
Toggle overlays to be showed in buffer or only in scope." t)
(autoload 'symbol-overlay-echo-mark "symbol-overlay/symbol-overlay" "\
Jump back to the mark." t)
(autoload 'symbol-overlay-jump-next "symbol-overlay/symbol-overlay" "\
Jump to the next location of symbol at point." t)
(autoload 'symbol-overlay-jump-prev "symbol-overlay/symbol-overlay" "\
Jump to the previous location of symbol at point." t)
(autoload 'symbol-overlay-jump-first "symbol-overlay/symbol-overlay" "\
Jump to the first location." t)
(autoload 'symbol-overlay-jump-last "symbol-overlay/symbol-overlay" "\
Jump to the last location." t)
(autoload 'symbol-overlay-jump-to-definition "symbol-overlay/symbol-overlay" "\
Jump to the definition of symbol at point.
The definition syntax should be defined in a function stored in
`symbol-overlay-definition-function' that returns the definition's regexp
with the input symbol." t)
(autoload 'symbol-overlay-switch-forward "symbol-overlay/symbol-overlay" "\
Switch forward to another symbol." t)
(autoload 'symbol-overlay-switch-backward "symbol-overlay/symbol-overlay" "\
Switch backward to another symbol." t)
(autoload 'symbol-overlay-isearch-literally "symbol-overlay/symbol-overlay" "\
Isearch symbol at point literally." t)
(autoload 'symbol-overlay-query-replace "symbol-overlay/symbol-overlay" "\
Query replace symbol at point." t)
(autoload 'symbol-overlay-rename "symbol-overlay/symbol-overlay" "\
Rename symbol at point on all its occurrences." t)
(register-definition-prefixes "symbol-overlay/symbol-overlay" '("symbol-overlay-"))


;;; Generated autoloads from tablist/tablist.el

(autoload 'tablist-minor-mode "tablist/tablist" "\
Toggle Tablist minor mode on or off.

This is a minor mode.  If called interactively, toggle the
`Tablist minor mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tablist-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'tablist-mode "tablist/tablist" "\


(fn)" t)
(register-definition-prefixes "tablist/tablist" '("tablist-"))


;;; Generated autoloads from tablist/tablist-filter.el

(register-definition-prefixes "tablist/tablist-filter" '("tablist-filter-"))


;;; Generated autoloads from company-mode/test/template-tests.el

(register-definition-prefixes "company-mode/test/template-tests" '("company-template-field-assert-text"))


;;; Generated autoloads from citre/tests/tags-lang-c/test.el

(register-definition-prefixes "citre/tests/tags-lang-c/test" '("defs-to-xref"))


;;; Generated autoloads from citre/tests/global/test.el

(register-definition-prefixes "citre/tests/global/test" '("delete-global-database" "generate-global-database" "with-clean-global-envs"))


;;; Generated autoloads from citre/tests/common-process/test.el

(register-definition-prefixes "citre/tests/common-process/test" '("poll-process"))


;;; Generated autoloads from themes/test/test-helper.el

(register-definition-prefixes "themes/test/test-helper" '("-build-face" "-color" "-with-"))


;;; Generated autoloads from shrink-path.el/test/test-helper.el

(register-definition-prefixes "shrink-path.el/test/test-helper" '("with-"))


;;; Generated autoloads from pdf-tools/test/test-helper.el

(register-definition-prefixes "pdf-tools/test/test-helper" '("cask-elpa" "pdf-t"))


;;; Generated autoloads from lsp-ui/test/test-helper.el

(register-definition-prefixes "lsp-ui/test/test-helper" '("lsp-ui-test-"))


;;; Generated autoloads from ht.el/test/test-helper.el

(register-definition-prefixes "ht.el/test/test-helper" '("ht-test/"))


;;; Generated autoloads from combobulate/tests/test-navigation.el

(register-definition-prefixes "combobulate/tests/test-navigation" '("combobulate-test"))


;;; Generated autoloads from combobulate/tests/test-prelude.el

(register-definition-prefixes "combobulate/tests/test-prelude" '("combobulate-test-"))


;;; Generated autoloads from treemacs/test/testdir1/testdir2/testdir3/testfile.el

(register-definition-prefixes "treemacs/test/testdir1/testdir2/testdir3/testfile" '("fn1" "fn2"))


;;; Generated autoloads from auctex/tex.el

(autoload 'TeX-tex-mode "auctex/tex" "\
Major mode in AUCTeX for editing TeX or LaTeX files.
Tries to guess whether this file is for plain TeX or LaTeX.

The algorithm is as follows:

   1) if the file is empty or `TeX-force-default-mode' is not set to nil,
      `TeX-default-mode' is chosen
   2) If \\documentstyle or \\begin{, \\section{, \\part{ or \\chapter{ is
      found, `latex-mode' is selected.
   3) Otherwise, use `plain-tex-mode'" t)
(autoload 'TeX-auto-generate "auctex/tex" "\
Generate style file for TEX and store it in AUTO.
If TEX is a directory, generate style files for all files in the directory.

(fn TEX AUTO)" t)
(autoload 'TeX-auto-generate-global "auctex/tex" "\
Create global auto directory for global TeX macro definitions." t)
(autoload 'TeX-submit-bug-report "auctex/tex" "\
Submit a bug report on AUCTeX via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your AUCTeX version and AUCTeX configuration." t)
(register-definition-prefixes "auctex/tex" '("Bib" "ConTeXt-" "LaTeX-" "TeX-" "VirTeX-common-initialization" "docTeX-default-extension" "plain-TeX-auto-regexp-list" "tex-"))


;;; Generated autoloads from auctex/tex-bar.el

(autoload 'TeX-install-toolbar "auctex/tex-bar" "\
Install toolbar buttons for TeX mode." t)
(autoload 'LaTeX-install-toolbar "auctex/tex-bar" "\
Install toolbar buttons for LaTeX mode." t)
(register-definition-prefixes "auctex/tex-bar" '("TeX-bar-"))


;;; Generated autoloads from auctex/tex-fold.el

(autoload 'TeX-fold-mode "auctex/tex-fold" "\
Minor mode for hiding and revealing macros and environments.

Called interactively, with no prefix argument, toggle the mode.
With universal prefix ARG (or if ARG is nil) turn mode on.
With zero or negative ARG turn mode off.

(fn &optional ARG)" t)
(defalias 'tex-fold-mode #'TeX-fold-mode)
(register-definition-prefixes "auctex/tex-fold" '("TeX-fold-"))


;;; Generated autoloads from auctex/tex-font.el

(autoload 'tex-font-setup "auctex/tex-font" "\
Setup font lock support for TeX.")
(register-definition-prefixes "auctex/tex-font" '("tex-"))


;;; Generated autoloads from auctex/tex-info.el

(defalias 'Texinfo-mode #'texinfo-mode)
(autoload 'TeX-texinfo-mode "auctex/tex-info" "\
Major mode in AUCTeX for editing Texinfo files.

Special commands:
\\{Texinfo-mode-map}

Entering Texinfo mode calls the value of `text-mode-hook' and then the
value of `Texinfo-mode-hook'." t)
(register-definition-prefixes "auctex/tex-info" '("Texinfo-" "texinfo-environment-regexp"))


;;; Generated autoloads from auctex/tex-ispell.el

(register-definition-prefixes "auctex/tex-ispell" '("TeX-ispell-"))


;;; Generated autoloads from auctex/tex-jp.el

(autoload 'japanese-plain-tex-mode "auctex/tex-jp" "\
Major mode in AUCTeX for editing Japanese plain TeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-plain-tex-mode'." t)
(autoload 'japanese-latex-mode "auctex/tex-jp" "\
Major mode in AUCTeX for editing Japanese LaTeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-latex-mode'." t)
(register-definition-prefixes "auctex/tex-jp" '("TeX-japanese-process-" "japanese-"))


;;; Generated autoloads from auctex/tex-style.el

(register-definition-prefixes "auctex/tex-style" '("LaTeX-" "TeX-TikZ-point-name-regexp"))


;;; Generated autoloads from auctex/tex-wizard.el

(register-definition-prefixes "auctex/tex-wizard" '("TeX-wizard"))


;;; Generated autoloads from auctex/texmathp.el

(autoload 'texmathp "auctex/texmathp" "\
Determine if point is inside (La)TeX math mode.
Returns t or nil.  Additional info is placed into `texmathp-why'.
The functions assumes that you have (almost) syntactically correct (La)TeX in
the buffer.
See the variable `texmathp-tex-commands' about which commands are checked." t)
(autoload 'texmathp-match-switch "auctex/texmathp" "\
Search backward for any of the math switches.
Limit searched to BOUND.

(fn BOUND)")
(register-definition-prefixes "auctex/texmathp" '("texmathp-"))


;;; Generated autoloads from auctex/toolbar-x.el

 (autoload 'toolbarx-install-toolbar "toolbar-x")
(register-definition-prefixes "auctex/toolbar-x" '("toolbarx-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs.el

(autoload 'treemacs-version "treemacs/src/elisp/treemacs" "\
Return the `treemacs-version'." t)
(autoload 'treemacs "treemacs/src/elisp/treemacs" "\
Initialise or toggle treemacs.
- If the treemacs window is visible hide it.
- If a treemacs buffer exists, but is not visible show it.
- If no treemacs buffer exists for the current frame create and show it.
- If the workspace is empty additionally ask for the root path of the first
  project to add.
- With a prefix ARG launch treemacs and force it to select a workspace

(fn &optional ARG)" t)
(autoload 'treemacs-select-directory "treemacs/src/elisp/treemacs" "\
Select a directory to open in treemacs.
This command will open *just* the selected directory in treemacs.  If there are
other projects in the workspace they will be removed.

To *add* a project to the current workspace use
`treemacs-add-project-to-workspace' or
`treemacs-add-and-display-current-project' instead." t)
(autoload 'treemacs-find-file "treemacs/src/elisp/treemacs" "\
Find and focus the current file in the treemacs window.
If the current buffer has visits no file or with a prefix ARG ask for the
file instead.
Will show/create a treemacs buffers if it is not visible/does not exist.
For the most part only useful when `treemacs-follow-mode' is not active.

(fn &optional ARG)" t)
(autoload 'treemacs-find-tag "treemacs/src/elisp/treemacs" "\
Find and move point to the tag at point in the treemacs view.
Most likely to be useful when `treemacs-tag-follow-mode' is not active.

Will ask to change the treemacs root if the file to find is not under the
root.  If no treemacs buffer exists it will be created with the current file's
containing directory as root.  Will do nothing if the current buffer is not
visiting a file or Emacs cannot find any tags for the current file." t)
(autoload 'treemacs-select-window "treemacs/src/elisp/treemacs" "\
Select the treemacs window if it is visible.
Bring it to the foreground if it is not visible.
Initialise a new treemacs buffer as calling `treemacs' would if there is no
treemacs buffer for this frame.

In case treemacs is already selected behaviour will depend on
`treemacs-select-when-already-in-treemacs'.

A non-nil prefix ARG will also force a workspace switch.

(fn &optional ARG)" t)
(autoload 'treemacs-show-changelog "treemacs/src/elisp/treemacs" "\
Show the changelog of treemacs." t)
(autoload 'treemacs-edit-workspaces "treemacs/src/elisp/treemacs" "\
Edit your treemacs workspaces and projects as an `org-mode' file." t)
(autoload 'treemacs-add-and-display-current-project-exclusively "treemacs/src/elisp/treemacs" "\
Display the current project, and *only* the current project.
Like `treemacs-add-and-display-current-project' this will add the current
project to treemacs based on either projectile, the built-in project.el, or the
current working directory.

However the \\='exclusive\\=' part means that it will make the current project
the only project, all other projects *will be removed* from the current
workspace." t)
(autoload 'treemacs-add-and-display-current-project "treemacs/src/elisp/treemacs" "\
Open treemacs and add the current project root to the workspace.
The project is determined first by projectile (if treemacs-projectile is
installed), then by project.el, then by the current working directory.

If the project is already registered with treemacs just move point to its root.
An error message is displayed if the current buffer is not part of any project." t)
(register-definition-prefixes "treemacs/src/elisp/treemacs" '("treemacs-version"))


;;; Generated autoloads from treemacs/src/extra/treemacs-all-the-icons.el

(register-definition-prefixes "treemacs/src/extra/treemacs-all-the-icons" '("treemacs-all-the-icons-tab"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-annotations.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-annotations" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-async.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-async" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-bookmarks.el

(autoload 'treemacs-bookmark "treemacs/src/elisp/treemacs-bookmarks" "\
Find a bookmark in treemacs.
Only bookmarks marking either a file or a directory are offered for selection.
Treemacs will try to find and focus the given bookmark's location, in a similar
fashion to `treemacs-find-file'.

With a prefix argument ARG treemacs will also open the bookmarked location.

(fn &optional ARG)" t)
(autoload 'treemacs--bookmark-handler "treemacs/src/elisp/treemacs-bookmarks" "\
Open Treemacs into a bookmark RECORD.

(fn RECORD)")
(autoload 'treemacs-add-bookmark "treemacs/src/elisp/treemacs-bookmarks" "\
Add the current node to Emacs' list of bookmarks.
For file and directory nodes their absolute path is saved.  Tag nodes
additionally also save the tag's position.  A tag can only be bookmarked if the
treemacs node is pointing to a valid buffer position." t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-bookmarks" '("treemacs--"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-compatibility.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-compatibility" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-core-utils.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-core-utils" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-customization.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-customization" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-diagnostics.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-diagnostics" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-dom.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-dom" '("treemacs-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-evil.el

(register-definition-prefixes "treemacs/src/extra/treemacs-evil" '("treemacs-evil--"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-extensions.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-extensions" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-file-management.el

(autoload 'treemacs-delete-file "treemacs/src/elisp/treemacs-file-management" "\
Delete node at point.
A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

(fn &optional ARG)" t)
(autoload 'treemacs-delete-marked-files "treemacs/src/elisp/treemacs-file-management" "\
Delete all marked files.

A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

For marking files see `treemacs-bulk-file-actions'.

(fn &optional ARG)" t)
(autoload 'treemacs-move-file "treemacs/src/elisp/treemacs-file-management" "\
Move file (or directory) at point.

If the selected target is an existing directory the source file will be directly
moved into this directory.  If the given target instead does not exist then it
will be treated as the moved file's new name, meaning the original source file
will be both moved and renamed." t)
(autoload 'treemacs-copy-file "treemacs/src/elisp/treemacs-file-management" "\
Copy file (or directory) at point.

If the selected target is an existing directory the source file will be directly
copied into this directory.  If the given target instead does not exist then it
will be treated as the copied file's new name, meaning the original source file
will be both copied and renamed." t)
(autoload 'treemacs-move-marked-files "treemacs/src/elisp/treemacs-file-management" "\
Move all marked files.

For marking files see `treemacs-bulk-file-actions'." t)
(autoload 'treemacs-copy-marked-files "treemacs/src/elisp/treemacs-file-management" "\
Copy all marked files.

For marking files see `treemacs-bulk-file-actions'." t)
(autoload 'treemacs-rename-file "treemacs/src/elisp/treemacs-file-management" "\
Rename the file/directory at point.

Buffers visiting the renamed file or visiting a file inside the renamed
directory and windows showing them will be reloaded.  The list of recent files
will likewise be updated." t)
(autoload 'treemacs-show-marked-files "treemacs/src/elisp/treemacs-file-management" "\
Print a list of all files marked by treemacs." t)
(autoload 'treemacs-mark-or-unmark-path-at-point "treemacs/src/elisp/treemacs-file-management" "\
Mark or unmark the absolute path of the node at point." t)
(autoload 'treemacs-reset-marks "treemacs/src/elisp/treemacs-file-management" "\
Unmark all previously marked files in the current buffer." t)
(autoload 'treemacs-delete-marked-paths "treemacs/src/elisp/treemacs-file-management" "\
Delete all previously marked files." t)
(autoload 'treemacs-bulk-file-actions "treemacs/src/elisp/treemacs-file-management" "\
Activate the bulk file actions hydra.
This interface allows to quickly (unmark) files, so as to copy, move or delete
them in bulk.

Note that marking files is *permanent*, files will stay marked until they are
either manually unmarked or deleted.  You can show a list of all currently
marked files with `treemacs-show-marked-files' or `s' in the hydra." t)
(autoload 'treemacs-create-file "treemacs/src/elisp/treemacs-file-management" "\
Create a new file.
Enter first the directory to create the new file in, then the new file's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t)
(autoload 'treemacs-create-dir "treemacs/src/elisp/treemacs-file-management" "\
Create a new directory.
Enter first the directory to create the new dir in, then the new dir's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-file-management" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-filewatch-mode.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-filewatch-mode" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-follow-mode.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-follow-mode" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-fringe-indicator.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-fringe-indicator" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-git-commit-diff-mode.el

(defvar treemacs-git-commit-diff-mode nil "\
Non-nil if Treemacs-Git-Commit-Diff mode is enabled.
See the `treemacs-git-commit-diff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-git-commit-diff-mode'.")
(custom-autoload 'treemacs-git-commit-diff-mode "treemacs/src/elisp/treemacs-git-commit-diff-mode" nil)
(autoload 'treemacs-git-commit-diff-mode "treemacs/src/elisp/treemacs-git-commit-diff-mode" "\
Minor mode to display commit differences for your git-tracked projects.

When enabled treemacs will add an annotation next to every git project showing
how many commits ahead or behind your current branch is compared to its remote
counterpart.

The difference will be shown using the format `↑x ↓y', where `x' and `y' are the
numbers of commits a project is ahead or behind.  The numbers are determined
based on the output of `git status -sb'.

By default the annotation is only updated when manually updating a project with
`treemacs-refresh'.  You can install `treemacs-magit' to enable automatic
updates whenever you commit/fetch/rebase etc. in magit.

Does not require `treemacs-git-mode' to be active.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Git-Commit-Diff mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-git-commit-diff-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-git-commit-diff-mode" '("treemacs--"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-header-line.el

(defvar treemacs-indicate-top-scroll-mode nil "\
Non-nil if Treemacs-Indicate-Top-Scroll mode is enabled.
See the `treemacs-indicate-top-scroll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-indicate-top-scroll-mode'.")
(custom-autoload 'treemacs-indicate-top-scroll-mode "treemacs/src/elisp/treemacs-header-line" nil)
(autoload 'treemacs-indicate-top-scroll-mode "treemacs/src/elisp/treemacs-header-line" "\
Minor mode which shows whether treemacs is scrolled all the way to the top.

When this mode is enabled the header line of the treemacs window will display
whether the window's first line is visible or not.

The strings used for the display are determined by
`treemacs-header-scroll-indicators'.

This mode makes use of `treemacs-user-header-line-format' - and thus
`header-line-format' - and is therefore incompatible with other modifications to
these options.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Indicate-Top-Scroll mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-indicate-top-scroll-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-header-line" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-hydras.el

(autoload 'treemacs-common-helpful-hydra "treemacs/src/elisp/treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the most commonly used keybinds for treemacs.  For the more
advanced (probably rarely used keybinds) see `treemacs-advanced-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t)
(autoload 'treemacs-advanced-helpful-hydra "treemacs/src/elisp/treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the more advanced (rarely used) keybinds for treemacs.  For
the more commonly used keybinds see `treemacs-common-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-hydras" '("treemacs-helpful-hydra"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-icons.el

(autoload 'treemacs-resize-icons "treemacs/src/elisp/treemacs-icons" "\
Resize the current theme's icons to the given SIZE.

If SIZE is \\='nil' the icons are not resized and will retain their default size
of 22 pixels.

There is only one size, the icons are square and the aspect ratio will be
preserved when resizing them therefore width and height are the same.

Resizing the icons only works if Emacs was built with ImageMagick support, or if
using Emacs >= 27.1,which has native image resizing support.  If this is not the
case this function will not have any effect.

Custom icons are not taken into account, only the size of treemacs' own icons
png are changed.

(fn SIZE)" t)
(autoload 'treemacs-define-custom-icon "treemacs/src/elisp/treemacs-icons" "\
Define a custom ICON for the current theme to use for FILE-EXTENSIONS.

Note that treemacs has a very loose definition of what constitutes a file
extension - it's either everything past the last period, or just the file's full
name if there is no period.  This makes it possible to match file names like
\\='.gitignore' and \\='Makefile'.

Additionally FILE-EXTENSIONS are also not case sensitive and will be stored in a
down-cased state.

(fn ICON &rest FILE-EXTENSIONS)")
(autoload 'treemacs-define-custom-image-icon "treemacs/src/elisp/treemacs-icons" "\
Same as `treemacs-define-custom-icon' but for image icons instead of strings.
FILE is the path to an icon image (and not the actual icon string).
FILE-EXTENSIONS are all the (not case-sensitive) file extensions the icon
should be used for.

(fn FILE &rest FILE-EXTENSIONS)")
(autoload 'treemacs-map-icons-with-auto-mode-alist "treemacs/src/elisp/treemacs-icons" "\
Remaps icons for EXTENSIONS according to `auto-mode-alist'.
EXTENSIONS should be a list of file extensions such that they match the regex
stored in `auto-mode-alist', for example \\='(\".cc\").
MODE-ICON-ALIST is an alist that maps which mode from `auto-mode-alist' should
be assigned which treemacs icon, for example
`((c-mode . ,(treemacs-get-icon-value \"c\"))
  (c++-mode . ,(treemacs-get-icon-value \"cpp\")))

(fn EXTENSIONS MODE-ICON-ALIST)")
(register-definition-prefixes "treemacs/src/elisp/treemacs-icons" '("treemacs-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-icons-dired.el

(defvar treemacs-icons-dired-mode nil "\
Non-nil if Treemacs-Icons-Dired mode is enabled.
See the `treemacs-icons-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-icons-dired-mode'.")
(custom-autoload 'treemacs-icons-dired-mode "treemacs/src/extra/treemacs-icons-dired" nil)
(autoload 'treemacs-icons-dired-mode "treemacs/src/extra/treemacs-icons-dired" "\
Display treemacs icons for each file in a Dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Icons-Dired mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-icons-dired-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'treemacs-icons-dired-enable-once "treemacs/src/extra/treemacs-icons-dired" "\
Enable `treemacs-icons-dired-mode' and remove self from `dired-mode-hook'.

This function is meant to be used as a single-use toggle added to
`dired-mode-hook' to enable icons for Dired only once, without having to use
\"with-eval-after-load \\='dired\", since Dired tends to be loaded early.")
(register-definition-prefixes "treemacs/src/extra/treemacs-icons-dired" '("treemacs-icons-dired-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-interface.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-interface" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-logging.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-logging" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-macros.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-macros" '("treemacs-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-magit.el

(register-definition-prefixes "treemacs/src/extra/treemacs-magit" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-mode.el

(autoload 'treemacs-mode "treemacs/src/elisp/treemacs-mode" "\
A major mode for displaying the file system in a tree layout.

(fn)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-mode" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-mouse-interface.el

(autoload 'treemacs-leftclick-action "treemacs/src/elisp/treemacs-mouse-interface" "\
Move focus to the clicked line.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t)
(autoload 'treemacs-doubleclick-action "treemacs/src/elisp/treemacs-mouse-interface" "\
Run the appropriate double-click action for the current node.
In the default configuration this means to expand/collapse directories and open
files and tags in the most recently used window.

This function's exact configuration is stored in
`treemacs-doubleclick-actions-config'.

Must be bound to a mouse double click to properly handle a click EVENT.

(fn EVENT)" t)
(autoload 'treemacs-single-click-expand-action "treemacs/src/elisp/treemacs-mouse-interface" "\
A modified single-leftclick action that expands the clicked nodes.
Can be bound to <mouse1> if you prefer to expand nodes with a single click
instead of a double click.  Either way it must be bound to a mouse click, or
EVENT will not be supplied.

Clicking on icons will expand a file's tags, just like
`treemacs-leftclick-action'.

(fn EVENT)" t)
(autoload 'treemacs-dragleftclick-action "treemacs/src/elisp/treemacs-mouse-interface" "\
Drag a file/dir node to be opened in a window.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t)
(autoload 'treemacs-define-doubleclick-action "treemacs/src/elisp/treemacs-mouse-interface" "\
Define the behaviour of `treemacs-doubleclick-action'.
Determines that a button with a given STATE should lead to the execution of
ACTION.

The list of possible states can be found in `treemacs-valid-button-states'.
ACTION should be one of the `treemacs-visit-node-*' commands.

(fn STATE ACTION)")
(autoload 'treemacs-node-buffer-and-position "treemacs/src/elisp/treemacs-mouse-interface" "\
Return source buffer or list of buffer and position for the current node.
This information can be used for future display.  Stay in the selected window
and ignore any prefix argument.

(fn &optional _)" t)
(autoload 'treemacs-rightclick-menu "treemacs/src/elisp/treemacs-mouse-interface" "\
Show a contextual right click menu based on click EVENT.

(fn EVENT)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-mouse-interface" '("treemacs--"))


;;; Generated autoloads from treemacs/src/extra/treemacs-mu4e.el

(autoload 'treemacs-mu4e "treemacs/src/extra/treemacs-mu4e" "\
Select or display the Mu4e side-bar." t)
(register-definition-prefixes "treemacs/src/extra/treemacs-mu4e" '("treemacs-m"))


;;; Generated autoloads from treemacs-nerd-icons/treemacs-nerd-icons.el

(register-definition-prefixes "treemacs-nerd-icons/treemacs-nerd-icons" '("treemacs-nerd-icons-tab"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-peek-mode.el

(defvar treemacs-peek-mode nil "\
Non-nil if Treemacs-Peek mode is enabled.
See the `treemacs-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-peek-mode'.")
(custom-autoload 'treemacs-peek-mode "treemacs/src/elisp/treemacs-peek-mode" nil)
(autoload 'treemacs-peek-mode "treemacs/src/elisp/treemacs-peek-mode" "\
Minor mode that allows you to peek at buffers before deciding to open them.

While the mode is active treemacs will automatically display the file at point,
without leaving the treemacs window.

Peeking will stop when you leave the treemacs window, be it through a command
like `treemacs-RET-action' or some other window selection change.

Files' buffers that have been opened for peeking will be cleaned up if they did
not exist before peeking started.

The peeked window can be scrolled using
`treemacs-next/previous-line-other-window' and
`treemacs-next/previous-page-other-window'

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Peek mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-peek-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-peek-mode" '("treemacs--"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-persistence.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-persistence" '("treemacs-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-persp.el

(register-definition-prefixes "treemacs/src/extra/treemacs-persp" '("treemacs-persp-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-perspective.el

(register-definition-prefixes "treemacs/src/extra/treemacs-perspective" '("treemacs-perspective-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-project-follow-mode.el

(defvar treemacs-project-follow-mode nil "\
Non-nil if Treemacs-Project-Follow mode is enabled.
See the `treemacs-project-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-project-follow-mode'.")
(custom-autoload 'treemacs-project-follow-mode "treemacs/src/elisp/treemacs-project-follow-mode" nil)
(autoload 'treemacs-project-follow-mode "treemacs/src/elisp/treemacs-project-follow-mode" "\
Toggle `treemacs-only-current-project-mode'.

This is a minor mode meant for those who do not care about treemacs' workspace
features, or its preference to work with multiple projects simultaneously.  When
enabled it will function as an automated version of
`treemacs-display-current-project-exclusively', making sure that, after a small
idle delay, the current project, and *only* the current project, is displayed in
treemacs.

The project detection is based on the current buffer, and will try to determine
the project using the following methods, in the order they are listed:

- the current projectile.el project, if `treemacs-projectile' is installed
- the current project.el project
- the current `default-directory'

The update will only happen when treemacs is in the foreground, meaning a
treemacs window must exist in the current scope.

This mode requires at least Emacs version 27 since it relies on
`window-buffer-change-functions' and `window-selection-change-functions'.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Project-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-project-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-project-follow-mode" '("treemacs--"))


;;; Generated autoloads from treemacs/src/extra/treemacs-projectile.el

(autoload 'treemacs-projectile "treemacs/src/extra/treemacs-projectile" "\
Add one of `projectile-known-projects' to the treemacs workspace.
With a prefix ARG was for the name of the project instead of using the name of
the project's root directory.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/extra/treemacs-projectile" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-rendering.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-rendering" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-scope.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-scope" '("treemacs-"))


;;; Generated autoloads from treemacs/src/extra/treemacs-tab-bar.el

(register-definition-prefixes "treemacs/src/extra/treemacs-tab-bar" '("treemacs-tab-bar-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-tag-follow-mode.el

(autoload 'treemacs--flatten&sort-imenu-index "treemacs/src/elisp/treemacs-tag-follow-mode" "\
Flatten current file's imenu index and sort it by tag position.
The tags are sorted into the order in which they appear, regardless of section
or nesting depth.")
(defvar treemacs-tag-follow-mode nil "\
Non-nil if Treemacs-Tag-Follow mode is enabled.
See the `treemacs-tag-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-tag-follow-mode'.")
(custom-autoload 'treemacs-tag-follow-mode "treemacs/src/elisp/treemacs-tag-follow-mode" nil)
(autoload 'treemacs-tag-follow-mode "treemacs/src/elisp/treemacs-tag-follow-mode" "\
Toggle `treemacs-tag-follow-mode'.

This acts as more fine-grained alternative to `treemacs-follow-mode' and will
thus disable `treemacs-follow-mode' on activation.  When enabled treemacs will
focus not only the file of the current buffer, but also the tag at point.

The follow action is attached to Emacs' idle timer and will run
`treemacs-tag-follow-delay' seconds of idle time.  The delay value is not an
integer, meaning it accepts floating point values like 1.5.

Every time a tag is followed a re--scan of the imenu index is forced by
temporarily setting `imenu-auto-rescan' to t (though a cache is applied as long
as the buffer is unmodified).  This is necessary to assure that creation or
deletion of tags does not lead to errors and guarantees an always up-to-date tag
view.

Note that in order to move to a tag in treemacs the treemacs buffer's window
needs to be temporarily selected, which will reset blink-cursor-mode's timer if
it is enabled.  This will result in the cursor blinking seemingly pausing for a
short time and giving the appearance of the tag follow action lasting much
longer than it really does.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Tag-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-tag-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs/src/elisp/treemacs-tag-follow-mode" '("treemacs--"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-tags.el

(autoload 'treemacs--expand-file-node "treemacs/src/elisp/treemacs-tags" "\
Open tag items for file BTN.
Recursively open all tags below BTN when RECURSIVE is non-nil.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--collapse-file-node "treemacs/src/elisp/treemacs-tags" "\
Close node given by BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--visit-or-expand/collapse-tag-node "treemacs/src/elisp/treemacs-tags" "\
Visit tag section BTN if possible, expand or collapse it otherwise.
Pass prefix ARG on to either visit or toggle action.

FIND-WINDOW is a special provision depending on this function's invocation
context and decides whether to find the window to display in (if the tag is
visited instead of the node being expanded).

On the one hand it can be called based on `treemacs-RET-actions-config' (or
TAB).  The functions in these configs are expected to find the windows they need
to display in themselves, so FIND-WINDOW must be t. On the other hand this
function is also called from the top level vist-node functions like
`treemacs-visit-node-vertical-split' which delegates to the
`treemacs--execute-button-action' macro which includes the determination of
the display window.

(fn BTN ARG FIND-WINDOW)")
(autoload 'treemacs--expand-tag-node "treemacs/src/elisp/treemacs-tags" "\
Open tags node items for BTN.
Open all tag section under BTN when call is RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--collapse-tag-node "treemacs/src/elisp/treemacs-tags" "\
Close tags node at BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--goto-tag "treemacs/src/elisp/treemacs-tags" "\
Go to the tag at BTN.

(fn BTN)")
(autoload 'treemacs--create-imenu-index-function "treemacs/src/elisp/treemacs-tags" "\
The `imenu-create-index-function' for treemacs buffers.")
(function-put 'treemacs--create-imenu-index-function 'side-effect-free 't)
(register-definition-prefixes "treemacs/src/elisp/treemacs-tags" '("treemacs--"))


;;; Generated autoloads from treemacs/test/treemacs-test.el

(register-definition-prefixes "treemacs/test/treemacs-test" '("test-treemacs--" "treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-themes.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-themes" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-treelib.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-treelib" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-visuals.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-visuals" '("treemacs-"))


;;; Generated autoloads from treemacs/src/elisp/treemacs-workspaces.el

(register-definition-prefixes "treemacs/src/elisp/treemacs-workspaces" '("treemacs-"))


;;; Generated autoloads from treesit-auto/treesit-auto.el

(register-definition-prefixes "treesit-auto/treesit-auto" '("global-treesit-auto-mode" "treesit-auto-"))


;;; Generated autoloads from auctex/tests/tex/utility.el

(register-definition-prefixes "auctex/tests/tex/utility" '("TeX-dummy-alist"))


;;; Generated autoloads from valign/valign.el

(autoload 'valign-table "valign/valign" "\
Visually align the table at point." t)
(autoload 'valign-mode "valign/valign" "\
Visually align Org tables.

This is a minor mode.  If called interactively, toggle the
`Valign mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `valign-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "valign/valign" '("valign-"))


;;; Generated autoloads from verilog-mode/attic/verilog-lex.el

(register-definition-prefixes "verilog-mode/attic/verilog-lex" '("verilog-"))


;;; Generated autoloads from verilog-mode/x/verilog-mode.el

(autoload 'verilog-mode "verilog-mode/x/verilog-mode" "\
Major mode for editing Verilog code.
\\<verilog-mode-map>
See \\[describe-function] verilog-auto (\\[verilog-auto]) for details on how
AUTOs can improve coding efficiency.

Use \\[verilog-faq] for a pointer to frequently asked questions.

NEWLINE, TAB indents for Verilog code.
Delete converts tabs to spaces as it moves back.

Supports highlighting.

Turning on Verilog mode calls the value of the variable `verilog-mode-hook'
with no args, if that value is non-nil.

Variables controlling indentation/edit style:

 variable `verilog-indent-level'      (default 3)
   Indentation of Verilog statements with respect to containing block.
 `verilog-indent-level-module'        (default 3)
   Absolute indentation of Module level Verilog statements.
   Set to 0 to get initial and always statements lined up
   on the left side of your screen.
 `verilog-indent-level-declaration'   (default 3)
   Indentation of declarations with respect to containing block.
   Set to 0 to get them list right under containing block.
 `verilog-indent-level-behavioral'    (default 3)
   Indentation of first begin in a task or function block
   Set to 0 to get such code to lined up underneath the task or
   function keyword.
 `verilog-indent-level-directive'     (default 1)
   Indentation of \\=`ifdef/\\=`endif blocks.
 `verilog-indent-ignore-multiline-defines' (default t)
   Non-nil means ignore indentation on lines that are part of a multiline
   define.
 `verilog-indent-ignore-regexp'     (default nil
   Regexp that matches lines that should be ignored for indentation.
 `verilog-cexp-indent'              (default 1)
   Indentation of Verilog statements broken across lines i.e.:
      if (a)
        begin
 `verilog-case-indent'              (default 2)
   Indentation for case statements.
 `verilog-auto-newline'             (default nil)
   Non-nil means automatically newline after semicolons and the punctuation
   mark after an end.
 `verilog-auto-indent-on-newline'   (default t)
   Non-nil means automatically indent line after newline.
 `verilog-tab-always-indent'        (default t)
   Non-nil means TAB in Verilog mode should always reindent the current line,
   regardless of where in the line point is when the TAB command is used.
 `verilog-indent-begin-after-if'    (default t)
   Non-nil means to indent begin statements following a preceding
   if, else, while, for and repeat statements, if any.  Otherwise,
   the begin is lined up with the preceding token.  If t, you get:
      if (a)
         begin // amount of indent based on `verilog-cexp-indent'
   otherwise you get:
      if (a)
      begin
 `verilog-indent-class-inside-pkg'  (default t)
   Non-nil means indent classes inside packages.
   Otherwise, classes have zero indentation.
 `verilog-auto-endcomments'         (default t)
   Non-nil means a comment /* ... */ is set after the ends which ends
   cases, tasks, functions and modules.
   The type and name of the object will be set between the braces.
 `verilog-minimum-comment-distance' (default 10)
   Minimum distance (in lines) between begin and end required before a comment
   will be inserted.  Setting this variable to zero results in every
   end acquiring a comment; the default avoids too many redundant
   comments in tight quarters.
 `verilog-align-decl-expr-comments' (default t)
   Non-nil means align declaration and expressions comments.
 `verilog-align-comment-distance'   (default 1)
   Distance (in spaces) between longest declaration and comments.
   Only works if `verilog-align-decl-expr-comments' is non-nil.
 `verilog-align-assign-expr'        (default nil)
   Non-nil means align expressions of continuous assignments.
 `verilog-align-typedef-regexp'     (default nil)
   Regexp that matches user typedefs for declaration alignment.
 `verilog-align-typedef-words'      (default nil)
   List of words that match user typedefs for declaration alignment.
 `verilog-auto-lineup'              (default `declarations')
   List of contexts where auto lineup of code should be done.

Variables controlling other actions:

 `verilog-linter'                   (default `none')
   Unix program to call to run the lint checker.  This is the default
   command for \\[compile-command] and \\[verilog-auto-save-compile].

See \\[customize] for the complete list of variables.

AUTO expansion functions are, in part:

    \\[verilog-auto]  Expand AUTO statements.
    \\[verilog-delete-auto]  Remove the AUTOs.
    \\[verilog-inject-auto]  Insert AUTOs for the first time.

Some other functions are:

    \\[completion-at-point]    Complete word with appropriate possibilities.
    \\[verilog-mark-defun]  Mark function.
    \\[verilog-beg-of-defun]  Move to beginning of current function.
    \\[verilog-end-of-defun]  Move to end of current function.
    \\[verilog-label-be]  Label matching begin ... end, fork ... join, etc
                          statements.

    \\[verilog-comment-region]  Put marked area in a comment.
    \\[verilog-uncomment-region]  Uncomment an area commented with
                                  \\[verilog-comment-region].
    \\[verilog-insert-block]  Insert begin ... end.
    \\[verilog-star-comment]    Insert /* ... */.

    \\[verilog-sk-always]  Insert an always @(AS) begin .. end block.
    \\[verilog-sk-begin]  Insert a begin .. end block.
    \\[verilog-sk-case]  Insert a case block, prompting for details.
    \\[verilog-sk-for]  Insert a for (...) begin .. end block, prompting for
                        details.
    \\[verilog-sk-generate]  Insert a generate .. endgenerate block.
    \\[verilog-sk-header]  Insert a header block at the top of file.
    \\[verilog-sk-initial]  Insert an initial begin .. end block.
    \\[verilog-sk-fork]  Insert a fork begin .. end .. join block.
    \\[verilog-sk-module]  Insert a module .. (/*AUTOARG*/);.. endmodule block.
    \\[verilog-sk-ovm-class]  Insert an OVM Class block.
    \\[verilog-sk-uvm-object]  Insert an UVM Object block.
    \\[verilog-sk-uvm-component]  Insert an UVM Component block.
    \\[verilog-sk-primitive]  Insert a primitive .. (.. );.. endprimitive block.
    \\[verilog-sk-repeat]  Insert a repeat (..) begin .. end block.
    \\[verilog-sk-specify]  Insert a specify .. endspecify block.
    \\[verilog-sk-task]  Insert a task .. begin .. end endtask block.
    \\[verilog-sk-while]  Insert a while (...) begin .. end block,
                       prompting for details.
    \\[verilog-sk-casex]  Insert a casex (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-casez]  Insert a casez (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-if]  Insert an if (..) begin .. end block.
    \\[verilog-sk-else-if]  Insert an else if (..) begin .. end block.
    \\[verilog-sk-comment]  Insert a comment block.
    \\[verilog-sk-assign]  Insert an assign .. = ..; statement.
    \\[verilog-sk-function]  Insert a function .. begin .. end endfunction
                             block.
    \\[verilog-sk-input]  Insert an input declaration, prompting for details.
    \\[verilog-sk-output]  Insert an output declaration, prompting for details.
    \\[verilog-sk-state-machine]  Insert a state machine definition, prompting
                                  for details.
    \\[verilog-sk-inout]  Insert an inout declaration, prompting for details.
    \\[verilog-sk-wire]  Insert a wire declaration, prompting for details.
    \\[verilog-sk-reg]  Insert a register declaration, prompting for details.
    \\[verilog-sk-define-signal]  Define signal under point as a register at
                                  the top of the module.

All key bindings can be seen in a Verilog-buffer with \\[describe-bindings].
Key bindings specific to `verilog-mode-map' are:

\\{verilog-mode-map}

(fn)" t)
(register-definition-prefixes "verilog-mode/x/verilog-mode" '("electric-verilog-" "verilog-" "vl-"))


;;; Generated autoloads from verilog-mode/e/verilog-mode.el

(autoload 'verilog-mode "verilog-mode/e/verilog-mode" "\
Major mode for editing Verilog code.
\\<verilog-mode-map>
See \\[describe-function] verilog-auto (\\[verilog-auto]) for details on how
AUTOs can improve coding efficiency.

Use \\[verilog-faq] for a pointer to frequently asked questions.

NEWLINE, TAB indents for Verilog code.
Delete converts tabs to spaces as it moves back.

Supports highlighting.

Turning on Verilog mode calls the value of the variable `verilog-mode-hook'
with no args, if that value is non-nil.

Variables controlling indentation/edit style:

 variable `verilog-indent-level'      (default 3)
   Indentation of Verilog statements with respect to containing block.
 `verilog-indent-level-module'        (default 3)
   Absolute indentation of Module level Verilog statements.
   Set to 0 to get initial and always statements lined up
   on the left side of your screen.
 `verilog-indent-level-declaration'   (default 3)
   Indentation of declarations with respect to containing block.
   Set to 0 to get them list right under containing block.
 `verilog-indent-level-behavioral'    (default 3)
   Indentation of first begin in a task or function block
   Set to 0 to get such code to lined up underneath the task or
   function keyword.
 `verilog-indent-level-directive'     (default 1)
   Indentation of \\=`ifdef/\\=`endif blocks.
 `verilog-indent-ignore-multiline-defines' (default t)
   Non-nil means ignore indentation on lines that are part of a multiline
   define.
 `verilog-indent-ignore-regexp'     (default nil
   Regexp that matches lines that should be ignored for indentation.
 `verilog-cexp-indent'              (default 1)
   Indentation of Verilog statements broken across lines i.e.:
      if (a)
        begin
 `verilog-case-indent'              (default 2)
   Indentation for case statements.
 `verilog-auto-newline'             (default nil)
   Non-nil means automatically newline after semicolons and the punctuation
   mark after an end.
 `verilog-auto-indent-on-newline'   (default t)
   Non-nil means automatically indent line after newline.
 `verilog-tab-always-indent'        (default t)
   Non-nil means TAB in Verilog mode should always reindent the current line,
   regardless of where in the line point is when the TAB command is used.
 `verilog-indent-begin-after-if'    (default t)
   Non-nil means to indent begin statements following a preceding
   if, else, while, for and repeat statements, if any.  Otherwise,
   the begin is lined up with the preceding token.  If t, you get:
      if (a)
         begin // amount of indent based on `verilog-cexp-indent'
   otherwise you get:
      if (a)
      begin
 `verilog-indent-class-inside-pkg'  (default t)
   Non-nil means indent classes inside packages.
   Otherwise, classes have zero indentation.
 `verilog-auto-endcomments'         (default t)
   Non-nil means a comment /* ... */ is set after the ends which ends
   cases, tasks, functions and modules.
   The type and name of the object will be set between the braces.
 `verilog-minimum-comment-distance' (default 10)
   Minimum distance (in lines) between begin and end required before a comment
   will be inserted.  Setting this variable to zero results in every
   end acquiring a comment; the default avoids too many redundant
   comments in tight quarters.
 `verilog-align-decl-expr-comments' (default t)
   Non-nil means align declaration and expressions comments.
 `verilog-align-comment-distance'   (default 1)
   Distance (in spaces) between longest declaration and comments.
   Only works if `verilog-align-decl-expr-comments' is non-nil.
 `verilog-align-assign-expr'        (default nil)
   Non-nil means align expressions of continuous assignments.
 `verilog-align-typedef-regexp'     (default nil)
   Regexp that matches user typedefs for declaration alignment.
 `verilog-align-typedef-words'      (default nil)
   List of words that match user typedefs for declaration alignment.
 `verilog-auto-lineup'              (default `declarations')
   List of contexts where auto lineup of code should be done.

Variables controlling other actions:

 `verilog-linter'                   (default `none')
   Unix program to call to run the lint checker.  This is the default
   command for \\[compile-command] and \\[verilog-auto-save-compile].

See \\[customize] for the complete list of variables.

AUTO expansion functions are, in part:

    \\[verilog-auto]  Expand AUTO statements.
    \\[verilog-delete-auto]  Remove the AUTOs.
    \\[verilog-inject-auto]  Insert AUTOs for the first time.

Some other functions are:

    \\[completion-at-point]    Complete word with appropriate possibilities.
    \\[verilog-mark-defun]  Mark function.
    \\[verilog-beg-of-defun]  Move to beginning of current function.
    \\[verilog-end-of-defun]  Move to end of current function.
    \\[verilog-label-be]  Label matching begin ... end, fork ... join, etc
                          statements.

    \\[verilog-comment-region]  Put marked area in a comment.
    \\[verilog-uncomment-region]  Uncomment an area commented with
                                  \\[verilog-comment-region].
    \\[verilog-insert-block]  Insert begin ... end.
    \\[verilog-star-comment]    Insert /* ... */.

    \\[verilog-sk-always]  Insert an always @(AS) begin .. end block.
    \\[verilog-sk-begin]  Insert a begin .. end block.
    \\[verilog-sk-case]  Insert a case block, prompting for details.
    \\[verilog-sk-for]  Insert a for (...) begin .. end block, prompting for
                        details.
    \\[verilog-sk-generate]  Insert a generate .. endgenerate block.
    \\[verilog-sk-header]  Insert a header block at the top of file.
    \\[verilog-sk-initial]  Insert an initial begin .. end block.
    \\[verilog-sk-fork]  Insert a fork begin .. end .. join block.
    \\[verilog-sk-module]  Insert a module .. (/*AUTOARG*/);.. endmodule block.
    \\[verilog-sk-ovm-class]  Insert an OVM Class block.
    \\[verilog-sk-uvm-object]  Insert an UVM Object block.
    \\[verilog-sk-uvm-component]  Insert an UVM Component block.
    \\[verilog-sk-primitive]  Insert a primitive .. (.. );.. endprimitive block.
    \\[verilog-sk-repeat]  Insert a repeat (..) begin .. end block.
    \\[verilog-sk-specify]  Insert a specify .. endspecify block.
    \\[verilog-sk-task]  Insert a task .. begin .. end endtask block.
    \\[verilog-sk-while]  Insert a while (...) begin .. end block,
                       prompting for details.
    \\[verilog-sk-casex]  Insert a casex (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-casez]  Insert a casez (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-if]  Insert an if (..) begin .. end block.
    \\[verilog-sk-else-if]  Insert an else if (..) begin .. end block.
    \\[verilog-sk-comment]  Insert a comment block.
    \\[verilog-sk-assign]  Insert an assign .. = ..; statement.
    \\[verilog-sk-function]  Insert a function .. begin .. end endfunction
                             block.
    \\[verilog-sk-input]  Insert an input declaration, prompting for details.
    \\[verilog-sk-output]  Insert an output declaration, prompting for details.
    \\[verilog-sk-state-machine]  Insert a state machine definition, prompting
                                  for details.
    \\[verilog-sk-inout]  Insert an inout declaration, prompting for details.
    \\[verilog-sk-wire]  Insert a wire declaration, prompting for details.
    \\[verilog-sk-reg]  Insert a register declaration, prompting for details.
    \\[verilog-sk-define-signal]  Define signal under point as a register at
                                  the top of the module.

All key bindings can be seen in a Verilog-buffer with \\[describe-bindings].
Key bindings specific to `verilog-mode-map' are:

\\{verilog-mode-map}

(fn)" t)
(register-definition-prefixes "verilog-mode/e/verilog-mode" '("electric-verilog-" "verilog-" "vl-"))


;;; Generated autoloads from verilog-mode/verilog-mode.el

(autoload 'verilog-mode "verilog-mode/verilog-mode" "\
Major mode for editing Verilog code.
\\<verilog-mode-map>
See \\[describe-function] verilog-auto (\\[verilog-auto]) for details on how
AUTOs can improve coding efficiency.

Use \\[verilog-faq] for a pointer to frequently asked questions.

NEWLINE, TAB indents for Verilog code.
Delete converts tabs to spaces as it moves back.

Supports highlighting.

Turning on Verilog mode calls the value of the variable `verilog-mode-hook'
with no args, if that value is non-nil.

Variables controlling indentation/edit style:

 variable `verilog-indent-level'      (default 3)
   Indentation of Verilog statements with respect to containing block.
 `verilog-indent-level-module'        (default 3)
   Absolute indentation of Module level Verilog statements.
   Set to 0 to get initial and always statements lined up
   on the left side of your screen.
 `verilog-indent-level-declaration'   (default 3)
   Indentation of declarations with respect to containing block.
   Set to 0 to get them list right under containing block.
 `verilog-indent-level-behavioral'    (default 3)
   Indentation of first begin in a task or function block
   Set to 0 to get such code to lined up underneath the task or
   function keyword.
 `verilog-indent-level-directive'     (default 1)
   Indentation of \\=`ifdef/\\=`endif blocks.
 `verilog-indent-ignore-multiline-defines' (default t)
   Non-nil means ignore indentation on lines that are part of a multiline
   define.
 `verilog-indent-ignore-regexp'     (default nil
   Regexp that matches lines that should be ignored for indentation.
 `verilog-cexp-indent'              (default 1)
   Indentation of Verilog statements broken across lines i.e.:
      if (a)
        begin
 `verilog-case-indent'              (default 2)
   Indentation for case statements.
 `verilog-auto-newline'             (default nil)
   Non-nil means automatically newline after semicolons and the punctuation
   mark after an end.
 `verilog-auto-indent-on-newline'   (default t)
   Non-nil means automatically indent line after newline.
 `verilog-tab-always-indent'        (default t)
   Non-nil means TAB in Verilog mode should always reindent the current line,
   regardless of where in the line point is when the TAB command is used.
 `verilog-indent-begin-after-if'    (default t)
   Non-nil means to indent begin statements following a preceding
   if, else, while, for and repeat statements, if any.  Otherwise,
   the begin is lined up with the preceding token.  If t, you get:
      if (a)
         begin // amount of indent based on `verilog-cexp-indent'
   otherwise you get:
      if (a)
      begin
 `verilog-indent-class-inside-pkg'  (default t)
   Non-nil means indent classes inside packages.
   Otherwise, classes have zero indentation.
 `verilog-auto-endcomments'         (default t)
   Non-nil means a comment /* ... */ is set after the ends which ends
   cases, tasks, functions and modules.
   The type and name of the object will be set between the braces.
 `verilog-minimum-comment-distance' (default 10)
   Minimum distance (in lines) between begin and end required before a comment
   will be inserted.  Setting this variable to zero results in every
   end acquiring a comment; the default avoids too many redundant
   comments in tight quarters.
 `verilog-align-decl-expr-comments' (default t)
   Non-nil means align declaration and expressions comments.
 `verilog-align-comment-distance'   (default 1)
   Distance (in spaces) between longest declaration and comments.
   Only works if `verilog-align-decl-expr-comments' is non-nil.
 `verilog-align-assign-expr'        (default nil)
   Non-nil means align expressions of continuous assignments.
 `verilog-align-typedef-regexp'     (default nil)
   Regexp that matches user typedefs for declaration alignment.
 `verilog-align-typedef-words'      (default nil)
   List of words that match user typedefs for declaration alignment.
 `verilog-auto-lineup'              (default `declarations')
   List of contexts where auto lineup of code should be done.

Variables controlling other actions:

 `verilog-linter'                   (default `none')
   Unix program to call to run the lint checker.  This is the default
   command for \\[compile-command] and \\[verilog-auto-save-compile].

See \\[customize] for the complete list of variables.

AUTO expansion functions are, in part:

    \\[verilog-auto]  Expand AUTO statements.
    \\[verilog-delete-auto]  Remove the AUTOs.
    \\[verilog-inject-auto]  Insert AUTOs for the first time.

Some other functions are:

    \\[completion-at-point]    Complete word with appropriate possibilities.
    \\[verilog-mark-defun]  Mark function.
    \\[verilog-beg-of-defun]  Move to beginning of current function.
    \\[verilog-end-of-defun]  Move to end of current function.
    \\[verilog-label-be]  Label matching begin ... end, fork ... join, etc
                          statements.

    \\[verilog-comment-region]  Put marked area in a comment.
    \\[verilog-uncomment-region]  Uncomment an area commented with
                                  \\[verilog-comment-region].
    \\[verilog-insert-block]  Insert begin ... end.
    \\[verilog-star-comment]    Insert /* ... */.

    \\[verilog-sk-always]  Insert an always @(AS) begin .. end block.
    \\[verilog-sk-begin]  Insert a begin .. end block.
    \\[verilog-sk-case]  Insert a case block, prompting for details.
    \\[verilog-sk-for]  Insert a for (...) begin .. end block, prompting for
                        details.
    \\[verilog-sk-generate]  Insert a generate .. endgenerate block.
    \\[verilog-sk-header]  Insert a header block at the top of file.
    \\[verilog-sk-initial]  Insert an initial begin .. end block.
    \\[verilog-sk-fork]  Insert a fork begin .. end .. join block.
    \\[verilog-sk-module]  Insert a module .. (/*AUTOARG*/);.. endmodule block.
    \\[verilog-sk-ovm-class]  Insert an OVM Class block.
    \\[verilog-sk-uvm-object]  Insert an UVM Object block.
    \\[verilog-sk-uvm-component]  Insert an UVM Component block.
    \\[verilog-sk-primitive]  Insert a primitive .. (.. );.. endprimitive block.
    \\[verilog-sk-repeat]  Insert a repeat (..) begin .. end block.
    \\[verilog-sk-specify]  Insert a specify .. endspecify block.
    \\[verilog-sk-task]  Insert a task .. begin .. end endtask block.
    \\[verilog-sk-while]  Insert a while (...) begin .. end block,
                       prompting for details.
    \\[verilog-sk-casex]  Insert a casex (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-casez]  Insert a casez (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-if]  Insert an if (..) begin .. end block.
    \\[verilog-sk-else-if]  Insert an else if (..) begin .. end block.
    \\[verilog-sk-comment]  Insert a comment block.
    \\[verilog-sk-assign]  Insert an assign .. = ..; statement.
    \\[verilog-sk-function]  Insert a function .. begin .. end endfunction
                             block.
    \\[verilog-sk-input]  Insert an input declaration, prompting for details.
    \\[verilog-sk-output]  Insert an output declaration, prompting for details.
    \\[verilog-sk-state-machine]  Insert a state machine definition, prompting
                                  for details.
    \\[verilog-sk-inout]  Insert an inout declaration, prompting for details.
    \\[verilog-sk-wire]  Insert a wire declaration, prompting for details.
    \\[verilog-sk-reg]  Insert a register declaration, prompting for details.
    \\[verilog-sk-define-signal]  Define signal under point as a register at
                                  the top of the module.

All key bindings can be seen in a Verilog-buffer with \\[describe-bindings].
Key bindings specific to `verilog-mode-map' are:

\\{verilog-mode-map}

(fn)" t)
(register-definition-prefixes "verilog-mode/verilog-mode" '("electric-verilog-" "verilog-" "vl-"))


;;; Generated autoloads from vertico/vertico.el

(defvar vertico-mode nil "\
Non-nil if Vertico mode is enabled.
See the `vertico-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-mode'.")
(custom-autoload 'vertico-mode "vertico/vertico" nil)
(autoload 'vertico-mode "vertico/vertico" "\
VERTical Interactive COmpletion.

This is a global minor mode.  If called interactively, toggle the
`Vertico mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/vertico" '("vertico-"))


;;; Generated autoloads from vertico/extensions/vertico-buffer.el

(defvar vertico-buffer-mode nil "\
Non-nil if Vertico-Buffer mode is enabled.
See the `vertico-buffer-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-buffer-mode "vertico/extensions/vertico-buffer" nil)
(autoload 'vertico-buffer-mode "vertico/extensions/vertico-buffer" "\
Display Vertico in a buffer instead of the minibuffer.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Buffer mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-buffer-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-buffer" '("vertico-buffer-"))


;;; Generated autoloads from vertico/extensions/vertico-directory.el

(autoload 'vertico-directory-enter "vertico/extensions/vertico-directory" "\
Enter directory or exit completion with current candidate.
Exit with current input if prefix ARG is given.

(fn &optional ARG)" t)
(autoload 'vertico-directory-up "vertico/extensions/vertico-directory" "\
Delete N names before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-char "vertico/extensions/vertico-directory" "\
Delete N directories or chars before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-word "vertico/extensions/vertico-directory" "\
Delete N directories or words before point.

(fn &optional N)" t)
(autoload 'vertico-directory-tidy "vertico/extensions/vertico-directory" "\
Tidy shadowed file name, see `rfn-eshadow-overlay'.")


;;; Generated autoloads from vertico/extensions/vertico-flat.el

(defvar vertico-flat-mode nil "\
Non-nil if Vertico-Flat mode is enabled.
See the `vertico-flat-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-flat-mode'.")
(custom-autoload 'vertico-flat-mode "vertico/extensions/vertico-flat" nil)
(autoload 'vertico-flat-mode "vertico/extensions/vertico-flat" "\
Flat, horizontal display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Flat mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-flat-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-flat" '("vertico-flat-"))


;;; Generated autoloads from vertico/extensions/vertico-grid.el

(defvar vertico-grid-mode nil "\
Non-nil if Vertico-Grid mode is enabled.
See the `vertico-grid-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-grid-mode'.")
(custom-autoload 'vertico-grid-mode "vertico/extensions/vertico-grid" nil)
(autoload 'vertico-grid-mode "vertico/extensions/vertico-grid" "\
Grid display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Grid mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-grid-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-grid" '("vertico-grid-"))


;;; Generated autoloads from vertico/extensions/vertico-indexed.el

(defvar vertico-indexed-mode nil "\
Non-nil if Vertico-Indexed mode is enabled.
See the `vertico-indexed-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-indexed-mode "vertico/extensions/vertico-indexed" nil)
(autoload 'vertico-indexed-mode "vertico/extensions/vertico-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Indexed mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-indexed" '("vertico-indexed-"))


;;; Generated autoloads from vertico/extensions/vertico-mouse.el

(defvar vertico-mouse-mode nil "\
Non-nil if Vertico-Mouse mode is enabled.
See the `vertico-mouse-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-mouse-mode "vertico/extensions/vertico-mouse" nil)
(autoload 'vertico-mouse-mode "vertico/extensions/vertico-mouse" "\
Mouse support for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Mouse mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mouse-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-mouse" '("vertico-mouse-"))


;;; Generated autoloads from vertico/extensions/vertico-multiform.el

(defvar vertico-multiform-mode nil "\
Non-nil if Vertico-Multiform mode is enabled.
See the `vertico-multiform-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-multiform-mode'.")
(custom-autoload 'vertico-multiform-mode "vertico/extensions/vertico-multiform" nil)
(autoload 'vertico-multiform-mode "vertico/extensions/vertico-multiform" "\
Configure Vertico in various forms per command.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Multiform mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-multiform-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-multiform" '("vertico-multiform-"))


;;; Generated autoloads from vertico/extensions/vertico-quick.el

(autoload 'vertico-quick-jump "vertico/extensions/vertico-quick" "\
Jump to candidate using quick keys." t)
(autoload 'vertico-quick-exit "vertico/extensions/vertico-quick" "\
Exit with candidate using quick keys." t)
(autoload 'vertico-quick-insert "vertico/extensions/vertico-quick" "\
Insert candidate using quick keys." t)
(register-definition-prefixes "vertico/extensions/vertico-quick" '("vertico-quick"))


;;; Generated autoloads from vertico/extensions/vertico-repeat.el

(autoload 'vertico-repeat-save "vertico/extensions/vertico-repeat" "\
Save Vertico session for `vertico-repeat'.
This function must be registered as `minibuffer-setup-hook'.")
(autoload 'vertico-repeat-last "vertico/extensions/vertico-repeat" "\
Repeat last Vertico completion SESSION.
If called interactively from an existing Vertico session,
`vertico-repeat-last' will restore the last input and
last selected candidate for the current command.

(fn &optional SESSION)" t)
(autoload 'vertico-repeat-select "vertico/extensions/vertico-repeat" "\
Select a Vertico session from the session history and repeat it.
If called from an existing Vertico session, you can select among
previous sessions for the current command." t)
(autoload 'vertico-repeat "vertico/extensions/vertico-repeat" "\
Repeat last Vertico session.
If prefix ARG is non-nil, offer completion menu to select from session history.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-repeat" '("vertico-repeat-"))


;;; Generated autoloads from vertico/extensions/vertico-reverse.el

(defvar vertico-reverse-mode nil "\
Non-nil if Vertico-Reverse mode is enabled.
See the `vertico-reverse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-reverse-mode'.")
(custom-autoload 'vertico-reverse-mode "vertico/extensions/vertico-reverse" nil)
(autoload 'vertico-reverse-mode "vertico/extensions/vertico-reverse" "\
Reverse the Vertico display.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Reverse mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-reverse-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-reverse" '("vertico-reverse-map"))


;;; Generated autoloads from vertico/extensions/vertico-suspend.el

(autoload 'vertico-suspend "vertico/extensions/vertico-suspend" "\
Suspend the current completion session.
If the command is invoked from within the Vertico minibuffer, the
current session is suspended.  If the command is invoked from
outside the minibuffer, the active minibuffer is either selected
or the latest completion session is restored." t)
(register-definition-prefixes "vertico/extensions/vertico-suspend" '("vertico-suspend--"))


;;; Generated autoloads from vertico/extensions/vertico-unobtrusive.el

(defvar vertico-unobtrusive-mode nil "\
Non-nil if Vertico-Unobtrusive mode is enabled.
See the `vertico-unobtrusive-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-unobtrusive-mode'.")
(custom-autoload 'vertico-unobtrusive-mode "vertico/extensions/vertico-unobtrusive" nil)
(autoload 'vertico-unobtrusive-mode "vertico/extensions/vertico-unobtrusive" "\
Unobtrusive display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Unobtrusive mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-unobtrusive-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico/extensions/vertico-unobtrusive" '("vertico-unobtrusive--orig-count"))


;;; Generated autoloads from visual-regexp.el/visual-regexp.el

(autoload 'vr/mc-mark "visual-regexp.el/visual-regexp" "\
Convert regexp selection to multiple cursors.

(fn REGEXP START END)" t)
(autoload 'vr/replace "visual-regexp.el/visual-regexp" "\
Regexp-replace with live visual feedback.

(fn REGEXP REPLACE START END)" t)
(autoload 'vr/query-replace "visual-regexp.el/visual-regexp" "\
Use `vr/query-replace' like you would use `query-replace-regexp'.

(fn REGEXP REPLACE START END)" t)
(register-definition-prefixes "visual-regexp.el/visual-regexp" '("vr--" "vr/"))


;;; Generated autoloads from vundo/vundo.el

(autoload 'vundo "vundo/vundo" "\
Display visual undo for the current buffer." t)
(register-definition-prefixes "vundo/vundo" '("vundo-"))


;;; Generated autoloads from vundo/test/vundo-stress-test.el

(autoload 'vundo-stress-test "vundo/test/vundo-stress-test" "\
Stress-test vundo-mode and the undo system.
Interactively, prompts for the number of edits, undos, and
undo/redo chain depth.  NEDITS is the number of lorem-ipsum
sentences to insert which affects the total depth of the tree.
NUNDOS is the (approximate) number of undo/redo chains to
introduce into the edit sequence.  Larger values lead to wider
trees with more (sub-)branching.  MAX-CHAIN-LENGTH is the maximum
depth of the undo chains, which affects the length and nesting of
the branches.  Prefix argument TEST-ROOT-NAV enables benchmarking
navigation to the root of the undo tree.

Timing is reported for launching vundo, and (if TEST-ROOT-NAV is
non-nil) navigating to the tree's root.  Current undo limits,
buffer content size and undo-list memory usage are also reported.
Debug is enabled upon entry to vundo.

(fn NEDITS NUNDOS MAX-CHAIN-LENGTH TEST-ROOT-NAV)" t)


;;; Generated autoloads from vundo/test/vundo-test.el

(register-definition-prefixes "vundo/test/vundo-test" '("vundo-"))


;;; Generated autoloads from emacs-which-key/which-key.el

(defvar which-key-mode nil "\
Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")
(custom-autoload 'which-key-mode "emacs-which-key/which-key" nil)
(autoload 'which-key-mode "emacs-which-key/which-key" "\
Toggle which-key-mode.

This is a global minor mode.  If called interactively, toggle the
`Which-Key mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='which-key-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{which-key-mode-map}

(fn &optional ARG)" t)
(autoload 'which-key-setup-side-window-right "emacs-which-key/which-key" "\
Apply suggested settings for side-window that opens on right." t)
(autoload 'which-key-setup-side-window-right-bottom "emacs-which-key/which-key" "\
Apply suggested settings for side-window that opens on right
if there is space and the bottom otherwise." t)
(autoload 'which-key-setup-side-window-bottom "emacs-which-key/which-key" "\
Apply suggested settings for side-window that opens on bottom." t)
(autoload 'which-key-setup-minibuffer "emacs-which-key/which-key" "\
Apply suggested settings for minibuffer.
Do not use this setup if you use the paging commands. Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t)
(autoload 'which-key-add-keymap-based-replacements "emacs-which-key/which-key" "\
Replace the description of KEY using REPLACEMENT in KEYMAP.
KEY should take a format suitable for use in `kbd'. REPLACEMENT
should be a cons cell of the form (STRING . COMMAND) for each
REPLACEMENT, where STRING is the replacement string and COMMAND
is a symbol corresponding to the intended command to be
replaced. COMMAND can be nil if the binding corresponds to a key
prefix. An example is

(which-key-add-keymap-based-replacements global-map
  \"C-x w\" \\='(\"Save as\" . write-file)).

For backwards compatibility, REPLACEMENT can also be a string,
but the above format is preferred, and the option to use a string
for REPLACEMENT will eventually be removed.

(fn KEYMAP KEY REPLACEMENT &rest MORE)")
(autoload 'which-key-add-key-based-replacements "emacs-which-key/which-key" "\
Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT
may either be a string, as in

(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

(which-key-add-key-based-replacements \"C-x 8\"
                                        \\='(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to `which-key-replacement-alist'.

(fn KEY-SEQUENCE REPLACEMENT &rest MORE)")
(autoload 'which-key-add-major-mode-key-based-replacements "emacs-which-key/which-key" "\
Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)")
(autoload 'which-key-reload-key-sequence "emacs-which-key/which-key" "\
Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'. If nil, KEY-SEQ defaults to
`which-key--current-key-list'. Any prefix arguments that were
used are reapplied to the new key sequence.

(fn &optional KEY-SEQ)")
(autoload 'which-key-show-standard-help "emacs-which-key/which-key" "\
Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

(fn &optional _)" t)
(autoload 'which-key-show-next-page-no-cycle "emacs-which-key/which-key" "\
Show next page of keys unless on the last page, in which case
call `which-key-show-standard-help'." t)
(autoload 'which-key-show-previous-page-no-cycle "emacs-which-key/which-key" "\
Show previous page of keys unless on the first page, in which
case do nothing." t)
(autoload 'which-key-show-next-page-cycle "emacs-which-key/which-key" "\
Show the next page of keys, cycling from end to beginning
after last page.

(fn &optional _)" t)
(autoload 'which-key-show-previous-page-cycle "emacs-which-key/which-key" "\
Show the previous page of keys, cycling from beginning to end
after first page.

(fn &optional _)" t)
(autoload 'which-key-show-top-level "emacs-which-key/which-key" "\
Show top-level bindings.

(fn &optional _)" t)
(autoload 'which-key-show-major-mode "emacs-which-key/which-key" "\
Show top-level bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. 

(fn &optional ALL)" t)
(autoload 'which-key-show-full-major-mode "emacs-which-key/which-key" "\
Show all bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. " t)
(autoload 'which-key-dump-bindings "emacs-which-key/which-key" "\
Dump bindings from PREFIX into buffer named BUFFER-NAME.

PREFIX should be a string suitable for `kbd'.

(fn PREFIX BUFFER-NAME)" t)
(autoload 'which-key-undo-key "emacs-which-key/which-key" "\
Undo last keypress and force which-key update.

(fn &optional _)" t)
(autoload 'which-key-C-h-dispatch "emacs-which-key/which-key" "\
Dispatch C-h commands by looking up key in
`which-key-C-h-map'. This command is always accessible (from any
prefix) if `which-key-use-C-h-commands' is non nil." t)
(autoload 'which-key-show-keymap "emacs-which-key/which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

(fn KEYMAP &optional NO-PAGING)" t)
(autoload 'which-key-show-full-keymap "emacs-which-key/which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

(fn KEYMAP)" t)
(autoload 'which-key-show-minor-mode-keymap "emacs-which-key/which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'.

(fn &optional ALL)" t)
(autoload 'which-key-show-full-minor-mode-keymap "emacs-which-key/which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'." t)
(register-definition-prefixes "emacs-which-key/which-key" '("evil-state" "which-key-"))


;;; Generated autoloads from emacs-winum/winum.el

(defvar winum-mode nil "\
Non-nil if Winum mode is enabled.
See the `winum-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `winum-mode'.")
(custom-autoload 'winum-mode "emacs-winum/winum" nil)
(autoload 'winum-mode "emacs-winum/winum" "\
A minor mode that allows for managing windows based on window numbers.

This is a global minor mode.  If called interactively, toggle the
`Winum mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='winum-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{winum-keymap}

(fn &optional ARG)" t)
(autoload 'winum-select-window-0-or-10 "emacs-winum/winum" "\
Jump to window 0 if assigned or 10 if exists.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-0 "emacs-winum/winum" "\
Jump to window 0.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-1 "emacs-winum/winum" "\
Jump to window 1.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-2 "emacs-winum/winum" "\
Jump to window 2.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-3 "emacs-winum/winum" "\
Jump to window 3.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-4 "emacs-winum/winum" "\
Jump to window 4.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-5 "emacs-winum/winum" "\
Jump to window 5.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-6 "emacs-winum/winum" "\
Jump to window 6.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-7 "emacs-winum/winum" "\
Jump to window 7.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-8 "emacs-winum/winum" "\
Jump to window 8.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-9 "emacs-winum/winum" "\
Jump to window 9.
If prefix ARG is given, delete the window instead of selecting it.

(fn &optional ARG)" t)
(autoload 'winum-select-window-by-number "emacs-winum/winum" "\
Select or delete window which number is specified by ARG.
If the number is negative, delete the window instead of selecting it.
There are several ways to provide the number:
- if called from elisp with an argument, use it.
- if called interactively with a numeric prefix argument, use it.
- if prefix argument is the negative argument, delete window 0.
- if prefix argument is the default prefix argument, delete current window.
- if called interactively and no valid argument is provided, read from
  minibuffer.

(fn &optional ARG)" t)
(autoload 'winum-set-keymap-prefix "emacs-winum/winum" "\
Set key bindings prefix for `winum-keymap' based on `winum-base-map'.
This function overrides the value of `winum-keymap', so you
should call it before customization of `winum-keymap' and/or
after customization of `winum-base-map'.
PREFIX must be a key sequence, like the ones returned by `kbd'.

(fn PREFIX)")
(autoload 'winum-get-window-by-number "emacs-winum/winum" "\
Return window numbered N if exists, nil otherwise.

(fn N)")
(autoload 'winum-get-number-string "emacs-winum/winum" "\
Get the current or specified window's current number as a propertized string.
WINDOW: if specified, the window of which we want to know the number.
        If not specified, the number of the currently selected window is
        returned.

(fn &optional WINDOW)")
(autoload 'winum-get-number "emacs-winum/winum" "\
Get the current or specified window's current number.
WINDOW: if specified, the window of which we want to know the number.
        If not specified, the number of the currently selected window is
        returned.

(fn &optional WINDOW)")
(register-definition-prefixes "emacs-winum/winum" '("winum-"))


;;; Generated autoloads from with-editor/lisp/with-editor.el

(autoload 'with-editor-export-editor "with-editor/lisp/with-editor" "\
Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

(fn &optional (ENVVAR \"EDITOR\"))" t)
(autoload 'with-editor-export-git-editor "with-editor/lisp/with-editor" "\
Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t)
(autoload 'with-editor-export-hg-editor "with-editor/lisp/with-editor" "\
Like `with-editor-export-editor' but always set `$HG_EDITOR'." t)
(defvar shell-command-with-editor-mode nil "\
Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")
(custom-autoload 'shell-command-with-editor-mode "with-editor/lisp/with-editor" nil)
(autoload 'shell-command-with-editor-mode "with-editor/lisp/with-editor" "\
Teach `shell-command' to use current Emacs instance as editor.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

This is a global minor mode.  If called interactively, toggle the
`Shell-Command-With-Editor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='shell-command-with-editor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'with-editor-async-shell-command "with-editor/lisp/with-editor" "\
Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(autoload 'with-editor-shell-command "with-editor/lisp/with-editor" "\
Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(register-definition-prefixes "with-editor/lisp/with-editor" '("server-" "shell-command--shell-command-with-editor-mode" "start-file-process--with-editor-process-filter" "with-editor"))


;;; Generated autoloads from yasnippet/yasnippet.el

(autoload 'yas-minor-mode "yasnippet/yasnippet" "\
Toggle YASnippet mode.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `yas
minor mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `yas-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'yas-global-mode 'globalized-minor-mode t)
(defvar yas-global-mode nil "\
Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")
(custom-autoload 'yas-global-mode "yasnippet/yasnippet" nil)
(autoload 'yas-global-mode "yasnippet/yasnippet" "\
Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Yas minor mode is enabled in all buffers where `yas-minor-mode-on'
would do it.

See `yas-minor-mode' for more information on Yas minor mode.

(fn &optional ARG)" t)
(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)
(register-definition-prefixes "yasnippet/yasnippet" '("help-snippet-def" "snippet-mode-map" "yas"))

;;; End of scraped data

(provide 'loaddefs)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; loaddefs.el ends here
